# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-mongo
  namespace: {{ .Release.Namespace }}
  labels:
    app: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      app: mongo
      project: {{ .Values.project.slug }}
      type: app
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        release: {{ .Release.Name }}
        app: mongo
        project: {{ .Values.project.slug }}
        type: app
    spec:
      containers:
        - name: mongo
          image: "{{ .Values.mongo.image.repository }}:{{ .Values.mongo.image.tag }}"
          imagePullPolicy: {{ .Values.mongo.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.mongo.securityContext | nindent 12 }}
          args:
            - "mongod"
            - "--dbpath"
            - "/data/depictioDB"
            - "--port"
            - "27018"
          ports:
            - containerPort: {{ .Values.mongo.service.port }}
          resources:
            {{- toYaml .Values.mongo.resources | nindent 12 }}
          volumeMounts:
            - name: mongo-storage
              mountPath: /data/depictioDB
      volumes:
        - name: mongo-storage
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-mongo-pvc
---
# MinIO Deployment (S3-compatible storage)
{{- if .Values.minio.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-minio
  namespace: {{ .Release.Namespace }}
  labels:
    app: minio
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      app: minio
      project: {{ .Values.project.slug }}
      type: app
  template:
    metadata:
      labels:
        release: {{ .Release.Name }}
        app: minio
        project: {{ .Values.project.slug }}
        type: app
    spec:
      containers:
        - name: minio
          image: "{{ .Values.minio.image.repository }}:{{ .Values.minio.image.tag }}"
          imagePullPolicy: {{ .Values.minio.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.minio.securityContext | nindent 12 }}
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-depictio-secrets
                  key: MINIO_ROOT_USER
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-depictio-secrets
                  key: MINIO_ROOT_PASSWORD
          args:
            - "server"
            - "/data"
          ports:
            - containerPort: {{ .Values.minio.service.httpPort }}
            - containerPort: {{ .Values.minio.service.consolePort }}
          resources:
            {{- toYaml .Values.minio.resources | nindent 12 }}
          volumeMounts:
            - name: minio-storage
              mountPath: /data
      volumes:
        - name: minio-storage
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-minio-pvc
{{- end }}
---
# Depictio Backend Deployment (FastAPI)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-depictio-backend
  namespace: {{ .Release.Namespace }}
  labels:
    app: depictio-backend
spec:
  strategy:
    type: Recreate
  replicas: {{ .Values.backend.replicas }}
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      app: depictio-backend
      project: {{ .Values.project.slug }}
      type: app
  template:
    metadata:
      labels:
        release: {{ .Release.Name }}
        app: depictio-backend
        project: {{ .Values.project.slug }}
        type: app
    spec:
      securityContext:
        {{- toYaml .Values.backend.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.local_development }}
        - name: fix-permissions
          image: busybox:1.35
          command: ["/bin/sh"]
          args:
          - -c
          - |
            echo "Fixing permissions for mounted volumes..."
            # Create directories with correct permissions for mounted PVCs
            mkdir -p /app/depictio/dash/static/screenshots
            mkdir -p /app/depictio/keys
            mkdir -p /app/depictio/.depictio
            mkdir -p /tmp/depictio-uploads

            # Set ownership and permissions for PVC-mounted directories
            chown -R 1000:2000 /app/depictio/dash/static/screenshots
            chown -R 1000:2000 /app/depictio/keys
            chown -R 1000:2000 /app/depictio/.depictio
            chown -R 1000:2000 /tmp/depictio-uploads

            chmod -R 775 /app/depictio/dash/static/screenshots
            chmod -R 775 /app/depictio/keys
            chmod -R 775 /app/depictio/.depictio
            chmod -R 775 /tmp/depictio-uploads

            echo "PVC permissions fixed!"
          volumeMounts:
            - name: depictio-screenshots
              mountPath: /app/depictio/dash/static/screenshots
            - name: depictio-keys
              mountPath: /app/depictio/keys
            - name: depictio-config
              mountPath: /app/depictio/.depictio
            - name: depictio-uploads
              mountPath: /tmp/depictio-uploads
        {{- end }}
        - name: copy-screenshot-file
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.backend.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.initContainerResources | nindent 12 }}
          command: ['sh', '-c']
          args:
            - |
              if [ -f /app/depictio/dash/static/screenshots/6824cb3b89d2b72169309737.png ]; then
                cp /app/depictio/dash/static/screenshots/6824cb3b89d2b72169309737.png /mounted-screenshots/
                echo "Screenshot file copied successfully"
              else
                echo "Screenshot file not found in image, skipping copy"
              fi
          volumeMounts:
            - name: depictio-screenshots
              mountPath: /mounted-screenshots
        - name: wait-for-mongo
          image: busybox:1.35
          command: ['sh', '-c', 'until nc -z {{ .Release.Name }}-mongo {{ .Values.mongo.service.port }}; do echo "Waiting for mongo..."; sleep 2; done']
          securityContext:
            {{- toYaml .Values.backend.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.initContainerResources | nindent 12 }}
        {{- if .Values.minio.enabled }}
        - name: wait-for-minio
          image: busybox:1.35
          command: ['sh', '-c', 'until nc -z {{ .Release.Name }}-minio {{ .Values.minio.service.httpPort }}; do echo "Waiting for minio..."; sleep 2; done']
          securityContext:
            {{- toYaml .Values.backend.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.initContainerResources | nindent 12 }}
        {{- end }}
      containers:
        - name: depictio-backend
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.backend.securityContext | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-backend-config
          env:
            {{- if .Values.minio.enabled }}
            - name: DEPICTIO_MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-depictio-secrets
                  key: MINIO_ROOT_USER
            - name: DEPICTIO_MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-depictio-secrets
                  key: MINIO_ROOT_PASSWORD
            {{- end }}
            - name: WATCHFILES_FORCE_POLLING
              value: "true"
            - name: PYTHONUNBUFFERED
              value: "1"
          command:
            - "/app/run_fastapi.sh"
          ports:
            - containerPort: {{ .Values.backend.service.targetPort }}
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
          volumeMounts:
            - name: depictio-screenshots
              mountPath: /app/depictio/dash/static/screenshots
            - name: depictio-keys
              mountPath: /app/depictio/keys
            - name: depictio-config
              mountPath: /app/depictio/.depictio
            - name: depictio-uploads
              mountPath: /tmp/depictio-uploads
            {{- if .Values.local_development }}
            # DEV ONLY: mount the depictio source code for development
            ## Use minikube mount or similar to mount the local source code
            - name: depictio-source
              mountPath: /app
            {{- end }}
      volumes:
        - name: depictio-screenshots
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-depictio-screenshots-pvc
        - name: depictio-keys
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-depictio-keys-pvc
        - name: depictio-config
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-depictio-config-pvc
        - name: depictio-uploads
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-depictio-uploads-pvc
        {{- if .Values.local_development }}
        # DEV ONLY: mount the depictio source code for development
        ## Use minikube mount or similar to mount the local source code
        - name: depictio-source
          hostPath:
            path: /app
            type: Directory
        {{- end }}
---
# Depictio Frontend Deployment (Dash)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-depictio-frontend
  namespace: {{ .Release.Namespace }}
  labels:
    app: depictio-frontend
spec:
  replicas: {{ .Values.frontend.replicas }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      app: depictio-frontend
      project: {{ .Values.project.slug }}
      type: app
  template:
    metadata:
      labels:
        release: {{ .Release.Name }}
        app: depictio-frontend
        project: {{ .Values.project.slug }}
        type: app
    spec:
      initContainers:
        # STEP 1: Wait for backend service to be available (network check)
        - name: wait-for-backend
          image: busybox:1.35
          command: ['sh', '-c', 'until nc -z {{ .Release.Name }}-depictio-backend {{ .Values.backend.service.httpPort }}; do echo "Waiting for backend service..."; sleep 2; done']
          securityContext:
            {{- toYaml .Values.frontend.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.initContainerResources | nindent 12 }}

        # STEP 2: Wait for backend to fully start and generate keys
        - name: wait-for-backend-startup
          image: curlimages/curl:8.5.0
          securityContext:
            {{- toYaml .Values.frontend.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.initContainerResources | nindent 12 }}
          command:
            - 'sh'
            - '-c'
            - |
              echo "Waiting for backend to complete initialization..."
              timeout=300
              elapsed=0

              while [ $elapsed -lt $timeout ]; do
                # Try to get a response from backend (any response means it's started)
                if curl -s -m 10 http://{{ .Release.Name }}-depictio-backend:{{ .Values.backend.service.httpPort }}/ >/dev/null 2>&1 || \
                  curl -s -m 10 http://{{ .Release.Name }}-depictio-backend:{{ .Values.backend.service.httpPort }}/health >/dev/null 2>&1 || \
                  curl -s -m 10 http://{{ .Release.Name }}-depictio-backend:{{ .Values.backend.service.httpPort }}/docs >/dev/null 2>&1; then
                  echo "✅ Backend is responding to HTTP requests"
                  # Additional wait to ensure key generation completes
                  echo "⏳ Allowing time for key generation..."
                  sleep 10
                  break
                fi
                echo "⏳ Backend still starting up... (${elapsed}s/${timeout}s)"
                sleep 5
                elapsed=$((elapsed + 5))
              done

              if [ $elapsed -ge $timeout ]; then
                echo "❌ Timeout waiting for backend to respond"
                exit 1
              fi

        # STEP 3: Verify key files are actually available
        - name: wait-for-api-key
          image: busybox:1.35
          securityContext:
            {{- toYaml .Values.frontend.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.initContainerResources | nindent 12 }}
          command:
            - 'sh'
            - '-c'
            - |
              echo "Verifying API key files are available..."
              timeout=120  # Shorter timeout since backend should be ready
              elapsed=0
              ls -la /app/depictio/keys/ || echo "Keys directory not accessible"

              while [ $elapsed -lt $timeout ]; do
                if [ -f /app/depictio/keys/api_internal_key.pem ]; then
                  echo "✅ API internal key file found"
                  ls -la /app/depictio/keys/
                  exit 0
                fi
                echo "⏳ Waiting for API key file... (${elapsed}s/${timeout}s)"
                sleep 3
                elapsed=$((elapsed + 3))
              done

              echo "❌ API key file not found after ${timeout} seconds"
              echo "Contents of keys directory:"
              ls -la /app/depictio/keys/ || echo "Keys directory not accessible"
              exit 1
          volumeMounts:
          - name: depictio-keys
            mountPath: /app/depictio/keys

      containers:
        - name: depictio-frontend
          image: "{{ .Values.frontend.image.repository }}:{{ .Values.frontend.image.tag }}"
          imagePullPolicy: {{ .Values.frontend.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.frontend.securityContext | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-frontend-config
          env:
            {{- if .Values.minio.enabled }}
            - name: DEPICTIO_MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-depictio-secrets
                  key: MINIO_ROOT_USER
            - name: DEPICTIO_MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-depictio-secrets
                  key: MINIO_ROOT_PASSWORD
            {{- end }}
          command:
            - "/app/run_dash.sh"
          ports:
            - containerPort: {{ .Values.frontend.service.targetPort }}
          resources:
            {{- toYaml .Values.frontend.resources | nindent 12 }}
          volumeMounts:
            - name: depictio-screenshots
              mountPath: /app/depictio/dash/static/screenshots
            - name: depictio-keys
              mountPath: /app/depictio/keys
            - name: depictio-config
              mountPath: /app/depictio/.depictio
            - name: depictio-uploads
              mountPath: /tmp/depictio-uploads
            {{- if .Values.local_development }}
            # DEV ONLY: mount the depictio source code for development
            ## Use minikube mount or similar to mount the local source code
            - name: depictio-source
              mountPath: /app
            {{- end }}

      volumes:
        - name: depictio-screenshots
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-depictio-screenshots-pvc
        - name: depictio-keys
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-depictio-keys-pvc
        - name: depictio-config
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-depictio-config-pvc
        - name: depictio-uploads
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-depictio-uploads-pvc
        {{- if .Values.local_development }}
        # DEV ONLY: mount the depictio source code for development
        ## Use minikube mount or similar to mount the local source code
        - name: depictio-source
          hostPath:
            path: /app
            type: Directory
        {{- end }}
