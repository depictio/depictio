apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  namespace: {{ .Release.Namespace }}
  labels:
    app: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: "{{ .Values.mongo.image.repository }}:{{ .Values.mongo.image.tag }}"
          imagePullPolicy: {{ .Values.mongo.image.pullPolicy }}
          args:
            - "mongod"
            - "--dbpath"
            - "/data/depictioDB"
            - "--port"
            - "27018"
          ports:
            - containerPort: {{ .Values.mongo.service.port }}
          resources:
            {{- toYaml .Values.mongo.resources | nindent 12 }}
          volumeMounts:
            - name: mongo-storage
              mountPath: /data/depictioDB
      volumes:
        - name: mongo-storage
          persistentVolumeClaim:
            claimName: mongo-pvc
---
{{- if .Values.minio.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: {{ .Release.Namespace }}
  labels:
    app: minio
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          image: "{{ .Values.minio.image.repository }}:{{ .Values.minio.image.tag }}"
          imagePullPolicy: {{ .Values.minio.image.pullPolicy }}
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: depictio-secrets
                  key: MINIO_ROOT_USER
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: depictio-secrets
                  key: MINIO_ROOT_PASSWORD
          args:
            - "server"
            - "/data"
            - "--console-address"
            - ":9001"
          ports:
            - containerPort: {{ .Values.minio.service.httpPort }}
            - containerPort: {{ .Values.minio.service.consolePort }}
          resources:
            {{- toYaml .Values.minio.resources | nindent 12 }}
          volumeMounts:
            - name: minio-storage
              mountPath: /data
      volumes:
        - name: minio-storage
          persistentVolumeClaim:
            claimName: minio-pvc
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: depictio-backend
  namespace: {{ .Release.Namespace }}
  labels:
    app: depictio-backend
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: depictio-backend
  template:
    metadata:
      labels:
        app: depictio-backend
    spec:
      securityContext:
        fsGroup: {{ .Values.backend.securityContext.fsGroup }}
      containers:
        - name: depictio-backend
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          # Use the ConfigMap
          envFrom:
            - configMapRef:
                name: backend-config
          command:
            - "/app/run_fastapi.sh"
          ports:
            - containerPort: {{ .Values.backend.service.targetPort }}
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
          volumeMounts:
            - name: depictio-screenshots
              mountPath: /app/depictio/dash/static/screenshots
      volumes:
        - name: depictio-screenshots
          persistentVolumeClaim:
            claimName: depictio-screenshots-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: depictio-frontend
  namespace: {{ .Release.Namespace }}
  labels:
    app: depictio-frontend
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: depictio-frontend
  template:
    metadata:
      labels:
        app: depictio-frontend
    spec:
      containers:
        - name: depictio-frontend
          image: "{{ .Values.frontend.image.repository }}:{{ .Values.frontend.image.tag }}"
          imagePullPolicy: {{ .Values.frontend.image.pullPolicy }}
          # Use the ConfigMap
          envFrom:
            - configMapRef:
                name: frontend-config
          command:
            - "/app/run_dash.sh"
          ports:
            - containerPort: {{ .Values.frontend.service.targetPort }}
          resources:
            {{- toYaml .Values.frontend.resources | nindent 12 }}
          volumeMounts:
            - name: depictio-screenshots
              mountPath: /app/depictio/dash/static/screenshots
      volumes:
        - name: depictio-screenshots
          persistentVolumeClaim:
            claimName: depictio-screenshots-pvc