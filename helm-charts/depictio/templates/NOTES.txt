{{- $frontendSvc := printf "%s-frontend" .Release.Name -}}
{{- $backendSvc := printf "%s-backend" .Release.Name -}}
{{- $mongoSvc := printf "%s-mongo" .Release.Name -}}
{{- $minioSvc := printf "%s-minio" .Release.Name -}}

Thank you for installing {{ .Chart.Name }}.

Your release is named {{ .Release.Name }} in namespace {{ .Release.Namespace }}.

{{- if .Values.ingress.enabled }}
{{- $host := "" }}
{{- range $index, $host := .Values.ingress.hosts }}
  {{- if eq $index 0 }}
    {{- $host = .host }}
  {{- end }}
{{- end }}

{{- if $host }}
You can access the application at:
  http://{{ $host }}
{{- else }}
The ingress is enabled but no host is specified. Please add a host to your ingress configuration.
{{- end }}

{{- else }}
The application can be accessed using port forwarding:

  kubectl port-forward svc/{{ $frontendSvc }} 8080:80
  kubectl port-forward svc/{{ $backendSvc }} 8081:80

Then visit:
  - Frontend: http://localhost:8080
  - Backend API: http://localhost:8081
{{- end }}

{{- if .Values.minio.enabled }}
The MinIO service is deployed and can be accessed at:
  kubectl port-forward svc/{{ $minioSvc }} 9000:{{ .Values.minio.service.httpPort }}
  kubectl port-forward svc/{{ $minioSvc }} 9001:{{ .Values.minio.service.consolePort }}

MinIO credentials:
  Username: {{ .Values.secrets.minioRootUser }}
  Password: {{ .Values.secrets.minioRootPassword }}
{{- end }}

MongoDB is available at:
  kubectl port-forward svc/{{ $mongoSvc }} 27018:{{ .Values.mongo.service.port }}

{{- if contains "Never" .Values.backend.image.pullPolicy }}
NOTE: The backend image is set to 'Never' pull policy. This is typically used for local development
with images built and loaded directly into the cluster.
{{- end }}

{{- if contains "Never" .Values.frontend.image.pullPolicy }}
NOTE: The frontend image is set to 'Never' pull policy. This is typically used for local development
with images built and loaded directly into the cluster.
{{- end }}

{{- if eq .Values.persistence.screenshots.accessMode "ReadWriteOnce" }}
NOTE: The screenshots PVC uses ReadWriteOnce access mode. If frontend and backend pods are scheduled
on different nodes, they won't be able to share the volume. In multi-node clusters, consider using
ReadWriteMany if your storage class supports it.
{{- end }}

To check the status of your pods:
  kubectl get pods -l release={{ .Release.Name }}

For more information about Depictio, visit:
  https://github.com/depictio/depictio

{{ if .Release.IsUpgrade -}}
This was an upgrade of an existing deployment.
{{- else -}}
This was a fresh installation.
{{- end }}

Chart version: {{ .Chart.Version }}
App version: {{ .Chart.AppVersion }}