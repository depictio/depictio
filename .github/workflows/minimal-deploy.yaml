name: Minimal Depictio CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # quality:
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install uv
  #       uses: astral-sh/setup-uv@v5
  #     - name: Setup Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.11"
  #     - name: Install and test
  #       run: |
  #         uv venv venv
  #         source venv/bin/activate
  #         uv pip install -e .
  #         uv pip install pytest ruff
  #         ruff check .
  #         pytest tests/ -xvs

  docker-build:
    # needs: quality
    runs-on: ubuntu-22.04
    outputs:
      image-tag: ${{ steps.image-info.outputs.tag }}
      rebuild-needed: ${{ steps.check-rebuild.outputs.rebuild }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure Docker Permissions
        run: |
          # Add current user to docker group (ignore if already exists)
          sudo usermod -aG docker $USER || true
          # Change docker socket permissions
          sudo chmod 666 /var/run/docker.sock
          # Verify permissions
          ls -la /var/run/docker.sock
          groups

      - name: Check os version
        run: |
          echo "OS Version: $(cat /etc/os-release)"
          echo "Kernel Version: $(uname -r)"
          echo "Architecture: $(uname -m)"
          docker --version
          docker compose version

      # Export UID and GID
      - name: Export UID and GID
        run: |
          echo "UID=$(id -u)" >> $GITHUB_ENV
          echo "GID=$(id -g)" >> $GITHUB_ENV

      - name: Generate .env
        run: |
          cp .env.example .env

      - name: Create and Set Permissions for depictioDB
        run: |
          mkdir -p depictioDB/
          chown -R "$(id -u):$(id -g)" depictioDB/
          chmod -R 777 depictioDB/

      - name: Create and Set Permissions for minio_data
        run: |
          mkdir -p minio_data/
          chown -R "$(id -u):$(id -g)" minio_data/
          chmod -R 775 minio_data/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image info
        id: image-info
        run: |
          # Create hash from Docker-related files
          DOCKER_HASH=$(cat docker-images/Dockerfile_depictio.dockerfile requirements.txt pyproject.toml | sha256sum | cut -d' ' -f1 | cut -c1-12)

          # Use PR number for PRs, commit hash for main
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            TAG="pr-${{ github.event.number }}-${DOCKER_HASH}"
          else
            TAG="main-${DOCKER_HASH}"
          fi

          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "hash=${DOCKER_HASH}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG}"

      - name: Check if rebuild needed
        id: check-rebuild
        run: |
          IMAGE_TAG="${{ steps.image-info.outputs.tag }}"

          # Check if image already exists in registry
          if docker manifest inspect ghcr.io/${{ github.repository_owner }}/depictio:${IMAGE_TAG} > /dev/null 2>&1; then
            echo "rebuild=false" >> $GITHUB_OUTPUT
            echo "âœ… Image ghcr.io/${{ github.repository_owner }}/depictio:${IMAGE_TAG} already exists, skipping build"
          else
            echo "rebuild=true" >> $GITHUB_OUTPUT
            echo "ðŸ”¨ Image doesn't exist, will build ghcr.io/${{ github.repository_owner }}/depictio:${IMAGE_TAG}"
          fi

      - name: Build and push new image
        if: steps.check-rebuild.outputs.rebuild == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker-images/Dockerfile_depictio.dockerfile
          push: true
          load: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/depictio:${{ steps.image-info.outputs.tag }}
            depictio:latest
          cache-from: type=gha,scope=depictio
          cache-to: type=gha,mode=max,scope=depictio

      - name: Pull existing image
        if: steps.check-rebuild.outputs.rebuild == 'false'
        run: |
          IMAGE_TAG="${{ steps.image-info.outputs.tag }}"
          echo "ðŸ“¥ Pulling existing image..."
          docker pull ghcr.io/${{ github.repository_owner }}/depictio:${IMAGE_TAG}
          docker tag ghcr.io/${{ github.repository_owner }}/depictio:${IMAGE_TAG} depictio:latest
          echo "âœ… Using cached image: ghcr.io/${{ github.repository_owner }}/depictio:${IMAGE_TAG}"

      - name: Start services
        run: |
          docker compose -f docker-compose.dev.yaml -f docker-compose/docker-compose.minio.yaml up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for depictio-backend to be healthy..."
          # Wait for the depictio-backend service to be healthy
          sleep 10  # Initial wait to allow services to start

      # Extract the token and perform a health check with the token
      - name: Extract Token and Check Depictio Backend Health
        run: |
          # Extract the access token from the YAML file
          token=$(docker compose exec depictio-backend bash -c "cat /app/depictio/.depictio/admin_config.yaml" | grep 'access_token' | awk '{print $2}')

          # Remove quotes from the token if any
          token=$(echo $token | tr -d "'\"")

          # Hash the token using SHA256 for safe logging
          token_hash=$(echo -n "$token" | sha256sum)
          echo "Extracted token hash: $token_hash"



          # Perform the health check using the extracted token
          health_check=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $token" http://localhost:8058/depictio/api/v1/utils/status)

          if [ "$health_check" != "200" ]; then
            echo "Backend API is not healthy. Status code: $health_check"
            exit 1
          else
            echo "Backend API is healthy."
          fi

  cli-tests:
    needs: docker-build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Use cached image and start services
        run: |
          # Pull the exact image built/used in docker-build job
          IMAGE_TAG="${{ needs.docker-build.outputs.image-tag }}"
          echo "ðŸ”„ Using image: ghcr.io/${{ github.repository_owner }}/depictio:${IMAGE_TAG}"

          docker pull ghcr.io/${{ github.repository_owner }}/depictio:${IMAGE_TAG}
          docker tag ghcr.io/${{ github.repository_owner }}/depictio:${IMAGE_TAG} depictio:latest

          cp .env.example .env
          mkdir -p depictioDB minio_data
          chmod 777 depictioDB minio_data
          docker compose -f docker-compose.dev.yaml -f docker-compose/docker-compose.minio.yaml up -d

      - name: Setup CLI
        run: |
          cd depictio/cli
          uv venv venv
          source venv/bin/activate
          uv pip install -e .

      - name: Run CLI tests
        run: |
          cd depictio/cli
          source venv/bin/activate
          # Copy config from container
          docker cp depictio-backend:/app/.depictio/admin_config.yaml .
          # Run CLI commands
          depictio-cli config show-cli-config --CLI-config-path admin_config.yaml

  e2e-tests:
    needs: docker-build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Use cached image and start services
        run: |
          # Pull the exact image built/used in docker-build job
          IMAGE_TAG="${{ needs.docker-build.outputs.image-tag }}"
          echo "ðŸ”„ Using image: ghcr.io/${{ github.repository_owner }}/depictio:${IMAGE_TAG}"

          docker pull ghcr.io/${{ github.repository_owner }}/depictio:${IMAGE_TAG}
          docker tag ghcr.io/${{ github.repository_owner }}/depictio:${IMAGE_TAG} depictio:latest

          cp .env.example .env
          mkdir -p depictioDB minio_data
          chmod 777 depictioDB minio_data
          docker compose -f docker-compose.dev.yaml -f docker-compose/docker-compose.minio.yaml up -d

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Run E2E tests
        run: |
          cd tests/e2e-tests
          npm ci
          npx cypress run
