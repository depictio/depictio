name: Docker Image Build (AMD64) - Beta only

on:
  push:
    tags:
      - "v[0-9]*.[0-9]*.[0-9]*-beta*"  # Beta releases only (v0.0.4-beta)
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version information
        id: version
        run: |
          # Extract the git tag (v0.0.4-beta, etc.)
          GIT_TAG=${GITHUB_REF#refs/tags/}

          # Clean version number (without v prefix)
          CLEAN_VERSION=${GIT_TAG#v}
          echo "VERSION=$CLEAN_VERSION" >> $GITHUB_OUTPUT

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Version tag
            type=raw,value=${{ steps.version.outputs.VERSION }}

            # Tag as beta
            type=raw,value=beta

            # Always tag as dev and edge
            type=raw,value=dev
            type=raw,value=edge

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker-images/Dockerfile_depictio.dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max