name: Test, Build and Push Helm Chart

on:
  push:
    branches: [ main ]
    paths:
      - "helm-charts/depictio/**"
      - "docker-images/Dockerfile_depictio.dockerfile"
      - ".github/workflows/test-and-package-helm-chart.yaml"
  pull_request:
    branches: [ main ]
    paths:
      - "helm-charts/depictio/**"
      - "docker-images/Dockerfile_depictio.dockerfile"
      - ".github/workflows/test-and-package-helm-chart.yaml"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  CHART_NAME: depictio-helm

jobs:
  test-build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: "v3.14.0"

      - name: Extract chart metadata
        id: chart-info
        run: |
          CHART_VERSION=$(helm show chart ./helm-charts/depictio | grep '^version:' | awk '{print $2}')
          APP_VERSION=$(helm show chart ./helm-charts/depictio | grep '^appVersion:' | awk '{print $2}' | tr -d '"')
          echo "chart_version=${CHART_VERSION}" >> $GITHUB_OUTPUT
          echo "app_version=${APP_VERSION}" >> $GITHUB_OUTPUT
          echo "Chart version: ${CHART_VERSION}"
          echo "App version: ${APP_VERSION}"

      - name: Set up Minikube
        uses: medyagh/setup-minikube@master
        with:
          minikube-version: "1.35.0"
          kubernetes-version: "v1.32.0"
          driver: docker
          start-args: "--memory=4096 --cpus=2"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Generate image info
        id: image-info
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            TAG="pr-${{ github.event.number }}-${{ github.sha }}"
          else
            TAG="main-${{ github.sha }}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "repo=${REPO_LOWER}" >> $GITHUB_OUTPUT
          echo "full-image=ghcr.io/${REPO_LOWER}:${TAG}" >> $GITHUB_OUTPUT

      - name: Check if rebuild needed
        id: check-rebuild
        run: |
          FULL_IMAGE="${{ steps.image-info.outputs.full-image }}"
          if docker manifest inspect "${FULL_IMAGE}" > /dev/null 2>&1; then
            echo "rebuild=false" >> $GITHUB_OUTPUT
            echo "✅ Image ${FULL_IMAGE} already exists, skipping build"
          else
            echo "rebuild=true" >> $GITHUB_OUTPUT
            echo "🔨 Image doesn't exist, will build ${FULL_IMAGE}"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        if: steps.check-rebuild.outputs.rebuild == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker-images/Dockerfile_depictio.dockerfile
          platforms: linux/amd64
          push: true
          load: false
          tags: ${{ steps.image-info.outputs.full-image }}
          cache-from: |
            type=gha,scope=${{ github.ref_name }}
            type=gha,scope=refs/heads/main
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}

      - name: Pull image to Minikube
        run: |
          eval $(minikube docker-env)
          docker pull "${{ steps.image-info.outputs.full-image }}"
          docker tag "${{ steps.image-info.outputs.full-image }}" "depictio:${{ steps.chart-info.outputs.app_version }}"
          docker images | grep depictio

      - name: Get Kubernetes cluster info
        run: |
          kubectl cluster-info
          kubectl get nodes
          kubectl version

      - name: Lint Helm chart
        run: |
          helm lint ./helm-charts/depictio

      - name: Test chart packaging
        run: |
          # Package the chart
          helm package ./helm-charts/depictio --version ${{ steps.chart-info.outputs.chart_version }}

          # Verify package was created
          ls -la depictio-*.tgz

          # Test chart from package
          helm template test-release ./depictio-${{ steps.chart-info.outputs.chart_version }}.tgz > /tmp/rendered-manifests.yaml
          echo "Successfully rendered chart from package"

      - name: Validate Kubernetes manifests
        run: |
          echo "🔍 Validating rendered Kubernetes manifests..."

          # Check for required resources
          if ! grep -q "kind: Deployment" /tmp/rendered-manifests.yaml; then
            echo "❌ No Deployment found in manifests"
            exit 1
          fi

          if ! grep -q "kind: Service" /tmp/rendered-manifests.yaml; then
            echo "❌ No Service found in manifests"
            exit 1
          fi

          echo "✅ Basic manifest validation passed"

      - name: Generate random release name
        id: release-info
        run: |
          # Generate DNS-compliant release name: letter + 9 random hex chars
          RANDOM_SUFFIX=$(openssl rand -hex 4 | cut -c1-9)
          RELEASE_NAME="r${RANDOM_SUFFIX}"
          echo "release_name=${RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "🎲 Generated DNS-compliant release name: ${RELEASE_NAME}"

          # Validate the name meets DNS requirements
          if [[ $RELEASE_NAME =~ ^[a-z][a-z0-9-]*[a-z0-9]$ ]]; then
            echo "✅ Release name is DNS-compliant"
          else
            echo "❌ Release name validation failed: $RELEASE_NAME"
            exit 1
          fi

      - name: Install Helm chart (from local directory)
        run: |
          echo "📦 Installing Helm chart..."
          echo "Release name: ${{ steps.release-info.outputs.release_name }}"
          echo "App version: ${{ steps.chart-info.outputs.app_version }}"

          helm upgrade --install ${{ steps.release-info.outputs.release_name }} ./helm-charts/depictio \
            -f ./helm-charts/depictio/values.yaml \
            -f ./helm-charts/depictio/values-gh-actions.yaml \
            --set backend.image.repository=depictio \
            --set backend.image.tag=${{ steps.chart-info.outputs.app_version }} \
            --set backend.image.pullPolicy=Never \
            --set frontend.image.repository=depictio \
            --set frontend.image.tag=${{ steps.chart-info.outputs.app_version }} \
            --set frontend.image.pullPolicy=Never \
            --debug

          echo "✅ Helm installation completed"
          echo "📊 Checking initial state..."
          kubectl get all -l "release=${{ steps.release-info.outputs.release_name }}"

      - name: Wait for Kubernetes Resources to Propagate
        run: |
          echo "⏳ Waiting for Kubernetes resources to propagate..."
          RELEASE_NAME="${{ steps.release-info.outputs.release_name }}"

          # Initial wait for resource creation
          echo "🕐 Initial 30-second wait for resource creation..."
          sleep 30

          # Poll for expected deployments to be created
          echo "🔍 Waiting for deployments to be created..."
          timeout=180  # 3 minutes total timeout
          elapsed=0
          expected_deployments=4  # mongo, minio, backend, frontend

          while [ $elapsed -lt $timeout ]; do
            # Count deployments by their names (since label selectors aren't matching properly)
            deployment_count=$(kubectl get deployments --no-headers 2>/dev/null | grep -c "^${RELEASE_NAME}-" || echo "0")
            echo "📊 Found $deployment_count deployments (expecting $expected_deployments)"

            if [ "$deployment_count" -ge "$expected_deployments" ]; then
              echo "✅ All expected deployments have been created"
              break
            fi

            echo "⏳ Waiting for more deployments... (${elapsed}s/${timeout}s)"
            sleep 10
            elapsed=$((elapsed + 10))
          done

          if [ $elapsed -ge $timeout ]; then
            echo "❌ Timeout waiting for deployments to be created"
            echo "📊 Final deployment status:"
            kubectl get deployments --no-headers | grep "^${RELEASE_NAME}-" || echo "No deployments found with prefix ${RELEASE_NAME}-"
            echo "📊 All deployments:"
            kubectl get deployments
            echo "📊 All resources with release label:"
            kubectl get all -l "release=${RELEASE_NAME}"
            exit 1
          fi

          # List all created deployments for verification
          echo "📋 Created deployments:"
          kubectl get deployments --no-headers | grep "^${RELEASE_NAME}-" || echo "No deployments found"

          echo "✅ Resource propagation complete"

      - name: Test Inter-Service Connectivity
        run: |
          echo "🔗 Testing inter-service connectivity..."
          RELEASE_NAME="${{ steps.release-info.outputs.release_name }}"
          echo "🎯 Using release name: $RELEASE_NAME"

          # First check what pods exist
          echo "🔍 Checking existing pods..."
          kubectl get pods -l "release=${RELEASE_NAME}" --show-labels || echo "No pods found yet"

          # Check deployments status first
          echo "📊 Checking deployment status..."
          kubectl get deployments -l "release=${RELEASE_NAME}" || echo "No deployments found"

          # Wait for deployments to be available
          echo "⏳ Waiting for deployments to be available..."
          kubectl wait --for=condition=available deployment -l "release=${RELEASE_NAME}" --timeout=300s || {
            echo "❌ Deployments failed to become available"
            echo "📊 Deployment details:"
            kubectl describe deployments -l "release=${RELEASE_NAME}"
            exit 1
          }

          # Now wait for specific pods to be ready
          echo "⏳ Waiting for backend pods to be ready..."
          kubectl wait --for=condition=ready pod -l "release=${RELEASE_NAME},app=depictio-backend" --timeout=300s || {
            echo "❌ Backend pods failed to be ready"
            echo "📊 Backend pod details:"
            kubectl describe pods -l "release=${RELEASE_NAME},app=depictio-backend"
            exit 1
          }

          echo "⏳ Waiting for frontend pods to be ready..."
          kubectl wait --for=condition=ready pod -l "release=${RELEASE_NAME},app=depictio-frontend" --timeout=300s || {
            echo "❌ Frontend pods failed to be ready"
            echo "📊 Frontend pod details:"
            kubectl describe pods -l "release=${RELEASE_NAME},app=depictio-frontend"
            exit 1
          }

          # Additional wait for containers to fully start
          sleep 30

          # Use the correct selectors with release name
          echo "🔍 Finding backend pod..."
          BACKEND_POD=$(kubectl get pods -l "release=${RELEASE_NAME},app=depictio-backend" -o jsonpath='{.items[0].metadata.name}' || echo "")
          if [ -z "$BACKEND_POD" ]; then
            echo "❌ No backend pod found with labels: release=${RELEASE_NAME},app=depictio-backend"
            echo "📊 Available pods:"
            kubectl get pods -l "release=${RELEASE_NAME}" --show-labels
            exit 1
          fi

          echo "🔍 Finding frontend pod..."
          FRONTEND_POD=$(kubectl get pods -l "release=${RELEASE_NAME},app=depictio-frontend" -o jsonpath='{.items[0].metadata.name}' || echo "")
          if [ -z "$FRONTEND_POD" ]; then
            echo "❌ No frontend pod found with labels: release=${RELEASE_NAME},app=depictio-frontend"
            echo "📊 Available pods:"
            kubectl get pods -l "release=${RELEASE_NAME}" --show-labels
            exit 1
          fi

          echo "✅ Backend pod: $BACKEND_POD"
          echo "✅ Frontend pod: $FRONTEND_POD"

          # Check pod status and logs before connectivity tests
          echo ""
          echo "📊 Pod Status Summary:"
          kubectl get pods -l "release=${RELEASE_NAME}"

          echo ""
          echo "🔍 Backend Pod Detailed Status:"
          kubectl describe pod $BACKEND_POD | grep -A 10 "Conditions:"

          echo ""
          echo "🔍 Frontend Pod Detailed Status:"
          kubectl describe pod $FRONTEND_POD | grep -A 10 "Conditions:"

          echo ""
          echo "=============================="
          echo "📋 BACKEND POD LOGS (FULL)"
          echo "=============================="
          kubectl logs $BACKEND_POD --all-containers=true || echo "❌ Could not get backend logs"

          echo ""
          echo "=============================="
          echo "📋 FRONTEND POD LOGS (FULL)"
          echo "=============================="
          kubectl logs $FRONTEND_POD --all-containers=true || echo "❌ Could not get frontend logs"

          echo ""
          echo "=============================="
          echo "📋 BACKEND INIT CONTAINER LOGS"
          echo "=============================="
          kubectl logs $BACKEND_POD --previous --all-containers=true 2>/dev/null || echo "ℹ️  No previous backend container logs available"

          echo ""
          echo "=============================="
          echo "📋 FRONTEND INIT CONTAINER LOGS"
          echo "=============================="
          kubectl logs $FRONTEND_POD --previous --all-containers=true 2>/dev/null || echo "ℹ️  No previous frontend container logs available"

          echo ""
          echo "🔍 Pod Container Status Details:"
          kubectl get pods $BACKEND_POD $FRONTEND_POD -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{range .status.containerStatuses[*]}  Container: {.name} - Ready: {.ready} - State: {.state}{"\n"}{end}{"\n"}{end}'

          echo ""
          echo "=============================="
          echo "🔧 CONFIGURATION DEBUGGING"
          echo "=============================="

          echo "📋 ConfigMaps:"
          kubectl get configmaps -l "release=${RELEASE_NAME}"

          echo ""
          echo "📋 Secrets:"
          kubectl get secrets -l "release=${RELEASE_NAME}"

          echo ""
          echo "📋 Backend ConfigMap Contents:"
          kubectl get configmap ${RELEASE_NAME}-backend-config -o yaml 2>/dev/null || echo "❌ Backend configmap not found"

          echo ""
          echo "📋 Frontend ConfigMap Contents:"
          kubectl get configmap ${RELEASE_NAME}-frontend-config -o yaml 2>/dev/null || echo "❌ Frontend configmap not found"

          echo ""
          echo "📋 Backend Pod Environment Variables:"
          kubectl exec $BACKEND_POD -- env | sort | grep -E "(DEPICTIO|MONGO|MINIO)" || echo "❌ Could not get backend env vars"

          echo ""
          echo "📋 Frontend Pod Environment Variables:"
          kubectl exec $FRONTEND_POD -- env | sort | grep -E "(DEPICTIO|MONGO|MINIO)" || echo "❌ Could not get frontend env vars"

          echo ""
          echo "=============================="
          echo "🔧 RESOURCE AND NETWORK INFO"
          echo "=============================="

          echo "📊 Node Resources:"
          kubectl top nodes 2>/dev/null || echo "ℹ️  Metrics server not available"

          echo ""
          echo "📊 Pod Resources:"
          kubectl top pods -l "release=${RELEASE_NAME}" 2>/dev/null || echo "ℹ️  Metrics server not available"

          echo ""
          echo "📋 Persistent Volume Claims:"
          kubectl get pvc -l "release=${RELEASE_NAME}"

          echo ""
          echo "🔧 Service Endpoints Check:"
          kubectl get endpoints ${RELEASE_NAME}-depictio-backend
          kubectl get endpoints ${RELEASE_NAME}-depictio-frontend

          echo ""
          echo "🌐 Services Details:"
          kubectl describe svc ${RELEASE_NAME}-depictio-backend
          echo ""
          kubectl describe svc ${RELEASE_NAME}-depictio-frontend

          echo ""
          echo "=============================="
          echo "🚀 STARTING CONNECTIVITY TESTS"
          echo "=============================="

          # Construct service names (these match your output)
          MONGODB_SERVICE="${RELEASE_NAME}-mongo"  # Note: "mongo" not "mongodb"
          MINIO_SERVICE="${RELEASE_NAME}-minio"
          BACKEND_SERVICE="${RELEASE_NAME}-depictio-backend"
          FRONTEND_SERVICE="${RELEASE_NAME}-depictio-frontend"

          echo "📋 Service names:"
          echo "  MongoDB: $MONGODB_SERVICE"
          echo "  MinIO: $MINIO_SERVICE"
          echo "  Backend: $BACKEND_SERVICE"
          echo "  Frontend: $FRONTEND_SERVICE"

          # Verify services exist
          echo "🔍 Verifying services exist..."
          kubectl get svc $MONGODB_SERVICE $MINIO_SERVICE $BACKEND_SERVICE $FRONTEND_SERVICE

          # Test Backend -> MongoDB connectivity (PORT: 27018) - REMOVED || true
          echo "🧪 Testing Backend -> MongoDB connectivity..."
          if kubectl exec $BACKEND_POD -- sh -c "nc -z $MONGODB_SERVICE 27018"; then
            echo "✅ Backend can reach MongoDB on port 27018"
          else
            echo "❌ Backend cannot reach MongoDB on port 27018"
            exit 1
          fi

          # Test Backend -> MinIO connectivity (PORT: 9000) - REMOVED || true
          echo "🧪 Testing Backend -> MinIO connectivity..."
          if kubectl exec $BACKEND_POD -- sh -c "nc -z $MINIO_SERVICE 9000"; then
            echo "✅ Backend can reach MinIO on port 9000"
          else
            echo "❌ Backend cannot reach MinIO on port 9000"
            exit 1
          fi

          # Test Backend -> Frontend connectivity (PORT: 80) - REMOVED || true
          echo "🧪 Testing Backend -> Frontend connectivity..."
          if kubectl exec $BACKEND_POD -- sh -c "nc -z $FRONTEND_SERVICE 80"; then
            echo "✅ Backend can reach Frontend on port 80"
          else
            echo "❌ Backend cannot reach Frontend on port 80"
            exit 1
          fi

          # Test Frontend -> Backend connectivity (PORT: 80) - REMOVED || true
          echo "🧪 Testing Frontend -> Backend connectivity..."
          if kubectl exec $FRONTEND_POD -- sh -c "nc -z $BACKEND_SERVICE 80"; then
            echo "✅ Frontend can reach Backend on port 80"
          else
            echo "❌ Frontend cannot reach Backend on port 80"
            exit 1
          fi

          # Test Frontend -> MinIO connectivity (PORT: 9000) - REMOVED || true
          echo "🧪 Testing Frontend -> MinIO connectivity..."
          if kubectl exec $FRONTEND_POD -- sh -c "nc -z $MINIO_SERVICE 9000"; then
            echo "✅ Frontend can reach MinIO on port 9000"
          else
            echo "❌ Frontend cannot reach MinIO on port 9000"
            exit 1
          fi


          echo "🎉 All inter-service connectivity tests passed!"

      - name: Test Database and Storage Functionality
        run: |
          echo "🗄️ Testing database and storage functionality..."

          RELEASE_NAME="${{ steps.release-info.outputs.release_name }}"
          BACKEND_POD=$(kubectl get pods -l "release=${RELEASE_NAME},app=depictio-backend" -o jsonpath='{.items[0].metadata.name}')

          echo "Using backend pod: $BACKEND_POD"

          # Get MinIO credentials from secret
          SECRET_NAME="${RELEASE_NAME}-depictio-secrets"
          MINIO_PASSWORD=$(kubectl get secret $SECRET_NAME -o jsonpath='{.data.MINIO_ROOT_PASSWORD}' | base64 -d)

          # Test MongoDB - List collections
          echo "🧪 Testing MongoDB and listing collections..."
          kubectl exec $BACKEND_POD -- python3 -c '
          import pymongo
          try:
              client = pymongo.MongoClient("mongodb://'${RELEASE_NAME}'-mongo:27018/", serverSelectionTimeoutMS=5000)
              client.admin.command("ping")

              # List all databases
              db_names = client.list_database_names()
              print(f"✅ MongoDB connected - Databases: {db_names}")

              # Check if depictioDB exists
              if "depictioDB" in db_names:
                  print("✅ depictioDB found!")

              # Check for specific collections
              db = client["depictioDB"]
              collections = db.list_collection_names()
              print(f"📊 Collections in depictioDB: {collections}")

              # Check if "users" collection exists
              if "users" in collections:
                  print("✅ 'users' collection found!")
              else:
                  print("⚠️  'users' collection not found")



          except Exception as e:
              print(f"❌ MongoDB failed: {e}")
          '

          # Test MinIO - Check for depictio-bucket
          echo "🧪 Testing MinIO and checking for depictio-bucket..."
          kubectl exec $BACKEND_POD -- python3 -c '
          import boto3
          from botocore.exceptions import ClientError
          try:
              s3 = boto3.client(
                  "s3",
                  endpoint_url="http://'${RELEASE_NAME}'-minio:9000",
                  aws_access_key_id="'$RELEASE_NAME'",
                  aws_secret_access_key="'$MINIO_PASSWORD'",
                  region_name="us-east-1"
              )

              # List all buckets
              response = s3.list_buckets()
              buckets = [bucket["Name"] for bucket in response.get("Buckets", [])]
              print(f"✅ MinIO connected - Total buckets: {len(buckets)}")

              if buckets:
                  print(f"📊 Available buckets: {buckets}")
              else:
                  print("📊 No buckets found")

              # Check specifically for depictio-bucket
              if "depictio-bucket" in buckets:
                  print("✅ depictio-bucket found!")

                  # Try to list objects in the bucket
                  try:
                      objects = s3.list_objects_v2(Bucket="depictio-bucket")
                      object_count = objects.get("KeyCount", 0)
                      print(f"📁 depictio-bucket contains {object_count} objects")
                  except Exception as e:
                      print(f"⚠️  Could not list objects in depictio-bucket: {e}")
              else:
                  print("⚠️  depictio-bucket not found")

                  # Try to create it for testing
                  try:
                      s3.create_bucket(Bucket="test-connectivity")
                      print("✅ MinIO write test successful (created test-connectivity bucket)")
                      s3.delete_bucket(Bucket="test-connectivity")
                      print("✅ MinIO delete test successful (removed test-connectivity bucket)")
                  except Exception as e:
                      print(f"❌ MinIO write/delete test failed: {e}")

          except Exception as e:
              print(f"❌ MinIO failed: {e}")
          '

      - name: Test API Endpoints
        run: |
          echo "🚀 Testing confirmed API endpoints..."

          RELEASE_NAME="${{ steps.release-info.outputs.release_name }}"
          BACKEND_SERVICE="${RELEASE_NAME}-depictio-backend"  # Updated service name

          # Port forward to backend
          kubectl port-forward svc/$BACKEND_SERVICE 8082:80 &
          PID_BACKEND=$!
          sleep 5

          # Test the endpoint we KNOW works
          echo "🧪 Testing /depictio/api/v1/utils/status..."
          API_RESPONSE=$(curl -s http://localhost:8082/depictio/api/v1/utils/status 2>/dev/null || echo '{"error":"connection_failed"}')
          API_STATUS=$(echo "$API_RESPONSE" | jq -r '.status // "unknown"' 2>/dev/null || echo "parse_error")
          API_VERSION=$(echo "$API_RESPONSE" | jq -r '.version // "unknown"' 2>/dev/null || echo "parse_error")

          echo "📊 API Response: $API_RESPONSE"

          if [ "$API_STATUS" = "online" ]; then
            echo "✅ API is online with version: $API_VERSION"
          else
            echo "❌ API status check failed. Expected 'online', got: $API_STATUS"
          fi

          # Test FastAPI docs (should exist if it's FastAPI)
          echo "🧪 Testing /docs (FastAPI documentation)..."
          DOCS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8082/docs 2>/dev/null || echo "000")

          if [ "$DOCS_STATUS" = "200" ]; then
            echo "✅ API docs accessible at /docs"
          else
            echo "ℹ️  API docs not available (status: $DOCS_STATUS)"
          fi

          # Test OpenAPI schema (should exist if it's FastAPI)
          echo "🧪 Testing /openapi.json (OpenAPI schema)..."
          OPENAPI_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8082/openapi.json 2>/dev/null || echo "000")

          if [ "$OPENAPI_STATUS" = "200" ]; then
            echo "✅ OpenAPI schema accessible"
          else
            echo "ℹ️  OpenAPI schema not available (status: $OPENAPI_STATUS)"
          fi

          kill $PID_BACKEND || true

      - name: Test Basic Service Connectivity
        run: |
          RELEASE_NAME="${{ steps.release-info.outputs.release_name }}"
          FRONTEND_SERVICE="${RELEASE_NAME}-depictio-frontend"
          BACKEND_SERVICE="${RELEASE_NAME}-depictio-backend"

          echo "🌐 Testing frontend service..."
          kubectl port-forward svc/$FRONTEND_SERVICE 8080:80 &
          PID_FRONTEND=$!
          sleep 5

          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 || echo "000")
          echo "📊 Frontend status: $FRONTEND_STATUS"

          if [ "$FRONTEND_STATUS" = "200" ]; then
            echo "✅ Frontend service responding"
          else
            echo "ℹ️  Frontend status: $FRONTEND_STATUS"
          fi

          kill $PID_FRONTEND

          echo "🌐 Testing backend service..."
          kubectl port-forward svc/$BACKEND_SERVICE 8081:80 &
          PID_BACKEND=$!
          sleep 5

          # Use the confirmed working endpoint
          BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/depictio/api/v1/utils/status || echo "000")
          echo "📊 Backend API status: $BACKEND_STATUS"

          if [ "$BACKEND_STATUS" = "200" ]; then
            echo "✅ Backend API responding correctly"
          else
            echo "❌ Backend API not responding (status: $BACKEND_STATUS)"
          fi

          kill $PID_BACKEND || true

      - name: Test Screenshot Generation
        run: |
          echo "📸 Testing screenshot generation functionality..."

          RELEASE_NAME="${{ steps.release-info.outputs.release_name }}"
          BACKEND_SERVICE="${RELEASE_NAME}-depictio-backend"

          # Clean up any leftover port forwards first
          echo "🧹 Cleaning up existing port forwards..."
          pkill -f "kubectl port-forward" || true
          sleep 3

          # Port forward to backend
          echo "🔗 Setting up port forward to $BACKEND_SERVICE..."
          kubectl port-forward svc/$BACKEND_SERVICE 8083:80 &
          PID_BACKEND=$!

          # Wait longer for port forward to stabilize
          echo "⏳ Waiting for port forward to stabilize..."
          sleep 10

          # Test connectivity first
          echo "🔧 Testing port forward connectivity..."
          if curl -s --max-time 10 http://localhost:8083/depictio/api/v1/utils/status >/dev/null 2>&1; then
            echo "✅ Port forward is working"
          else
            echo "❌ Port forward failed - checking service details..."
            kubectl describe svc/$BACKEND_SERVICE
            kubectl get endpoints $BACKEND_SERVICE
            exit 1
          fi

          # Get backend pod name
          RELEASE_NAME="${{ steps.release-info.outputs.release_name }}"
          BACKEND_POD=$(kubectl get pods -l "release=${RELEASE_NAME},app=depictio-backend" -o jsonpath='{.items[0].metadata.name}')
          echo "Backend pod: $BACKEND_POD"

          # Log backend BEFORE the request
          echo "📋 Backend logs BEFORE screenshot request:"
          kubectl logs $BACKEND_POD --tail=200

          # Test screenshot endpoint
          echo "🧪 Testing screenshot generation endpoint..."
          DASHBOARD_ID="6824cb3b89d2b72169309737"

          echo "📞 Making screenshot request (timeout: 90s)..."

          # Add timeout for screenshot generation (it's slow)
          # http://localhost:8083/depictio/api/v1/dashboards/screenshot/$DASHBOARD_ID)
          set +e  # Don't exit on curl error
          SCREENSHOT_RESPONSE=$(curl -s --max-time 90 -w "\n%{http_code}" \
            http://localhost:8083/depictio/api/v1/utils/screenshot-dash-fixed/$DASHBOARD_ID)
          CURL_EXIT_CODE=$?
          set -e

          # Log backend AFTER the request
          echo "📋 Backend logs AFTER screenshot request:"
          kubectl logs $BACKEND_POD --tail=200

          if [ $CURL_EXIT_CODE -eq 0 ]; then
            # Extract HTTP status code (last line)
            HTTP_CODE=$(echo "$SCREENSHOT_RESPONSE" | tail -n1)
            JSON_RESPONSE=$(echo "$SCREENSHOT_RESPONSE" | head -n -1)

            echo "📊 HTTP Status: $HTTP_CODE"

            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Screenshot endpoint responded successfully"

              # Parse response safely
              SUCCESS=$(echo "$JSON_RESPONSE" | jq -r '.success // false' 2>/dev/null || echo "false")
              MESSAGE=$(echo "$JSON_RESPONSE" | jq -r '.message // "unknown"' 2>/dev/null || echo "unknown")

              echo "📋 Success: $SUCCESS, Message: $MESSAGE"

              if [ "$SUCCESS" = "true" ]; then
                echo "✅ Screenshot generation successful"
              else
                echo "❌ Screenshot generation failed"
                exit 1
              fi

            elif [ "$HTTP_CODE" = "404" ]; then
              echo "⚠️  Dashboard not found (expected for dummy ID)"
              echo "✅ Screenshot endpoint is accessible"
            else
              echo "❌ Screenshot endpoint failed with status: $HTTP_CODE"
              exit 1
            fi
          else
            echo "❌ Curl failed with exit code: $CURL_EXIT_CODE"
            case $CURL_EXIT_CODE in
              7) echo "Failed to connect to server" ;;
              28) echo "Request timed out after 90 seconds" ;;
              52) echo "Server returned empty response" ;;
            esac
            exit 1
          fi

          # Clean up
          kill $PID_BACKEND || true


      - name: Test install from package
        run: |
          RELEASE_NAME="${{ steps.release-info.outputs.release_name }}"

          # Clean up existing installation and all resources
          helm uninstall $RELEASE_NAME || true
          kubectl delete pvc --all || true
          kubectl delete configmap --all || true
          sleep 15

          PACKAGE_RANDOM_SUFFIX=$(openssl rand -hex 4 | cut -c1-9)
          PACKAGE_RELEASE_NAME="p${PACKAGE_RANDOM_SUFFIX}"
          echo "🎲 Package test release name: $PACKAGE_RELEASE_NAME"

          # Install from packaged chart
          helm install $PACKAGE_RELEASE_NAME ./depictio-${{ steps.chart-info.outputs.chart_version }}.tgz \
            -f ./helm-charts/depictio/values-gh-actions.yaml \
            --set backend.image.repository=depictio \
            --set backend.image.tag=${{ steps.chart-info.outputs.app_version }} \
            --set backend.image.pullPolicy=Never \
            --set frontend.image.repository=depictio \
            --set frontend.image.tag=${{ steps.chart-info.outputs.app_version }} \
            --set frontend.image.pullPolicy=Never

          echo "✅ Successfully installed from packaged chart"
          kubectl get pods

          # Store package release name for cleanup
          echo "package_release_name=$PACKAGE_RELEASE_NAME" >> $GITHUB_ENV

      - name: Push chart to GHCR
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
        run: |
          helm push depictio-${{ steps.chart-info.outputs.chart_version }}.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_NAME }}
          echo "Chart pushed to: oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_NAME }}:${{ steps.chart-info.outputs.chart_version }}"

      - name: Cleanup
        if: always()
        run: |
          helm uninstall ${{ steps.release-info.outputs.release_name }} || true
          helm uninstall ${{ env.package_release_name }} || true
          minikube delete || true
