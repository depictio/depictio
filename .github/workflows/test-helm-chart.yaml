name: Test Helm Chart with Minikube

on:
  # push:
  #   branches: [ main ]
  #   paths:
  #     - 'helm-charts/depictio/**'  # Only trigger when chart directory changes
  pull_request:
    branches: [ main ]
    paths:
      - 'helm-charts/depictio/**'  # Only trigger when chart directory changes
  # Allow manual triggering
  workflow_dispatch:

jobs:
  test-helm-chart:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Minikube
        uses: medyagh/setup-minikube@master
        with:
          minikube-version: '1.35.0' 
          kubernetes-version: 'v1.32.0' 
          driver: docker
          start-args: '--memory=4096 --cpus=2'
      
      - name: Set Minikube environment
        run: |
          eval $(minikube docker-env)
          echo "Using Minikube Docker environment for local builds"
      
      - name: Build Docker image
        run: |
          # Set Docker environment to use Minikube's Docker daemon
          eval $(minikube docker-env)
          
          # Build image using the exact command you specified
          docker build -t depictio:v0.0.4-beta1 -f docker-images/Dockerfile_depictio.dockerfile .
          
          # Verify image was built
          docker images | grep depictio
      
      - name: Get Kubernetes cluster info
        run: |
          kubectl cluster-info
          kubectl get nodes
          kubectl version
      
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.3'
      
      - name: Lint Helm chart
        run: |
          helm lint ./helm-charts/depictio
      
      - name: Install Helm chart
        run: |
          # Install chart using your exact helm upgrade command
          helm upgrade --install depictio ./helm-charts/depictio \
            -f ./helm-charts/depictio/values.yaml \
            -f ./helm-charts/depictio/values-gh-actions.yaml \
            --set backend.image.repository=depictio \
            --set backend.image.tag=v0.0.4-beta1 \
            --set backend.image.pullPolicy=Never \
            --set frontend.image.repository=depictio \
            --set frontend.image.tag=v0.0.4-beta1 \
            --set frontend.image.pullPolicy=Never \
            --wait --timeout 5m
      
      - name: Verify Deployment
        run: |
          echo "Checking all resources..."
          kubectl get all
          
          echo "Checking PVCs..."
          kubectl get pvc
          
          echo "Checking ConfigMaps..."
          kubectl get configmaps
          
          echo "Checking Secrets..."
          kubectl get secrets
          
          echo "Checking Pod logs..."
          kubectl logs -l app=depictio-backend --tail=50 || true
          kubectl logs -l app=depictio-frontend --tail=50 || true
      
      - name: Test Service Connectivity
        run: |
          echo "Setting up port forwarding to frontend service..."
          kubectl port-forward svc/depictio-frontend 8080:80 &
          PID_FRONTEND=$!
          sleep 5
          
          echo "Testing frontend service..."
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 || echo "000")
          echo "Frontend status: $FRONTEND_STATUS"
          
          echo "Setting up port forwarding to backend service..."
          kubectl port-forward svc/depictio-backend 8081:80 &
          PID_BACKEND=$!
          sleep 5
          
          echo "Testing backend service..."
          BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081 || echo "000")
          echo "Backend status: $BACKEND_STATUS"
          
          # Kill port-forwarding processes
          kill $PID_FRONTEND $PID_BACKEND || true
      
      - name: Cleanup
        if: always()
        run: |
          helm uninstall depictio || true
          minikube delete || true