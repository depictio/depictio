name: Deploy and Test Depictio

on:
  push:
    branches: "*"
  pull_request:
    branches: [main]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          submodules: recursive  # Clone with submodules

      - name: Clone Example Data Repository
        run: git clone https://github.com/depictio/depictio-data.git

      - name: Create MongoDB Data Directory
        run: mkdir -p depictioDB/ && chown -R $(id -u):$(id -g) depictioDB/ && chmod -R 775 depictioDB/

      - name: Start Docker Compose Services
        run: docker compose up -d

      - name: Wait for Services to Start
        run: sleep 60  # Adjust the wait time if necessary

      # Step 5: Verify All Containers Are Running
      - name: Check if all containers are running
        run: |
          # Check if any containers are not in the 'Up' state
          if ! docker compose ps | grep -q 'Up'; then
            echo "One or more containers are not running. Failing the step."
            docker compose ps
            exit 1
          fi
        shell: bash

        # Clone the depictio-cli repository
      - name: Clone Depictio-CLI Repository
        run: git clone https://github.com/depictio/depictio-cli.git


      # Pwd & list files
      - name: Print Working Directory
        run: pwd
      
      - name: List Files
        run: ls -la


      # List content of depictio
      - name: List Depictio Directory
        run: ls -lal depictio

      - name: Show agent config file
        run: cat depictio/.depictio/default_admin_agent.yaml
      


      # Go to the Depictio-CLI directory
      - name: Change Directory to Depictio-CLI
        run: cd depictio-cli

      - name: Set Up Python Environment
        run: python -m venv depictio-cli-venv

      - name: Activate Virtual Environment and Install Depictio-CLI
        run: |
          source depictio-cli-venv/bin/activate
          pip install -e .
          export PYTHONPATH=$PYTHONPATH:$(pwd)/depictio-cli

      - name: Ingest Data
        run: |
          depictio-cli data setup \
            --agent-config-path ../depictio/.depictio/default_admin_agent.yaml \
            --pipeline-config-path configs/mosaicatcher_pipeline/mosaicatcher_pipeline.yaml \
            --scan-files

      - name: Check Ingestion Success
        run: |
          # Your check logic here
          echo "Data ingestion completed successfully"
