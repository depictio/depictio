name: Deploy and Test Depictio

on:
  push:
    # all branches
    branches:
      - '*'
  pull_request:
    branches: [main]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          submodules: recursive  # Clone with submodules

      - name: Clone Example Data Repository
        run: git clone https://github.com/depictio/depictio-data.git

      - name: Create MongoDB Data Directory
        run: mkdir -p depictioDB/

      - name: Set up Environment Variables
        run: echo "DEPICTIO_BACKEND_DATA_VOLUME_HOST=$(pwd)/depictio-data" >> .env

      - name: Start Docker Compose Services
        run: docker compose up -d

      - name: Wait for Services to Start
        run: sleep 30  # Adjust the wait time if necessary

      - name: Verify Services Are Running
        run: |
          docker compose ps
          docker compose logs depictio_backend

      - name: List and Display default_admin_agent.yaml
        run: |
          echo "Listing contents of .depictio directory:"
          ls -la .depictio
          
          echo "Displaying contents of default_admin_agent.yaml:"
          cat .depictio/default_admin_agent.yaml || echo "File not found!"

  ingest_data:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Repository Again
        uses: actions/checkout@v2  # Ensure the repo is available in this job

      - name: Set Up Python Environment
        run: python -m venv depictio-cli-venv

      - name: Activate Virtual Environment and Install Depictio-CLI
        run: |
          source depictio-cli-venv/bin/activate
          pip install -e .
          export PYTHONPATH=$PYTHONPATH:$(pwd)/depictio-cli

      - name: Ingest Data
        run: |
          source depictio-cli-venv/bin/activate
          # Use the known path to the agent config
          depictio-cli data setup \
            --agent-config-path $(pwd)/.depictio/default_admin_agent.yaml \
            --pipeline-config-path configs/mosaicatcher_pipeline/mosaicatcher_pipeline.yaml \
            --scan-files

      - name: Check Ingestion Success
        run: |
          # Add any specific checks for ingestion success here
          echo "Data ingestion completed successfully"
