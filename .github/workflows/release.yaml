name: Create Release

on:
  push:
    tags:
      - 'v[0-9]*.[0-9]*.[0-9]*'        # Stable releases (v0.0.4) 
      - 'v[0-9]*.[0-9]*.[0-9]*-beta*'  # Beta releases (v0.0.4-beta1)

  workflow_dispatch:
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  changelog:
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      version: ${{ steps.version.outputs.version }}
      is_beta: ${{ steps.version.outputs.is_beta }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for changelog generation
          
      - name: Extract version info
        id: version
        run: |
          # Extract version from tag (remove 'v' prefix)
          TAG=${GITHUB_REF#refs/tags/v}
          echo "version=$TAG" >> $GITHUB_OUTPUT
          
          # Determine if it's a beta
          if [[ $TAG == *"-beta"* ]]; then
            echo "is_beta=true" >> $GITHUB_OUTPUT
          else
            echo "is_beta=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate changelog
        id: changelog
        run: |
          # Find the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # If there's no previous tag, use all commits
            CHANGELOG=$(git log --pretty=format:"* %s" | grep -v "Merge" | sed '/^$/d')
          else
            # Use changes between previous tag and current tag
            CHANGELOG=$(git log --pretty=format:"* %s" $PREVIOUS_TAG..HEAD | grep -v "Merge" | sed '/^$/d')
          fi
          
          # Group changes by type
          FEATURES=$(echo "$CHANGELOG" | grep -i "feat\|feature\|add" || echo "")
          FIXES=$(echo "$CHANGELOG" | grep -i "fix\|bug\|issue" || echo "")
          IMPROVEMENTS=$(echo "$CHANGELOG" | grep -i "improve\|update\|enhance\|refactor" || echo "")
          OTHER=$(echo "$CHANGELOG" | grep -v -i "feat\|feature\|add\|fix\|bug\|issue\|improve\|update\|enhance\|refactor" || echo "")
          
          # Format changelog
          FORMATTED_CHANGELOG="## Changes in ${{ steps.version.outputs.version }}\n\n"
          
          if [ ! -z "$FEATURES" ]; then
            FORMATTED_CHANGELOG+="### New Features\n\n${FEATURES}\n\n"
          fi
          
          if [ ! -z "$FIXES" ]; then
            FORMATTED_CHANGELOG+="### Bug Fixes\n\n${FIXES}\n\n"
          fi
          
          if [ ! -z "$IMPROVEMENTS" ]; then
            FORMATTED_CHANGELOG+="### Improvements\n\n${IMPROVEMENTS}\n\n"
          fi
          
          if [ ! -z "$OTHER" ]; then
            FORMATTED_CHANGELOG+="### Other Changes\n\n${OTHER}\n\n"
          fi
          
          # Check for breaking changes
          BREAKING=$(git log --pretty=format:"%b" $PREVIOUS_TAG..HEAD | grep -i "BREAKING CHANGE:" || echo "")
          if [ ! -z "$BREAKING" ]; then
            FORMATTED_CHANGELOG+="### BREAKING CHANGES\n\n${BREAKING}\n\n"
          fi
          
          # Escape newlines for GitHub Actions
          FORMATTED_CHANGELOG="${FORMATTED_CHANGELOG//'%'/'%25'}"
          FORMATTED_CHANGELOG="${FORMATTED_CHANGELOG//$'\n'/'%0A'}"
          FORMATTED_CHANGELOG="${FORMATTED_CHANGELOG//$'\r'/'%0D'}"
          
          echo "changelog=$FORMATTED_CHANGELOG" >> $GITHUB_OUTPUT
          
          # Save unescaped changelog for CHANGELOG.md
          mkdir -p /tmp
          echo -e "$FORMATTED_CHANGELOG" > /tmp/changelog.md

  create-release:
    runs-on: ubuntu-latest
    needs: [changelog]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download changelog file
        run: |
          mkdir -p /tmp
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ needs.changelog.outputs.version }}
          body: |
            ${{ needs.changelog.outputs.changelog }}
            
            ## Docker Images
            ```
            ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.changelog.outputs.version }}
            ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.changelog.outputs.is_beta == 'true' && 'beta' || 'latest' }}
            ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.changelog.outputs.is_beta == 'true' && 'dev' || 'stable' }}
            ${{ env.REGISTRY }}/${{ github.repository }}:edge
            ```
            
            ## Documentation
            Full documentation: https://yourdocs.example.com/
          draft: false
          prerelease: ${{ needs.changelog.outputs.is_beta == 'true' }}
          
      - name: Update CHANGELOG.md
        if: ${{ needs.changelog.outputs.is_beta != 'true' }}
        run: |
          # Only update for stable releases
          # Get the generated changelog from outputs
          echo -e "${{ needs.changelog.outputs.changelog }}" | sed 's/%0A/\n/g; s/%25/%/g; s/%0D/\r/g' > /tmp/changelog_clean.md
          
          # Read existing changelog
          if [ -f CHANGELOG.md ]; then
            EXISTING_CHANGELOG=$(cat CHANGELOG.md)
          else
            EXISTING_CHANGELOG="# Changelog\n\n"
          fi
          
          # Get the generated changelog
          NEW_CHANGELOG=$(cat /tmp/changelog_clean.md)
          
          # Create new changelog with the latest changes at the top
          echo -e "# Changelog\n\n${NEW_CHANGELOG}\n\n${EXISTING_CHANGELOG#*#*\n\n}" > CHANGELOG.md
          
          # Commit and push the updated changelog
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG.md for v${{ needs.changelog.outputs.version }}"
          git push origin HEAD:main