{
  "diamond": {
    "module_name": "diamond",
    "general_stats_calls": [
      {
        "line_number": 84,
        "call_source": "        self.general_stats_addcols(self.diamond_data, headers)",
        "headers": {
          "queries_aligned": {
            "title": "Queries aligned",
            "description": "number of queries aligned",
            "scale": "YlGn",
            "format": "{:,.0f}"
          }
        },
        "namespace": null,
        "data_structure": "self.diamond_data",
        "filename": "diamond.py",
        "file_path": "multiqc/modules/diamond/diamond.py"
      }
    ]
  },
  "librarian": {
    "module_name": "librarian",
    "general_stats_calls": [
      {
        "line_number": 184,
        "call_source": "        self.general_stats_addcols(data, headers)",
        "headers": {
          "most_likely_library_type": {
            "title": "Likely Type",
            "description": "Most likely library type.",
            "bgcols": "bgcols"
          },
          "most_likely_library_type_score": {
            "title": "Type score",
            "description": "Library prediction type score",
            "format": "{:,.0f}",
            "scale": "RdYlGn",
            "min": 0,
            "max": 100
          }
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "librarian.py",
        "file_path": "multiqc/modules/librarian/librarian.py"
      }
    ]
  },
  "rseqc": {
    "module_name": "rseqc",
    "general_stats_calls": [
      {
        "line_number": 64,
        "call_source": "        module.general_stats_addcols(tin_data, headers, namespace=\"TIN\")",
        "headers": {
          "TIN(stdev)": {
            "title": "TIN stdev",
            "description": "Standard Deviation for the Transcript Integriry Number (TIN)",
            "max": 100,
            "min": 0,
            "scale": "Reds",
            "hidden": true
          },
          "TIN(median)": {
            "title": "TIN",
            "description": "Median Transcript Integriry Number (TIN), indicating the RNA integrity of a sample",
            "max": 100,
            "min": 0,
            "scale": "RdBu"
          }
        },
        "namespace": "TIN",
        "data_structure": "tin_data",
        "filename": "tin.py",
        "file_path": "multiqc/modules/rseqc/tin.py"
      },
      {
        "line_number": 91,
        "call_source": "        module.general_stats_addcols(bam_stat_data, headers, namespace=\"Bam Stat\")",
        "headers": {
          "proper_pairs_percent": {
            "title": "Proper Pairs",
            "description": "% Reads mapped in proper pairs",
            "suffix": "%",
            "scale": "RdYlGn"
          }
        },
        "namespace": "Bam Stat",
        "data_structure": "bam_stat_data",
        "filename": "bam_stat.py",
        "file_path": "multiqc/modules/rseqc/bam_stat.py"
      }
    ]
  },
  "lima": {
    "module_name": "lima",
    "general_stats_calls": [
      {
        "line_number": 247,
        "call_source": "        self.general_stats_addcols(counts, headers)",
        "headers": {
          "Counts": {
            "title": "f'Read Count ({config.long_read_count_prefix})'",
            "description": "f'Number of reads for each sample or barcode pair ({config.long_read_count_desc})'",
            "modify": "lambda x: x * config.long_read_count_multiplier",
            "shared_key": "long_read_counts",
            "format": "{:,.2f}",
            "scale": "PuBuGn"
          },
          "MeanScore": {
            "title": "Quality Score",
            "description": "The mean quality score of the reads for each sample or barcode pair",
            "scale": "Spectral"
          }
        },
        "namespace": null,
        "data_structure": "counts",
        "filename": "lima.py",
        "file_path": "multiqc/modules/lima/lima.py"
      }
    ]
  },
  "verifybamid": {
    "module_name": "verifybamid",
    "general_stats_calls": [
      {
        "line_number": 198,
        "call_source": "        self.general_stats_addcols(self.verifybamid_data, headers)",
        "headers": {
          "_function_based": "dict"
        },
        "namespace": null,
        "data_structure": "self.verifybamid_data",
        "filename": "verifybamid.py",
        "file_path": "multiqc/modules/verifybamid/verifybamid.py"
      }
    ]
  },
  "snippy": {
    "module_name": "snippy",
    "general_stats_calls": [
      {
        "line_number": 129,
        "call_source": "        self.general_stats_addcols(\n            data_by_sample,\n            {\n                \"VariantTotal\": {\n                    \"title\": \"# Variants\",\n                    \"description\": \"Total variants detected.\",\n                    \"scale\": \"BuPu\",\n                    \"format\": \"{:.0f}\",\n                    \"shared_key\": \"variant_count\",\n                }\n            },\n        )",
        "headers": {
          "VariantTotal": {
            "title": "# Variants",
            "description": "Total variants detected.",
            "scale": "BuPu",
            "format": "{:.0f}",
            "shared_key": "variant_count"
          }
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "snippy.py",
        "file_path": "multiqc/modules/snippy/snippy.py"
      },
      {
        "line_number": 157,
        "call_source": "        self.general_stats_addcols(data, self.snippy_core_headers_config())",
        "headers": {
          "_method_call": "self.snippy_core_headers_config"
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "snippy.py",
        "file_path": "multiqc/modules/snippy/snippy.py"
      }
    ]
  },
  "picard": {
    "module_name": "picard",
    "general_stats_calls": [
      {
        "line_number": 102,
        "call_source": "    module.general_stats_addcols(general_stats_data, headers, namespace=\"OxoGMetrics\")",
        "headers": {
          "CCG_OXIDATION_ERROR_RATE": {
            "title": "CCG Oxidation",
            "description": "CCG-CAG Oxidation Error Rate",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "format": "{:,.0f}",
            "scale": "RdYlGn-rev",
            "modify": "lambda x: util.multiply_hundred(x)"
          }
        },
        "namespace": "OxoGMetrics",
        "data_structure": "general_stats_data",
        "filename": "OxoGMetrics.py",
        "file_path": "multiqc/modules/picard/OxoGMetrics.py"
      },
      {
        "line_number": 156,
        "call_source": "    module.general_stats_addcols(samplestats_by_sample, headers, namespace=\"InsertSizeMetrics\")",
        "headers": {
          "summed_median": {
            "title": "Insert Size",
            "description": "Median Insert Size, all read orientations (bp)",
            "min": 0,
            "suffix": " bp",
            "format": "{:,.0f}",
            "scale": "GnBu"
          },
          "summed_mean": {
            "title": "Mean Insert Size",
            "description": "Mean Insert Size, all read orientations (bp)",
            "min": 0,
            "suffix": " bp",
            "format": "{:,.0f}",
            "scale": "GnBu",
            "hidden": "False if missing_medians else True"
          }
        },
        "namespace": "InsertSizeMetrics",
        "data_structure": "samplestats_by_sample",
        "filename": "InsertSizeMetrics.py",
        "file_path": "multiqc/modules/picard/InsertSizeMetrics.py"
      },
      {
        "line_number": 80,
        "call_source": "    module.general_stats_addcols(data_by_sample, headers, namespace=\"VariantCallingMetrics\")",
        "headers": {
          "DBSNP_TITV": {
            "title": "TiTV ratio (known)",
            "description": "The Transition/Transversion ratio of the passing bi-allelic SNP calls made at SNP-database sites.",
            "min": 0,
            "scale": "Blues",
            "shared_key": "titv_ratio"
          },
          "NOVEL_TITV": {
            "title": "TiTV ratio (novel)",
            "description": "The Transition/Transversion ratio of the passing bi-allelic SNP calls made at non-SNP-database sites.",
            "min": 0,
            "scale": "Blues",
            "shared_key": "titv_ratio"
          },
          "DBSNP_INS_DEL_RATIO": {
            "title": "InDel ratio (known)",
            "description": "The Insertion / Deletion ratio of the passing bi-allelic SNP calls made at SNP-database sites.",
            "min": 0,
            "scale": "Greens",
            "shared_key": "indel_ratio",
            "hidden": true
          },
          "NOVEL_INS_DEL_RATIO": {
            "title": "InDel ratio (novel)",
            "description": "The Insertion / Deletion ratio of the passing bi-allelic SNP calls made at non-SNP-database sites.",
            "min": 0,
            "scale": "Greens",
            "shared_key": "indel_ratio",
            "hidden": true
          },
          "total_called_variants_known": {
            "title": "Called Variants (known)",
            "description": "Total counts of variants in SNP-database sites.",
            "shared_key": "variant_count",
            "min": 0,
            "format": "{0:,.0f}",
            "hidden": true
          },
          "total_called_variants_novel": {
            "title": "Called Variants (novel)",
            "description": "Total counts of variants in non-SNP-database sites.",
            "shared_key": "variant_count",
            "min": 0,
            "format": "{0:,.0f}",
            "hidden": true
          }
        },
        "namespace": "VariantCallingMetrics",
        "data_structure": "data_by_sample",
        "filename": "VariantCallingMetrics.py",
        "file_path": "multiqc/modules/picard/VariantCallingMetrics.py"
      },
      {
        "line_number": 140,
        "call_source": "    module.general_stats_addcols(data_by_sample, headers, namespace=\"WgsMetrics\")",
        "headers": {
          "_function_based": "dict",
          "MEDIAN_COVERAGE": {
            "title": "Median Coverage",
            "description": "The median coverage in bases of the genome territory, after all filters are applied.",
            "min": 0,
            "suffix": "X",
            "scale": "GnBu"
          },
          "MEAN_COVERAGE": {
            "title": "Mean Coverage",
            "description": "The mean coverage in bases of the genome territory, after all filters are applied.",
            "min": 0,
            "suffix": "X",
            "scale": "GnBu",
            "hidden": true
          },
          "SD_COVERAGE": {
            "title": "SD Coverage",
            "description": "The standard deviation coverage in bases of the genome territory, after all filters are applied.",
            "min": 0,
            "suffix": "X",
            "scale": "GnBu",
            "hidden": true
          },
          "_dynamic_loop": "for_loop_construction"
        },
        "namespace": "WgsMetrics",
        "data_structure": "data_by_sample",
        "filename": "WgsMetrics.py",
        "file_path": "multiqc/modules/picard/WgsMetrics.py"
      },
      {
        "line_number": 265,
        "call_source": "    module.general_stats_addcols(data, headers, namespace=\"HsMetrics\")",
        "headers": {
          "_dynamic_loop": "for_loop_construction",
          "FOLD_ENRICHMENT": {
            "title": "Fold Enrichment",
            "min": 0,
            "format": "{:,.0f}",
            "scale": "Blues",
            "suffix": " X"
          },
          "MEDIAN_TARGET_COVERAGE": {
            "title": "Median Target Coverage",
            "description": "The median coverage of reads that mapped to target regions of an experiment.",
            "min": 0,
            "suffix": "X",
            "scale": "GnBu"
          }
        },
        "namespace": "HsMetrics",
        "data_structure": "data",
        "filename": "HsMetrics.py",
        "file_path": "multiqc/modules/picard/HsMetrics.py"
      },
      {
        "line_number": 101,
        "call_source": "        module.general_stats_addcols(data, _get_general_stats_headers(), namespace=\"ValidateSamFile\")",
        "headers": {
          "file_validation_status": {
            "title": "Validation",
            "description": "ValidateSamFile (File Validation)"
          },
          "WARNING_count": {
            "title": "# Warnings",
            "description": "ValidateSamFile (number of warnings)",
            "scale": "Oranges",
            "shared_key": "ValidateSamEntries",
            "color": "255,237,160",
            "format": "{:.0f}",
            "hidden": true
          },
          "ERROR_count": {
            "title": "# Errors",
            "description": "ValidateSamFile (number of errors)",
            "scale": "Reds",
            "shared_key": "ValidateSamEntries",
            "color": "252,146,114",
            "format": "{:.0f}",
            "hidden": true
          }
        },
        "namespace": "ValidateSamFile",
        "data_structure": "data",
        "filename": "ValidateSamFile.py",
        "file_path": "multiqc/modules/picard/ValidateSamFile.py"
      },
      {
        "line_number": 171,
        "call_source": "    module.general_stats_addcols(\n        status_by_sample,\n        sample_table_headers,\n        namespace=\"CrosscheckFingerprints\",\n    )",
        "headers": {
          "Crosschecks": {
            "title": "Crosschecks",
            "description": "Flags if there are any unexpected or inconclusive matches.",
            "cond_formatting_rules": {
              "pass": [
                {
                  "s_eq": "All expected"
                }
              ],
              "warn": [
                {
                  "s_eq": "Some inconclusive"
                }
              ],
              "fail": [
                {
                  "s_eq": "Unexpected"
                },
                {
                  "s_eq": "Some unexpected"
                }
              ]
            }
          },
          "Best match": {
            "title": "Best match",
            "description": "The sample name with the highest LOD for this sample."
          },
          "Best match LOD": {
            "title": "Best match LOD",
            "description": "The LOD score for the best matching sample."
          }
        },
        "namespace": "CrosscheckFingerprints",
        "data_structure": "status_by_sample",
        "filename": "CrosscheckFingerprints.py",
        "file_path": "multiqc/modules/picard/CrosscheckFingerprints.py"
      },
      {
        "line_number": 113,
        "call_source": "    module.general_stats_addcols(data_by_sample, headers, namespace=\"TargetedPcrMetrics\")",
        "headers": {
          "PCT_AMPLIFIED_BASES": {
            "title": "Amplified Bases",
            "description": "The fraction of aligned bases that mapped to or near an amplicon.",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "BrBG"
          },
          "MEDIAN_TARGET_COVERAGE": {
            "title": "Median Target Coverage",
            "description": "The median coverage of reads that mapped to target regions of an experiment.",
            "min": 0,
            "suffix": "X",
            "scale": "GnBu"
          }
        },
        "namespace": "TargetedPcrMetrics",
        "data_structure": "data_by_sample",
        "filename": "TargetedPcrMetrics.py",
        "file_path": "multiqc/modules/picard/TargetedPcrMetrics.py"
      },
      {
        "line_number": 94,
        "call_source": "    module.general_stats_addcols(data_by_sample, headers, namespace=\"QualityYieldMetrics\")",
        "headers": {
          "TOTAL_READS": {
            "title": "f'{config.read_count_prefix} Reads'",
            "description": "f'The total number of reads in the input file ({config.read_count_desc})'",
            "modify": "lambda x: x * config.read_count_multiplier",
            "scale": "Blues",
            "shared_key": "read_count"
          }
        },
        "namespace": "QualityYieldMetrics",
        "data_structure": "data_by_sample",
        "filename": "QualityYieldMetrics.py",
        "file_path": "multiqc/modules/picard/QualityYieldMetrics.py"
      },
      {
        "line_number": 97,
        "call_source": "    module.general_stats_addcols(data_by_sample, headers, namespace=\"RrbsSummaryMetrics\")",
        "headers": {
          "PCT_CPG_BASES_CONVERTED": {
            "title": "CpG Methylated",
            "description": "Percentage of times a CpG cytosine was converted",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "format": "{:,.0f}",
            "scale": "RdYlGn-rev",
            "modify": "lambda x: 100 - util.multiply_hundred(x)"
          },
          "PCT_NON_CPG_BASES_CONVERTED": {
            "title": "Non-CpG Methylated",
            "description": "Percentage of times a non-CpG cytosine was converted",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "format": "{:,.0f}",
            "scale": "RdYlGn",
            "modify": "lambda x: 100 - util.multiply_hundred(x)"
          },
          "MEDIAN_CPG_COVERAGE": {
            "title": "Median CpG Cov",
            "description": "Median coverage of CpG sites",
            "min": 0
          }
        },
        "namespace": "RrbsSummaryMetrics",
        "data_structure": "data_by_sample",
        "filename": "RrbsSummaryMetrics.py",
        "file_path": "multiqc/modules/picard/RrbsSummaryMetrics.py"
      },
      {
        "line_number": 120,
        "call_source": "    module.general_stats_addcols(data_by_sample, headers, namespace=\"RnaSeqMetrics\")",
        "headers": {
          "PCT_RIBOSOMAL_BASES": {
            "title": "rRNA",
            "description": "Percent of aligned bases overlapping ribosomal RNA regions",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "Reds"
          },
          "PCT_MRNA_BASES": {
            "title": "mRNA",
            "description": "Percent of aligned bases overlapping UTRs and coding regions of mRNA transcripts",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "Greens"
          }
        },
        "namespace": "RnaSeqMetrics",
        "data_structure": "data_by_sample",
        "filename": "RnaSeqMetrics.py",
        "file_path": "multiqc/modules/picard/RnaSeqMetrics.py"
      },
      {
        "line_number": 166,
        "call_source": "    module.general_stats_addcols(data_by_sample, headers, namespace=\"Mark Duplicates\")",
        "headers": {
          "PERCENT_DUPLICATION": {
            "title": "Duplication",
            "description": "Mark Duplicates - Percent Duplication",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "OrRd",
            "modify": "lambda x: util.multiply_hundred(x)"
          }
        },
        "namespace": "Mark Duplicates",
        "data_structure": "data_by_sample",
        "filename": "MarkDuplicates.py",
        "file_path": "multiqc/modules/picard/MarkDuplicates.py"
      }
    ]
  },
  "qualimap": {
    "module_name": "qualimap",
    "general_stats_calls": [
      {
        "line_number": 67,
        "call_source": "    module.general_stats_addcols(\n        all_general_stats,\n        general_stats_headers(threshs, hidden_threshs),\n        namespace=\"BamQC\",\n    )",
        "headers": {
          "_function_based": "dict"
        },
        "namespace": "BamQC",
        "data_structure": "all_general_stats",
        "filename": "QM_BamQC.py",
        "file_path": "multiqc/modules/qualimap/QM_BamQC.py"
      },
      {
        "line_number": 73,
        "call_source": "    module.general_stats_addcols(\n        genome_results,\n        headers={\n            \"5_3_bias\": {\n                \"title\": \"5'-3' bias\",\n                \"format\": \"{:,.2f}\",\n            },\n            \"reads_aligned\": {\n                \"title\": f\"{config.read_count_prefix} Aligned\",\n                \"description\": f\"Reads Aligned ({config.read_count_desc})\",\n                \"min\": 0,\n                \"scale\": \"RdBu\",\n                \"shared_key\": \"read_count\",\n                \"modify\": lambda x: x * config.read_count_multiplier,\n            },\n            \"reads_aligned_exonic\": {\n                \"title\": \"Exonic\",\n                \"description\": \"Reads aligned to exonic regions\",\n                \"min\": 0,\n                \"scale\": \"PuBu\",\n                \"shared_key\": \"read_count\",\n                \"modify\": lambda x: x * config.read_count_multiplier,\n                \"hidden\": True,\n            },\n            \"reads_aligned_intronic\": {\n                \"title\": \"Intronic\",\n                \"description\": \"Reads aligned to intronic regions\",\n                \"min\": 0,\n                \"scale\": \"PuBu\",\n                \"shared_key\": \"read_count\",\n                \"modify\": lambda x: x * config.read_count_multiplier,\n                \"hidden\": True,\n            },\n            \"reads_aligned_intergenic\": {\n                \"title\": \"Intergenic\",\n                \"description\": \"Reads aligned to intergenic regions\",\n                \"min\": 0,\n                \"scale\": \"PuBu\",\n                \"shared_key\": \"read_count\",\n                \"modify\": lambda x: x * config.read_count_multiplier,\n                \"hidden\": True,\n            },\n            \"reads_aligned_overlapping_exon\": {\n                \"title\": \"Overlapping Exon\",\n                \"description\": \"Reads aligned to overlapping exon regions\",\n                \"min\": 0,\n                \"scale\": \"PuBu\",\n                \"shared_key\": \"read_count\",\n                \"modify\": lambda x: x * config.read_count_multiplier,\n                \"hidden\": True,\n            },\n        },\n        namespace=\"RNASeq\",\n    )",
        "headers": {
          "5_3_bias": {
            "title": "5'-3' bias",
            "format": "{:,.2f}"
          },
          "reads_aligned": {
            "title": "f'{config.read_count_prefix} Aligned'",
            "description": "f'Reads Aligned ({config.read_count_desc})'",
            "min": 0,
            "scale": "RdBu",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier"
          },
          "reads_aligned_exonic": {
            "title": "Exonic",
            "description": "Reads aligned to exonic regions",
            "min": 0,
            "scale": "PuBu",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "hidden": true
          },
          "reads_aligned_intronic": {
            "title": "Intronic",
            "description": "Reads aligned to intronic regions",
            "min": 0,
            "scale": "PuBu",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "hidden": true
          },
          "reads_aligned_intergenic": {
            "title": "Intergenic",
            "description": "Reads aligned to intergenic regions",
            "min": 0,
            "scale": "PuBu",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "hidden": true
          },
          "reads_aligned_overlapping_exon": {
            "title": "Overlapping Exon",
            "description": "Reads aligned to overlapping exon regions",
            "min": 0,
            "scale": "PuBu",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "hidden": true
          }
        },
        "namespace": "RNASeq",
        "data_structure": "genome_results",
        "filename": "QM_RNASeq.py",
        "file_path": "multiqc/modules/qualimap/QM_RNASeq.py"
      }
    ]
  },
  "biscuit": {
    "module_name": "biscuit",
    "general_stats_calls": [
      {
        "line_number": 187,
        "call_source": "        self.general_stats_addcols(pd, pheader)",
        "headers": {
          "dup_q40": {
            "title": "Dup. % for Q40 Reads",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "YlOrBr",
            "hidden": true
          },
          "dup_all": {
            "title": "Dup. % for All Reads",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "Reds"
          },
          "aligned": {
            "title": "% Aligned",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "RdYlGn",
            "format": "{:,.2f}"
          }
        },
        "namespace": null,
        "data_structure": "pd",
        "filename": "biscuit.py",
        "file_path": "multiqc/modules/biscuit/biscuit.py"
      }
    ]
  },
  "conpair": {
    "module_name": "conpair",
    "general_stats_calls": [
      {
        "line_number": 118,
        "call_source": "        self.general_stats_addcols(self.conpair_data, headers)",
        "headers": {
          "concordance_concordance": {
            "title": "Concordance",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "format": "{:,.2f}",
            "scale": "RdYlGn"
          },
          "contamination_normal": {
            "title": "N Contamination",
            "description": "Normal sample contamination level",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "format": "{:,.3f}",
            "scale": "RdYlBu-rev"
          },
          "contamination_tumor": {
            "title": "T Contamination",
            "description": "Tumor sample contamination level",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "format": "{:,.3f}",
            "scale": "RdYlBu-rev"
          }
        },
        "namespace": null,
        "data_structure": "self.conpair_data",
        "filename": "conpair.py",
        "file_path": "multiqc/modules/conpair/conpair.py"
      }
    ]
  },
  "rockhopper": {
    "module_name": "rockhopper",
    "general_stats_calls": [
      {
        "line_number": 169,
        "call_source": "        self.general_stats_addcols(self.rh_data, headers)",
        "headers": {
          "mRNA-sense": {
            "title": "f'CDS Reads ({config.read_count_prefix})'",
            "description": "f'Reads aligned to coding regions ({config.read_count_desc})'",
            "min": 0,
            "scale": "Blues",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count"
          },
          "mRNA-antisense": {
            "title": "f'CDS Reads (a/s, {config.read_count_prefix})'",
            "description": "f'Antisense reads aligned to coding regions ({config.read_count_desc})'",
            "min": 0,
            "scale": "Blues",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "hidden": true
          },
          "rRNA-sense": {
            "title": "f'rRNA Reads ({config.read_count_prefix})'",
            "description": "f'Reads aligned to rRNA ({config.read_count_desc})'",
            "min": 0,
            "scale": "Blues",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count"
          },
          "rRNA-antisense": {
            "title": "f'rRNA Reads (a/s, {config.read_count_prefix})'",
            "description": "f'Antisense reads aligned to rRNA ({config.read_count_desc})'",
            "min": 0,
            "scale": "Blues",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "self.rh_data",
        "filename": "rockhopper.py",
        "file_path": "multiqc/modules/rockhopper/rockhopper.py"
      }
    ]
  },
  "rsem": {
    "module_name": "rsem",
    "general_stats_calls": [
      {
        "line_number": 134,
        "call_source": "        self.general_stats_addcols(self.rsem_mapped_data, headers)",
        "headers": {
          "alignable_percent": {
            "title": "Alignable",
            "description": "% Alignable reads",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn"
          }
        },
        "namespace": null,
        "data_structure": "self.rsem_mapped_data",
        "filename": "rsem.py",
        "file_path": "multiqc/modules/rsem/rsem.py"
      }
    ]
  },
  "vg": {
    "module_name": "vg",
    "general_stats_calls": [
      {
        "line_number": 95,
        "call_source": "        self.general_stats_addcols(\n            data_by_sample,\n            {\n                \"Percent Aligned\": {\n                    \"title\": \"Aligned\",\n                    \"description\": \"Percentage of total reads aligned by vg giraffe to pangenomic reference\",\n                    \"max\": 100,\n                    \"min\": 0,\n                    \"scale\": \"RdYlGn\",\n                    \"suffix\": \"%\",\n                },\n                \"Percent Properly Paired\": {\n                    \"title\": \"Properly paired\",\n                    \"description\": \"Percentage of graph-aligned reads in a GAM file that are properly paired\",\n                    \"max\": 100,\n                    \"min\": 0,\n                    \"scale\": \"Blues\",\n                    \"suffix\": \"%\",\n                },\n                \"Mapping quality\": {\n                    \"title\": \"MQ\",\n                    \"description\": \"Average mapping quality of graph-aligned reads in a GAM file\",\n                    \"max\": 60,\n                    \"min\": 0,\n                    \"scale\": \"BuGn\",\n                },\n            },\n        )",
        "headers": {
          "Percent Aligned": {
            "title": "Aligned",
            "description": "Percentage of total reads aligned by vg giraffe to pangenomic reference",
            "max": 100,
            "min": 0,
            "scale": "RdYlGn",
            "suffix": "%"
          },
          "Percent Properly Paired": {
            "title": "Properly paired",
            "description": "Percentage of graph-aligned reads in a GAM file that are properly paired",
            "max": 100,
            "min": 0,
            "scale": "Blues",
            "suffix": "%"
          },
          "Mapping quality": {
            "title": "MQ",
            "description": "Average mapping quality of graph-aligned reads in a GAM file",
            "max": 60,
            "min": 0,
            "scale": "BuGn"
          }
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "vg.py",
        "file_path": "multiqc/modules/vg/vg.py"
      }
    ]
  },
  "pairtools": {
    "module_name": "pairtools",
    "general_stats_calls": [
      {
        "line_number": 344,
        "call_source": "        self.general_stats_addcols(self.pairtools_stats, headers)",
        "headers": {
          "total": {
            "title": "Read pairs",
            "description": "Total read pairs before mapping",
            "scale": "Greys",
            "shared_key": "read_count"
          },
          "frac_unmapped": {
            "title": "Unmapped",
            "description": "% of pairs (w.r.t. total) with both sides unmapped",
            "suffix": "%",
            "scale": "PuRd"
          },
          "frac_single_sided_mapped": {
            "title": "One-sided",
            "description": "% of pairs (w.r.t. total) with one side mapped",
            "suffix": "%",
            "scale": "Purples"
          },
          "frac_mapped": {
            "title": "Two-sided",
            "description": "% of pairs (w.r.t. total) with both sides mapped",
            "suffix": "%",
            "scale": "RdYlGn"
          },
          "frac_dups": {
            "title": "Duplicated",
            "description": "% of duplicated pairs (w.r.t. mapped)",
            "suffix": "%",
            "scale": "YlOrRd"
          },
          "total_nodups": {
            "title": "Unique pairs",
            "description": "Mapped pairs after deduplication",
            "scale": "Greys",
            "shared_key": "read_count"
          },
          "frac_cis": {
            "title": "Cis",
            "description": "% of cis-pairs (w.r.t mapped)",
            "suffix": "%",
            "scale": "PuOr-rev"
          }
        },
        "namespace": null,
        "data_structure": "self.pairtools_stats",
        "filename": "pairtools.py",
        "file_path": "multiqc/modules/pairtools/pairtools.py"
      }
    ]
  },
  "nextclade": {
    "module_name": "nextclade",
    "general_stats_calls": [
      {
        "line_number": 92,
        "call_source": "        self.general_stats_addcols(self.nextclade_data, headers)",
        "headers": {
          "clade": {
            "title": "Clade",
            "description": "Clade",
            "scale": false
          }
        },
        "namespace": null,
        "data_structure": "self.nextclade_data",
        "filename": "nextclade.py",
        "file_path": "multiqc/modules/nextclade/nextclade.py"
      }
    ]
  },
  "bbduk": {
    "module_name": "bbduk",
    "general_stats_calls": [
      {
        "line_number": 153,
        "call_source": "        self.general_stats_addcols(self.bbduk_data, headers)",
        "headers": {
          "Total Removed bases percent": {
            "title": "Bases Removed (%)",
            "description": "Percentage of bases removed after filtering",
            "scale": "YlOrBr",
            "max": 100
          },
          "Total Removed bases": {
            "title": "f'Bases Removed ({config.base_count_prefix})'",
            "description": "f'Total Bases removed ({config.base_count_desc})'",
            "scale": "Reds",
            "shared_key": "base_count",
            "modify": "lambda x: x * config.base_count_multiplier",
            "hidden": true
          },
          "Total Removed reads percent": {
            "title": "Reads Removed (%)",
            "description": "Percentage of reads removed after filtering",
            "scale": "OrRd",
            "max": 100
          },
          "Total Removed reads": {
            "title": "f'Reads Removed ({config.read_count_prefix})'",
            "description": "f'Total Reads removed ({config.read_count_desc})'",
            "scale": "Reds",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "hidden": true
          },
          "Input reads": {
            "title": "f'Total Input Reads ({config.read_count_prefix})'",
            "description": "f'Total number of input reads to BBDuk ({config.read_count_desc})'",
            "scale": "Greens",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "self.bbduk_data",
        "filename": "bbduk.py",
        "file_path": "multiqc/modules/bbduk/bbduk.py"
      }
    ]
  },
  "gtdbtk": {
    "module_name": "gtdbtk",
    "general_stats_calls": [
      {
        "line_number": 68,
        "call_source": "        self.general_stats_addcols(data_by_sample, headers)",
        "headers": {
          "classification": {
            "title": "Classification",
            "description": "GTDB taxonomy string inferred by the GTDB-Tk."
          },
          "ANI": {
            "title": "ANI to closest genome",
            "description": "Depending on the classification method, either the 'closest_genome_ani' or 'closest_placement_ani'.",
            "min": 0,
            "max": 100,
            "hidden": true
          },
          "AF": {
            "title": "AF to closest genome",
            "description": "Depending on the classification method, either the 'closest_genome_af' or 'closest_placement_af'.",
            "min": 0,
            "max": 1,
            "scale": "Purples",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "gtdbtk.py",
        "file_path": "multiqc/modules/gtdbtk/gtdbtk.py"
      }
    ]
  },
  "prokka": {
    "module_name": "prokka",
    "general_stats_calls": [
      {
        "line_number": 83,
        "call_source": "        self.general_stats_addcols(self.prokka, headers)",
        "headers": {
          "organism": {
            "title": "Organism",
            "description": "Organism"
          },
          "contigs": {
            "title": "Contigs",
            "description": "Number of contigs",
            "min": 0
          },
          "bases": {
            "title": "Bases",
            "description": "Number of bases",
            "min": 0,
            "hidden": true
          },
          "CDS": {
            "title": "CDS",
            "description": "Number of CDS",
            "min": 0
          }
        },
        "namespace": null,
        "data_structure": "self.prokka",
        "filename": "prokka.py",
        "file_path": "multiqc/modules/prokka/prokka.py"
      }
    ]
  },
  "pycoqc": {
    "module_name": "pycoqc",
    "general_stats_calls": [
      {
        "line_number": 185,
        "call_source": "        self.general_stats_addcols(self.table_data, general_stats_headers)",
        "headers": {
          "passed_median_read_length": {
            "title": "Read Length - Pass (bp)",
            "description": "Median Read Length - passing reads (base pairs)",
            "scale": "BuPu",
            "shared_key": "median_read_len",
            "format": "{:,.0f}"
          },
          "all_median_read_length": {
            "title": "Read Length - All (bp)",
            "description": "Median Read Length - all reads (base pairs)",
            "scale": "BuPu",
            "shared_key": "median_read_len",
            "format": "{:,.0f}",
            "hidden": true
          },
          "passed_reads": {
            "title": "f'{config.long_read_count_prefix} Reads - Pass'",
            "description": "f'Number of reads - passing reads ({config.long_read_count_desc})'",
            "scale": "BuGn",
            "modify": "lambda x: x * config.long_read_count_multiplier",
            "shared_key": "long_read_count"
          },
          "all_reads": {
            "title": "f'{config.long_read_count_prefix} Reads - All'",
            "description": "f'Number of reads - all reads ({config.long_read_count_desc})'",
            "scale": "BuGn",
            "modify": "lambda x: x * config.long_read_count_multiplier",
            "shared_key": "long_read_count",
            "hidden": true
          },
          "passed_bases": {
            "title": "f'{config.base_count_prefix} Bases - Pass'",
            "description": "f'Number of bases - passing reads ({config.base_count_desc} of base pairs)'",
            "scale": "OrRd",
            "modify": "lambda x: x * config.base_count_multiplier",
            "shared_key": "base_count"
          },
          "all_bases": {
            "title": "f'{config.base_count_prefix} Bases - All'",
            "description": "f'Number of bases - all reads ({config.base_count_desc} of base pairs)'",
            "scale": "OrRd",
            "modify": "lambda x: x * config.base_count_multiplier",
            "shared_key": "base_count",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "self.table_data",
        "filename": "pycoqc.py",
        "file_path": "multiqc/modules/pycoqc/pycoqc.py"
      }
    ]
  },
  "xenium": {
    "module_name": "xenium",
    "general_stats_calls": [
      {
        "line_number": 1379,
        "call_source": "        self.general_stats_addcols(data_by_sample, headers)",
        "headers": {
          "num_transcripts": {
            "title": "Total Transcripts",
            "description": "Total number of transcripts detected",
            "scale": "YlOrRd",
            "format": "{:,.0f}"
          },
          "num_cells_detected": {
            "title": "Cells",
            "description": "Number of cells detected",
            "scale": "Blues",
            "format": "{:,.0f}"
          },
          "fraction_transcripts_assigned": {
            "title": "Transcripts Assigned",
            "description": "Fraction of transcripts assigned to cells",
            "suffix": "%",
            "scale": "RdYlGn",
            "modify": "lambda x: x * 100.0",
            "max": 100.0
          },
          "median_genes_per_cell": {
            "title": "Genes/Cell",
            "description": "Median number of genes per cell",
            "scale": "Purples",
            "format": "{:,.0f}"
          },
          "fraction_transcripts_decoded_q20": {
            "title": "Q20+ Transcripts",
            "description": "Fraction of transcripts decoded with Q20+",
            "suffix": "%",
            "scale": "Greens",
            "modify": "lambda x: x * 100.0",
            "max": 100.0
          },
          "cell_area_median": {
            "title": "Median Cell",
            "description": "Median cell area",
            "suffix": " μm²",
            "scale": "Blues",
            "format": "{:,.1f}",
            "shared_key": "xenium_cell_area"
          },
          "nucleus_area_median": {
            "title": "Median Nucleus",
            "description": "Median nucleus area",
            "suffix": " μm²",
            "scale": "Oranges",
            "format": "{:,.1f}",
            "shared_key": "xenium_cell_area"
          },
          "nucleus_to_cell_area_ratio_median": {
            "title": "Nucleus/Cell",
            "description": "Median nucleus to cell area ratio",
            "scale": "Greens",
            "format": "{:.3f}",
            "max": 1.0
          }
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "xenium.py",
        "file_path": "multiqc/modules/xenium/xenium.py"
      }
    ]
  },
  "cutadapt": {
    "module_name": "cutadapt",
    "general_stats_calls": [
      {
        "line_number": 411,
        "call_source": "        self.general_stats_addcols(\n            {s: {ColumnKey(k): v for k, v in d.items()} for s, d in self.cutadapt_data.items()},\n            {\n                ColumnKey(\"percent_trimmed\"): {\n                    \"title\": \"Trimmed bases\",\n                    \"description\": \"% total base pairs trimmed\",\n                    \"max\": 100,\n                    \"min\": 0,\n                    \"suffix\": \"%\",\n                    \"scale\": \"RdYlBu-rev\",\n                }\n            },\n            group_samples_config=SampleGroupingConfig(\n                cols_to_weighted_average=[\n                    (ColumnKey(\"percent_trimmed\"), ColumnKey(\"bp_processed\")),\n                ],\n            ),\n        )",
        "headers": {
          "percent_trimmed": {
            "title": "Trimmed bases",
            "description": "% total base pairs trimmed",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlBu-rev"
          }
        },
        "namespace": null,
        "data_structure": "{s: {ColumnKey(k): v for k, v in d.items()} for s, d in self.cutadapt_data.items()}",
        "filename": "cutadapt.py",
        "file_path": "multiqc/modules/cutadapt/cutadapt.py"
      }
    ]
  },
  "haplocheck": {
    "module_name": "haplocheck",
    "general_stats_calls": [
      {
        "line_number": 83,
        "call_source": "        self.general_stats_addcols(haplocheck_data, headers)",
        "headers": {
          "Contamination Status": {
            "title": "Contamination Status",
            "description": "Indicates whether contamination was detected in the sample.",
            "scale": false
          },
          "Contamination Level": {
            "title": "Contamination Level",
            "description": "Estimated level of contamination (if applicable).",
            "min": 0,
            "scale": "Oranges",
            "format": "{:,.2f}"
          },
          "Distance": {
            "title": "Distance",
            "description": "Genomic distance value associated with contamination.",
            "min": 0,
            "scale": "Greens",
            "format": "{:,.0f}"
          },
          "Sample Coverage": {
            "title": "Sample Coverage",
            "description": "The total coverage of the sample sequence.",
            "min": 0,
            "scale": "Blues",
            "format": "{:,.0f}"
          }
        },
        "namespace": null,
        "data_structure": "haplocheck_data",
        "filename": "haplocheck.py",
        "file_path": "multiqc/modules/haplocheck/haplocheck.py"
      }
    ]
  },
  "bamtools": {
    "module_name": "bamtools",
    "general_stats_calls": [
      {
        "line_number": 43,
        "call_source": "        self.general_stats_addcols(self.general_stats_data, self.general_stats_headers)",
        "headers": {
          "_unknown_node_type": "Attribute"
        },
        "namespace": null,
        "data_structure": "self.general_stats_data",
        "filename": "bamtools.py",
        "file_path": "multiqc/modules/bamtools/bamtools.py"
      }
    ]
  },
  "skewer": {
    "module_name": "skewer",
    "general_stats_calls": [
      {
        "line_number": 45,
        "call_source": "        self.general_stats_addcols(self.skewer_data, headers)",
        "headers": {
          "pct_trimmed": {
            "title": "% Trimmed",
            "description": "% of reads trimmed",
            "scale": "RdYlGn-rev",
            "max": 100,
            "min": 0,
            "suffix": "%"
          }
        },
        "namespace": null,
        "data_structure": "self.skewer_data",
        "filename": "skewer.py",
        "file_path": "multiqc/modules/skewer/skewer.py"
      }
    ]
  },
  "phantompeakqualtools": {
    "module_name": "phantompeakqualtools",
    "general_stats_calls": [
      {
        "line_number": 91,
        "call_source": "        self.general_stats_addcols(self.phantompeakqualtools_data, headers)",
        "headers": {
          "Estimated_Fragment_Length_bp": {
            "title": "Frag Length",
            "description": "Estimated fragment length (bp)",
            "min": 0,
            "format": "{:,.0f}"
          },
          "NSC": {
            "title": "NSC",
            "description": "Normalized strand cross-correlation",
            "max": 10,
            "min": 1,
            "format": "{:,.2f}",
            "scale": "RdYlGn-rev"
          },
          "RSC": {
            "title": "RSC",
            "description": "Relative strand cross-correlation",
            "max": 10,
            "min": 0,
            "format": "{:,.2f}",
            "scale": "RdYlBu-rev"
          }
        },
        "namespace": null,
        "data_structure": "self.phantompeakqualtools_data",
        "filename": "phantompeakqualtools.py",
        "file_path": "multiqc/modules/phantompeakqualtools/phantompeakqualtools.py"
      }
    ]
  },
  "slamdunk": {
    "module_name": "slamdunk",
    "general_stats_calls": [
      {
        "line_number": 366,
        "call_source": "        self.general_stats_addcols(self.slamdunk_data, headers)",
        "headers": {
          "counted": {
            "title": "f'{config.read_count_prefix} Counted'",
            "description": "f\"# reads counted within 3'UTRs ({config.read_count_desc})\"",
            "shared_key": "read_count",
            "min": 0,
            "format": "{:,.2f}",
            "scale": "YlGn",
            "modify": "lambda x: float(x) * config.read_count_multiplier"
          },
          "retained": {
            "title": "f'{config.read_count_prefix} Retained'",
            "description": "f'# retained reads after filtering ({config.read_count_desc})'",
            "shared_key": "read_count",
            "min": 0,
            "format": "{:,.2f}",
            "scale": "YlGn",
            "modify": "lambda x: float(x) * config.read_count_multiplier"
          },
          "mapped": {
            "title": "f'{config.read_count_prefix} Mapped'",
            "description": "f'# mapped reads ({config.read_count_desc})'",
            "shared_key": "read_count",
            "min": 0,
            "format": "{:,.2f}",
            "scale": "YlGn",
            "modify": "lambda x: float(x) * config.read_count_multiplier"
          },
          "sequenced": {
            "title": "f'{config.read_count_prefix} Sequenced'",
            "description": "f'# sequenced reads ({config.read_count_desc})'",
            "shared_key": "read_count",
            "min": 0,
            "format": "{:,.2f}",
            "scale": "YlGn",
            "modify": "lambda x: float(x) * config.read_count_multiplier"
          }
        },
        "namespace": null,
        "data_structure": "self.slamdunk_data",
        "filename": "slamdunk.py",
        "file_path": "multiqc/modules/slamdunk/slamdunk.py"
      }
    ]
  },
  "bowtie2": {
    "module_name": "bowtie2",
    "general_stats_calls": [
      {
        "line_number": 240,
        "call_source": "        self.general_stats_addcols(self.bowtie2_data, headers)",
        "headers": {
          "overall_alignment_rate": {
            "title": "% Aligned",
            "description": "overall alignment rate",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn"
          }
        },
        "namespace": null,
        "data_structure": "self.bowtie2_data",
        "filename": "bowtie2.py",
        "file_path": "multiqc/modules/bowtie2/bowtie2.py"
      }
    ]
  },
  "checkm2": {
    "module_name": "checkm2",
    "general_stats_calls": [
      {
        "line_number": 73,
        "call_source": "        self.general_stats_addcols(data_by_sample, headers)",
        "headers": {
          "Completeness": {
            "title": "Predicted Completeness",
            "description": "The percentage of MAG length relative to predicted total MAG length.",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "YlGn"
          },
          "Contamination": {
            "title": "Predicted Contamination",
            "description": "The length of the contaminating portion relative to the expected (complete, uncontaminated) genome length.",
            "min": 0,
            "suffix": "%",
            "format": "{:,.2f}",
            "scale": "YlOrRd"
          },
          "Genome_Size": {
            "title": "Genome Size",
            "description": "The predicted size of the genome",
            "scale": "YlGn",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "checkm2.py",
        "file_path": "multiqc/modules/checkm2/checkm2.py"
      }
    ]
  },
  "nanostat": {
    "module_name": "nanostat",
    "general_stats_calls": [
      {
        "line_number": 380,
        "call_source": "                self.general_stats_addcols(self.nanostat_data, general_stats_headers)",
        "headers": {
          "_dynamic_loop": "for_loop_construction"
        },
        "namespace": null,
        "data_structure": "self.nanostat_data",
        "filename": "nanostat.py",
        "file_path": "multiqc/modules/nanostat/nanostat.py"
      }
    ]
  },
  "mosdepth": {
    "module_name": "mosdepth",
    "general_stats_calls": [
      {
        "line_number": 429,
        "call_source": "        self.general_stats_addcols(genstats_by_sample, genstats_headers)",
        "headers": {
          "_dynamic_loop": "for_loop_construction"
        },
        "namespace": null,
        "data_structure": "genstats_by_sample",
        "filename": "mosdepth.py",
        "file_path": "multiqc/modules/mosdepth/mosdepth.py"
      }
    ]
  },
  "hisat2": {
    "module_name": "hisat2",
    "general_stats_calls": [
      {
        "line_number": 134,
        "call_source": "        self.general_stats_addcols(self.hisat2_data, headers)",
        "headers": {
          "overall_alignment_rate": {
            "title": "% Aligned",
            "description": "overall alignment rate",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn"
          }
        },
        "namespace": null,
        "data_structure": "self.hisat2_data",
        "filename": "hisat2.py",
        "file_path": "multiqc/modules/hisat2/hisat2.py"
      }
    ]
  },
  "seqwho": {
    "module_name": "seqwho",
    "general_stats_calls": [
      {
        "line_number": 157,
        "call_source": "        self.general_stats_addcols(self.seqwho_data, headers)",
        "headers": {
          "predicted_species": {
            "title": "Pred Species",
            "description": "Predicted species",
            "cond_formatting_colours": "species_colors",
            "cond_formatting_rules": "{v: [{'s_eq': v}] for v in SPECIES}",
            "scale": false
          },
          "predicted_library": {
            "title": "Pred Library",
            "description": "Predicted library type",
            "cond_formatting_colours": "library_colors",
            "cond_formatting_rules": "{v: [{'s_eq': v}] for v in LIBRARIES}",
            "scale": false
          },
          "mle": {
            "title": "Max Likelihood Est",
            "description": "Overall maximum likelihood estimate (overall)",
            "min": 0,
            "format": "{:,.3f}",
            "scale": "RdYlGn"
          },
          "est_read_number": {
            "title": "f'{config.read_count_prefix} Est Reads'",
            "description": "f'Estimated read number ({config.read_count_desc})'",
            "min": 0,
            "modify": "lambda x: x * config.read_count_multiplier",
            "scale": "Blues",
            "shared_key": "read_count"
          }
        },
        "namespace": null,
        "data_structure": "self.seqwho_data",
        "filename": "seqwho.py",
        "file_path": "multiqc/modules/seqwho/seqwho.py"
      }
    ]
  },
  "cellranger": {
    "module_name": "cellranger",
    "general_stats_calls": [
      {
        "line_number": 269,
        "call_source": "    module.general_stats_addcols(general_data_by_sample, general_data_headers)",
        "headers": {
          "_function_based": "set_hidden_cols",
          "reads": {
            "title": "f'{config.read_count_prefix} Reads'",
            "description": "f'Number of reads ({config.read_count_desc})'",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "namespace": "VDJ"
          }
        },
        "namespace": null,
        "data_structure": "general_data_by_sample",
        "filename": "vdj.py",
        "file_path": "multiqc/modules/cellranger/vdj.py"
      },
      {
        "line_number": 388,
        "call_source": "    module.general_stats_addcols(general_data_by_sample, general_data_headers)",
        "headers": {
          "_function_based": "set_hidden_cols",
          "reads": {
            "rid": "count_genstats_reads",
            "title": "f'{config.read_count_prefix} Reads'",
            "description": "f'Number of reads ({config.read_count_desc})'",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "namespace": "Count"
          }
        },
        "namespace": null,
        "data_structure": "general_data_by_sample",
        "filename": "count.py",
        "file_path": "multiqc/modules/cellranger/count.py"
      }
    ]
  },
  "malt": {
    "module_name": "malt",
    "general_stats_calls": [
      {
        "line_number": 190,
        "call_source": "        self.general_stats_addcols(self.malt_data, headers)",
        "headers": {
          "Taxonomic assignment success": {
            "title": "% Tax assigned",
            "description": "Percentage of mapped reads assigned to a taxonomic node",
            "suffix": "%",
            "max": 100,
            "scale": "RdYlGn"
          },
          "Assig. Taxonomy": {
            "title": "f'{config.read_count_prefix} Tax assigned'",
            "description": "f'Number of reads assigned to a Taxonomic node ({config.read_count_desc})'",
            "scale": "Greens",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "hidden": true
          },
          "Mappability": {
            "title": "% Metagenomic Mapped",
            "description": "Percentage of mapped reads",
            "suffix": "%",
            "max": 100,
            "scale": "RdYlGn"
          },
          "Total reads": {
            "title": "f'{config.read_count_prefix} Mapped'",
            "description": "f'Number of mapped reads ({config.read_count_desc})'",
            "scale": "PuBu",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier"
          },
          "Num. of queries": {
            "title": "f'{config.read_count_prefix} Reads'",
            "description": "f'Number of reads in sample ({config.read_count_desc})'",
            "scale": "Purples",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier"
          }
        },
        "namespace": null,
        "data_structure": "self.malt_data",
        "filename": "malt.py",
        "file_path": "multiqc/modules/malt/malt.py"
      }
    ]
  },
  "cellranger_arc": {
    "module_name": "cellranger_arc",
    "general_stats_calls": [
      {
        "line_number": 198,
        "call_source": "        self.general_stats_addcols(data_by_sample, general_headers)",
        "headers": {
          "_function_based": "subset_header"
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "cellranger_arc.py",
        "file_path": "multiqc/modules/cellranger_arc/cellranger_arc.py"
      }
    ]
  },
  "homer": {
    "module_name": "homer",
    "general_stats_calls": [
      {
        "line_number": 74,
        "call_source": "        self.general_stats_addcols(self.general_stats_data, self.general_stats_headers)",
        "headers": {
          "_unknown_node_type": "Attribute"
        },
        "namespace": null,
        "data_structure": "self.general_stats_data",
        "filename": "homer.py",
        "file_path": "multiqc/modules/homer/homer.py"
      },
      {
        "line_number": 237,
        "call_source": "        self.general_stats_addcols(self.tagdir_data[\"header\"], headers)",
        "headers": {
          "UniqPositions": {
            "title": "Uniq Pos",
            "description": "Numer of Unique Di-Tags Passed Through HOMER",
            "format": "{:,.0f}",
            "modify": "lambda x: x * 1e-06",
            "suffix": "M"
          },
          "TotalPositions": {
            "title": "Total Pos",
            "description": "Numer of Total Di-Tags Passed Through HOMER",
            "format": "{:,.0f}",
            "modify": "lambda x: x * 1e-06",
            "suffix": "M"
          },
          "fragmentLengthEstimate": {
            "title": "fragment Length",
            "description": "Estimate of Fragnment Length",
            "format": "{:,.0f}"
          },
          "peakSizeEstimate": {
            "title": "Peak Size",
            "description": "Estimate of Peak Size",
            "format": "{:,.0f}"
          },
          "tagsPerBP": {
            "title": "tagsPerBP",
            "description": "average tags Per basepair",
            "format": "{:,.3f}"
          },
          "TagsPerPosition": {
            "title": "averageTagsPerPosition",
            "description": "Average Tags Per Position",
            "format": "{:,.2f}"
          },
          "averageTagLength": {
            "title": "TagLength",
            "description": "Average Tag Length",
            "format": "{:,.0f}"
          },
          "averageFragmentGCcontent": {
            "title": "GCcontent",
            "description": "Average Fragment GC content",
            "max": 1,
            "min": 0,
            "format": "{:,.2f}"
          }
        },
        "namespace": null,
        "data_structure": "self.tagdir_data['header']",
        "filename": "tagdirectory.py",
        "file_path": "multiqc/modules/homer/tagdirectory.py"
      },
      {
        "line_number": 249,
        "call_source": "        self.general_stats_addcols(self.tagdir_data[\"FreqDistribution\"], headers, \"InterChr\")",
        "headers": {
          "InterChr": {
            "title": "InterChr",
            "description": "Fraction of Reads forming inter chromosomal interactions",
            "format": "{:,.4f}"
          }
        },
        "namespace": null,
        "data_structure": "self.tagdir_data['FreqDistribution']",
        "filename": "tagdirectory.py",
        "file_path": "multiqc/modules/homer/tagdirectory.py"
      },
      {
        "line_number": 54,
        "call_source": "        self.general_stats_addcols(self.homer_findpeaks, stats_headers, \"findpeaks\")",
        "headers": {
          "approximate_ip_efficiency": {
            "title": "% Efficiency",
            "description": "Approximate IP efficiency",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "RdYlGn"
          },
          "total_peaks": {
            "title": "Total Peaks",
            "min": 0,
            "format": "{:,.0f}",
            "scale": "GnBu"
          },
          "expected_tags_per_peak": {
            "title": "Tags/Peak",
            "description": "Expected tags per peak",
            "min": 0,
            "format": "{:,.0f}",
            "scale": "PuRd"
          }
        },
        "namespace": null,
        "data_structure": "self.homer_findpeaks",
        "filename": "findpeaks.py",
        "file_path": "multiqc/modules/homer/findpeaks.py"
      }
    ]
  },
  "freyja": {
    "module_name": "freyja",
    "general_stats_calls": [
      {
        "line_number": 110,
        "call_source": "        self.general_stats_addcols(top_lineages_dict, headers)",
        "headers": {
          "Top_lineage_freyja": {
            "title": "Top lineage",
            "description": "The most abundant lineage in the sample",
            "bgcols": "{x: self.scale.get_colour(i) for i, x in enumerate(all_lineages)}"
          },
          "Top_lineage_freyja_percentage": {
            "title": "Top lineage %",
            "description": "The percentage of the most abundant lineage in the sample",
            "max": 100,
            "min": 0,
            "scale": "Blues",
            "modify": "lambda x: x * 100",
            "suffix": "%"
          }
        },
        "namespace": null,
        "data_structure": "top_lineages_dict",
        "filename": "freyja.py",
        "file_path": "multiqc/modules/freyja/freyja.py"
      }
    ]
  },
  "seqera_cli": {
    "module_name": "seqera_cli",
    "general_stats_calls": [
      {
        "line_number": 318,
        "call_source": "        self.general_stats_addcols(data_by_run, headers)",
        "headers": {
          "runUrl": {
            "title": "Run ID",
            "description": "Workflow run ID",
            "scale": false,
            "format": "format_run_url"
          },
          "org_workspace": {
            "title": "Workspace",
            "description": "Organisation and workspace",
            "scale": false
          },
          "repository": {
            "title": "Repository",
            "description": "Name of the repository",
            "scale": "Accent",
            "modify": "lambda x: repositories.index(x)",
            "format": "lambda x: f'''<a href=\"{repositories[x]}\" style=\"white-space: nowrap;\">{repositories[x].replace('https://', '').replace('http://', '').replace('github.com/', '')}</a>'''"
          },
          "revision": {
            "title": "Version",
            "description": "Pipeline version",
            "scale": false
          },
          "start": {
            "title": "Start",
            "description": "Start time of the workflow",
            "hidden": true,
            "format": "lambda x: humanize.naturaltime(dt.datetime.fromtimestamp(x))"
          },
          "complete": {
            "title": "Complete",
            "description": "End time of the workflow",
            "hidden": true,
            "format": "lambda x: humanize.naturaltime(dt.datetime.fromtimestamp(x))"
          },
          "wallTime": {
            "title": "Wall time",
            "description": "Duration of the workflow",
            "format": "lambda x: str(dt.timedelta(seconds=x))",
            "scale": "BuPu"
          },
          "cpuTime": {
            "title": "CPU time",
            "description": "Total CPU time used by the workflow",
            "modify": "lambda x: x // 1000 / 60 / 60",
            "suffix": " h",
            "scale": "Greys"
          },
          "cost": {
            "title": "Est. cost",
            "description": "Estimated cost of the workflow",
            "format": "${:,.2f}",
            "scale": "Reds"
          },
          "readBytes": {
            "title": "Read GB",
            "description": "Total gigabytes read by the workflow",
            "format": "lambda x: humanize.naturalsize(x)",
            "scale": "Blues"
          },
          "writeBytes": {
            "title": "Write GB",
            "description": "Total gigabytes written by the workflow",
            "format": "lambda x: humanize.naturalsize(x)",
            "scale": "Greens"
          },
          "cpuEfficiency": {
            "title": "CPU efficiency",
            "description": "Percentage of CPU time used by the workflow",
            "format": "{:,.2f}",
            "suffix": "%",
            "max": 100,
            "scale": "RdYlGn"
          },
          "memoryEfficiency": {
            "title": "Memory efficiency",
            "description": "Percentage of memory used by the workflow",
            "format": "{:,.2f}",
            "suffix": "%",
            "max": 100,
            "scale": "YlGn"
          },
          "nextflowVersion": {
            "title": "Nextflow",
            "description": "Version of Nextflow",
            "cond_formatting_colours": "version_colors",
            "cond_formatting_rules": "{v: [{'s_eq': v}] for v in nextflow_versions}",
            "scale": false
          }
        },
        "namespace": null,
        "data_structure": "data_by_run",
        "filename": "seqera_cli.py",
        "file_path": "multiqc/modules/seqera_cli/seqera_cli.py"
      }
    ]
  },
  "eigenstratdatabasetools": {
    "module_name": "eigenstratdatabasetools",
    "general_stats_calls": [
      {
        "line_number": 95,
        "call_source": "        self.general_stats_addcols(self.snp_cov_data, headers)",
        "headers": {
          "Covered_Snps": {
            "title": "Covered SNPs",
            "description": "The number of SNPs for which a genotype has been called.",
            "scale": "PuBuGn",
            "format": "{:,.0f}",
            "shared_key": "snp_call"
          },
          "Total_Snps": {
            "title": "Total SNPs",
            "description": "The total number of SNPs in the genotype dataset.",
            "scale": "PuBuGn",
            "format": "{:,.0f}",
            "hidden": true,
            "shared_key": "snp_call"
          }
        },
        "namespace": null,
        "data_structure": "self.snp_cov_data",
        "filename": "eigenstratdatabasetools.py",
        "file_path": "multiqc/modules/eigenstratdatabasetools/eigenstratdatabasetools.py"
      }
    ]
  },
  "mapdamage": {
    "module_name": "mapdamage",
    "general_stats_calls": [
      {
        "line_number": 206,
        "call_source": "        self.general_stats_addcols(dict_to_add, headers)",
        "headers": {
          "f'mapdamage-{readend}1'": {
            "rid": "f'misinc-stats-1st-{readend}-{substitution}'",
            "title": "f'{readend} {substitution} 1st base'",
            "description": "f'{readend} 1st base substitution frequency for {substitution}'",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGnBu",
            "modify": "lambda x: x * 100.0"
          },
          "f'mapdamage-{readend}2'": {
            "rid": "f'misinc-stats-2nd-{readend}-{substitution}'",
            "title": "f'{readend} {substitution} 2nd base'",
            "description": "f'{readend} 2nd base substitution frequency for {substitution}'",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "BuGn",
            "hidden": true,
            "modify": "lambda x: x * 100.0"
          }
        },
        "namespace": null,
        "data_structure": "dict_to_add",
        "filename": "mapdamage.py",
        "file_path": "multiqc/modules/mapdamage/mapdamage.py"
      }
    ]
  },
  "bcftools": {
    "module_name": "bcftools",
    "general_stats_calls": [
      {
        "line_number": 57,
        "call_source": "        self.general_stats_addcols(self.general_stats_data, self.general_stats_headers)",
        "headers": {
          "_unknown_node_type": "Attribute"
        },
        "namespace": null,
        "data_structure": "self.general_stats_data",
        "filename": "bcftools.py",
        "file_path": "multiqc/modules/bcftools/bcftools.py"
      },
      {
        "line_number": 239,
        "call_source": "        module.general_stats_addcols(bcftools_stats, stats_headers, \"Stats\")",
        "headers": {
          "number_of_records": {
            "title": "Vars",
            "description": "Variations total",
            "min": 0,
            "format": "{:,.0f}"
          },
          "variations_hom": {
            "title": "Hom",
            "description": "Variations homozygous",
            "min": 0,
            "format": "{:,.0f}"
          },
          "variations_het": {
            "title": "Het",
            "description": "Variations heterozygous",
            "min": 0,
            "format": "{:,.0f}"
          },
          "number_of_SNPs": {
            "title": "SNP",
            "description": "Variation SNPs",
            "min": 0,
            "format": "{:,.0f}"
          },
          "number_of_indels": {
            "title": "Indel",
            "description": "Variation Insertions/Deletions",
            "min": 0,
            "format": "{:,.0f}"
          },
          "tstv": {
            "title": "Ts/Tv",
            "description": "Variant SNP transition / transversion ratio",
            "min": 0,
            "format": "{:,.2f}"
          },
          "number_of_MNPs": {
            "title": "MNP",
            "description": "Variation multinucleotide polymorphisms",
            "min": 0,
            "format": "{:,.0f}",
            "hidden": true
          },
          "number_of_multiallelic_sites": {
            "title": "Multiallelic",
            "description": "Variation sites with multiple alleles",
            "min": 0,
            "format": "{:,.0f}",
            "hidden": true
          },
          "number_of_multiallelic_SNP_sites": {
            "title": "Multiallelic SNP",
            "description": "Variation sites with multiple SNPs",
            "min": 0,
            "format": "{:,.0f}",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "bcftools_stats",
        "filename": "stats.py",
        "file_path": "multiqc/modules/bcftools/stats.py"
      }
    ]
  },
  "bamdst": {
    "module_name": "bamdst",
    "general_stats_calls": [
      {
        "line_number": 335,
        "call_source": "        self.general_stats_addcols(data_by_sample, genstats_headers)",
        "headers": {
          "_unknown_node_type": "DictComp"
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "bamdst.py",
        "file_path": "multiqc/modules/bamdst/bamdst.py"
      }
    ]
  },
  "sickle": {
    "module_name": "sickle",
    "general_stats_calls": [
      {
        "line_number": 108,
        "call_source": "        self.general_stats_addcols(self.sickle_data, headers)",
        "headers": {
          "percentage_discarded": {
            "title": "% Reads discarded",
            "description": "Percentage of reads discarded",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "OrRd"
          },
          "reads_total_kept": {
            "title": "f'{config.read_count_prefix} Reads kept'",
            "description": "f'Number of reads kept ({config.read_count_desc})'",
            "modify": "lambda x: x * config.read_count_multiplier",
            "scale": "BuGn"
          }
        },
        "namespace": null,
        "data_structure": "self.sickle_data",
        "filename": "sickle.py",
        "file_path": "multiqc/modules/sickle/sickle.py"
      }
    ]
  },
  "motus": {
    "module_name": "motus",
    "general_stats_calls": [
      {
        "line_number": 156,
        "call_source": "        self.general_stats_addcols(self.motus_data, headers)",
        "headers": {
          "Total number of reads": {
            "title": "f'Total Input Reads ({config.read_count_prefix})'",
            "description": "f'Total number of input reads to mOTUs ({config.read_count_prefix})'",
            "scale": "Greens",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier"
          },
          "Number of reads after filtering": {
            "title": "f'Total Mapped Reads ({config.read_count_prefix})'",
            "description": "f'Total number of reads after mapping({config.read_count_prefix})'",
            "scale": "Greens",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier"
          },
          "Total number of inserts": {
            "title": "f'Total Mapped Inserts ({config.read_count_prefix})'",
            "description": "f'Total number of inserts mapped to a MGC ({config.read_count_prefix})'",
            "scale": "Purples",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier"
          },
          "Unique mappers": {
            "title": "f'Unique Mapped Inserts ({config.read_count_prefix})'",
            "description": "f'Total number of inserts mapped to a single MGC ({config.read_count_prefix})'",
            "scale": "Greens",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "hidden": true
          },
          "Multiple mappers": {
            "title": "f' Multi-mapped Inserts ({config.read_count_prefix})'",
            "description": "f'Total number of inserts mapped to multiple MGCs ({config.read_count_prefix})'",
            "scale": "Purples",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "hidden": true
          },
          "Ignored multiple mapper without unique hit": {
            "title": "f'Ignored Multi-mapped Inserts ({config.read_count_prefix})'",
            "description": "f'Total number of ignored multi-MGC mapped reads ({config.read_count_prefix})'",
            "scale": "Greens",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "hidden": true
          },
          "Number of ref-mOTUs": {
            "title": "Total ref-mOTUs",
            "description": "Total known species mOTUs found",
            "scale": "Purples",
            "shared_key": "mOTUs",
            "format": "{:,.0f}"
          },
          "Number of meta-mOTUs": {
            "title": "Total meta-mOTUs",
            "description": "Total number of unknown metagenome-derived mOTUs found",
            "scale": "Greens",
            "shared_key": "mOTUs",
            "format": "{:,.0f}"
          },
          "Number of ext-mOTUs": {
            "title": "Total ext-mOTUs",
            "description": "Total number of unknown MAG-derived mOTUs found",
            "scale": "Purples",
            "shared_key": "mOTUs",
            "format": "{:,.0f}"
          }
        },
        "namespace": null,
        "data_structure": "self.motus_data",
        "filename": "motus.py",
        "file_path": "multiqc/modules/motus/motus.py"
      }
    ]
  },
  "pbmarkdup": {
    "module_name": "pbmarkdup",
    "general_stats_calls": [
      {
        "line_number": 139,
        "call_source": "        self.general_stats_addcols(general, general_stats_headers)",
        "headers": {
          "unique_molecules": {
            "title": "% Unique Molecules",
            "description": "Percentage of unique molecules",
            "suffix": "%",
            "min": 0,
            "max": 100,
            "modify": "lambda x: x * 100",
            "scale": "RdYlGn"
          },
          "duplicate_reads": {
            "title": "% Duplicate Reads",
            "description": "Percentage of duplicate reads",
            "suffix": "%",
            "min": 0,
            "max": 100,
            "modify": "lambda x: x * 100",
            "scale": "RdYlGn-rev",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "general",
        "filename": "pbmarkdup.py",
        "file_path": "multiqc/modules/pbmarkdup/pbmarkdup.py"
      }
    ]
  },
  "rna_seqc": {
    "module_name": "rna_seqc",
    "general_stats_calls": [
      {
        "line_number": 269,
        "call_source": "        self.general_stats_addcols(self.rna_seqc_metrics, headers)",
        "headers": {
          "Expression Profiling Efficiency": {
            "title": "% Expression Efficiency",
            "description": "Ratio of exonic reads to total reads",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn",
            "modify": "lambda x: float(x) * 100.0"
          },
          "Genes Detected": {
            "title": "# Genes",
            "description": "Number of genes detected with at least 5 reads",
            "min": 0,
            "scale": "Blues",
            "format": "{:,.0f}"
          },
          "rRNA rate": {
            "title": "% rRNA Alignment",
            "description": "Ribosomal RNA reads per total reads",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "Reds",
            "modify": "lambda x: float(x) * 100.0"
          },
          "Mapping Rate": {
            "title": "% Mapping",
            "description": "Percentage of reads mapped to the reference",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn",
            "modify": "lambda x: float(x) * 100.0",
            "hidden": true
          },
          "Exonic Rate": {
            "title": "% Exonic",
            "description": "Percentage of reads mapped to exons",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlOrRd",
            "modify": "lambda x: float(x) * 100.0",
            "hidden": true
          },
          "Intronic Rate": {
            "title": "% Intronic",
            "description": "Percentage of reads mapped to introns",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlOrRd",
            "modify": "lambda x: float(x) * 100.0",
            "hidden": true
          },
          "Intergenic Rate": {
            "title": "% Intergenic",
            "description": "Percentage of reads mapped between genes",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlOrRd",
            "modify": "lambda x: float(x) * 100.0",
            "hidden": true
          },
          "Intragenic Rate": {
            "title": "% Intragenic",
            "description": "Percentage of reads mapped within genes",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlOrRd",
            "modify": "lambda x: float(x) * 100.0",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "self.rna_seqc_metrics",
        "filename": "rna_seqc.py",
        "file_path": "multiqc/modules/rna_seqc/rna_seqc.py"
      }
    ]
  },
  "dragen_fastqc": {
    "module_name": "dragen_fastqc",
    "general_stats_calls": [
      {
        "line_number": 187,
        "call_source": "        self.general_stats_addcols(avg_gc_content_data, headers, namespace=\"FastQC\")",
        "headers": {
          "avg_gc_content_percent": {
            "title": "% GC",
            "description": "Average % GC Content",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "PuRd",
            "format": "{:,.0f}"
          }
        },
        "namespace": "FastQC",
        "data_structure": "avg_gc_content_data",
        "filename": "gc_metrics.py",
        "file_path": "multiqc/modules/dragen_fastqc/gc_metrics.py"
      }
    ]
  },
  "bismark": {
    "module_name": "bismark",
    "general_stats_calls": [
      {
        "line_number": 338,
        "call_source": "        self.general_stats_addcols(self.bismark_data[\"methextract\"], headers[\"methextract\"])",
        "headers": {
          "percent_cpg_meth": {
            "title": "mCpG",
            "description": "% Cytosines methylated in CpG context",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "Greens"
          },
          "percent_chg_meth": {
            "title": "mCHG",
            "description": "% Cytosines methylated in CHG context",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "Oranges"
          },
          "percent_chh_meth": {
            "title": "mCHH",
            "description": "% Cytosines methylated in CHH context",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "Oranges"
          },
          "total_c": {
            "title": "C's",
            "description": "Total number of C's analysed, in millions",
            "min": 0,
            "scale": "Purples",
            "modify": "lambda x: x / 1000000"
          }
        },
        "namespace": null,
        "data_structure": "self.bismark_data['methextract']",
        "filename": "bismark.py",
        "file_path": "multiqc/modules/bismark/bismark.py"
      },
      {
        "line_number": 339,
        "call_source": "        self.general_stats_addcols(self.bismark_data[\"bam2nuc\"], headers[\"bam2nuc\"])",
        "headers": {
          "C_coverage": {
            "title": "C coverage",
            "description": "Cyotosine coverage",
            "min": 0,
            "suffix": "X",
            "scale": "Greens",
            "format": "{:,.2f}"
          }
        },
        "namespace": null,
        "data_structure": "self.bismark_data['bam2nuc']",
        "filename": "bismark.py",
        "file_path": "multiqc/modules/bismark/bismark.py"
      },
      {
        "line_number": 340,
        "call_source": "        self.general_stats_addcols(self.bismark_data[\"dedup\"], headers[\"dedup\"])",
        "headers": {
          "dup_reads_percent": {
            "title": "Dups",
            "description": "Percent duplicated alignments",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn-rev"
          },
          "dedup_reads": {
            "title": "Unique",
            "description": "f'Deduplicated alignments ({config.read_count_desc})'",
            "min": 0,
            "scale": "Greens",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "self.bismark_data['dedup']",
        "filename": "bismark.py",
        "file_path": "multiqc/modules/bismark/bismark.py"
      },
      {
        "line_number": 341,
        "call_source": "        self.general_stats_addcols(self.bismark_data[\"alignment\"], headers[\"alignment\"])",
        "headers": {
          "aligned_reads": {
            "title": "Aligned",
            "description": "f'Total aligned sequences ({config.read_count_desc})'",
            "min": 0,
            "scale": "PuRd",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "hidden": true
          },
          "percent_aligned": {
            "title": "Aligned",
            "description": "Percent aligned sequences",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn"
          }
        },
        "namespace": null,
        "data_structure": "self.bismark_data['alignment']",
        "filename": "bismark.py",
        "file_path": "multiqc/modules/bismark/bismark.py"
      }
    ]
  },
  "xengsort": {
    "module_name": "xengsort",
    "general_stats_calls": [
      {
        "line_number": 112,
        "call_source": "        self.general_stats_addcols(table_data, headers)",
        "headers": {
          "_dynamic_loop": "for_loop_construction"
        },
        "namespace": null,
        "data_structure": "table_data",
        "filename": "xengsort.py",
        "file_path": "multiqc/modules/xengsort/xengsort.py"
      }
    ]
  },
  "bakta": {
    "module_name": "bakta",
    "general_stats_calls": [
      {
        "line_number": 67,
        "call_source": "        self.general_stats_addcols(self.bakta, headers)",
        "headers": {
          "Count": {
            "title": "# contigs",
            "description": "Number of contigs",
            "min": 0,
            "scale": "Blues",
            "format": "{:,d}"
          },
          "Length": {
            "title": "# bases",
            "description": "Total number of bases in the contigs",
            "min": 0,
            "scale": "YlGn",
            "format": "{:,d}"
          },
          "CDSs": {
            "title": "# CDS",
            "description": "Number of found CDS",
            "min": 0,
            "scale": "YlGnBu",
            "format": "{:,d}",
            "shared_key": "gene_count"
          }
        },
        "namespace": null,
        "data_structure": "self.bakta",
        "filename": "bakta.py",
        "file_path": "multiqc/modules/bakta/bakta.py"
      }
    ]
  },
  "pangolin": {
    "module_name": "pangolin",
    "general_stats_calls": [
      {
        "line_number": 139,
        "call_source": "        self.general_stats_addcols(self.pangolin_data, headers)",
        "headers": {
          "lineage": {
            "title": "Lineage",
            "description": "Lineage",
            "min": 0,
            "scale": "RdYlGn",
            "bgcols": "self.lineage_colours"
          }
        },
        "namespace": null,
        "data_structure": "self.pangolin_data",
        "filename": "pangolin.py",
        "file_path": "multiqc/modules/pangolin/pangolin.py"
      }
    ]
  },
  "spaceranger": {
    "module_name": "spaceranger",
    "general_stats_calls": [
      {
        "line_number": 269,
        "call_source": "    module.general_stats_addcols(general_stats_data, general_stats_headers)",
        "headers": {
          "reads": {
            "rid": "count_genstats_reads",
            "title": "Reads",
            "description": "Number of reads",
            "shared_key": "read_count",
            "namespace": "Space Ranger Count"
          }
        },
        "namespace": null,
        "data_structure": "general_stats_data",
        "filename": "count.py",
        "file_path": "multiqc/modules/spaceranger/count.py"
      }
    ]
  },
  "prinseqplusplus": {
    "module_name": "prinseqplusplus",
    "general_stats_calls": [
      {
        "line_number": 91,
        "call_source": "        self.general_stats_addcols(\n            data,\n            {\n                \"prinseqplusplus_total\": {\n                    \"title\": f\"Filtered Reads ({config.read_count_prefix})\",\n                    \"description\": f\"Sum of filtered reads ({config.read_count_desc})\",\n                    \"scale\": \"Oranges\",\n                    \"shared_key\": \"read_count\",\n                    \"modify\": lambda x: x * config.read_count_multiplier,\n                }\n            },\n        )",
        "headers": {
          "prinseqplusplus_total": {
            "title": "f'Filtered Reads ({config.read_count_prefix})'",
            "description": "f'Sum of filtered reads ({config.read_count_desc})'",
            "scale": "Oranges",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier"
          }
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "prinseqplusplus.py",
        "file_path": "multiqc/modules/prinseqplusplus/prinseqplusplus.py"
      }
    ]
  },
  "anglerfish": {
    "module_name": "anglerfish",
    "general_stats_calls": [
      {
        "line_number": 177,
        "call_source": "        self.general_stats_addcols(data, headers)",
        "headers": {
          "library": {
            "title": "% Library",
            "description": "Fraction within library.",
            "max": 100,
            "min": 0,
            "scale": "PuBu-rev",
            "suffix": " %"
          },
          "#reads": {
            "title": "# Reads",
            "description": "Total number of reads",
            "min": 0,
            "scale": "PuOr",
            "format": "{:.0f}"
          },
          "mean_read_len": {
            "title": "Read Length",
            "description": "Mean read length",
            "min": 0,
            "scale": "RdYlGn",
            "suffix": " bp"
          },
          "std_read_len": {
            "title": "Length StdDev",
            "description": "Standard deviation of the read lengths",
            "min": 0,
            "scale": "RdPu",
            "suffix": " bp"
          }
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "anglerfish.py",
        "file_path": "multiqc/modules/anglerfish/anglerfish.py"
      }
    ]
  },
  "flexbar": {
    "module_name": "flexbar",
    "general_stats_calls": [
      {
        "line_number": 52,
        "call_source": "        self.general_stats_addcols(self.flexbar_data, headers)",
        "headers": {
          "removed_bases_pct": {
            "title": "% bp Trimmed",
            "description": "% Total Base Pairs removed",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlOrRd"
          }
        },
        "namespace": null,
        "data_structure": "self.flexbar_data",
        "filename": "flexbar.py",
        "file_path": "multiqc/modules/flexbar/flexbar.py"
      }
    ]
  },
  "fgbio": {
    "module_name": "fgbio",
    "general_stats_calls": [
      {
        "line_number": 184,
        "call_source": "    module.general_stats_addcols(error_rates, headers)",
        "headers": {
          "error_rate": {
            "title": "% Error",
            "description": "Percent error across all read positions",
            "min": 0,
            "max": 100.0,
            "scale": "RdYlGn-rev",
            "suffix": "%",
            "format": "{:,.2f}",
            "modify": "lambda x: 100.0 * x"
          }
        },
        "namespace": null,
        "data_structure": "error_rates",
        "filename": "error_rate_by_read_position.py",
        "file_path": "multiqc/modules/fgbio/error_rate_by_read_position.py"
      }
    ]
  },
  "pychopper": {
    "module_name": "pychopper",
    "general_stats_calls": [
      {
        "line_number": 74,
        "call_source": "        self.general_stats_addcols(data_general_stats, headers)",
        "headers": {
          "ftp": {
            "title": "Full-Length cDNA",
            "description": "Percentage of full length cDNA reads with correct primers at both ends",
            "suffix": "%",
            "max": 100,
            "min": 0
          }
        },
        "namespace": null,
        "data_structure": "data_general_stats",
        "filename": "pychopper.py",
        "file_path": "multiqc/modules/pychopper/pychopper.py"
      }
    ]
  },
  "clipandmerge": {
    "module_name": "clipandmerge",
    "general_stats_calls": [
      {
        "line_number": 100,
        "call_source": "        self.general_stats_addcols(self.clipandmerge_data, headers)",
        "headers": {
          "percentage": {
            "title": "% Merged",
            "description": "Percentage of reads merged",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "Greens",
            "format": "{:,.2f}"
          }
        },
        "namespace": null,
        "data_structure": "self.clipandmerge_data",
        "filename": "clipandmerge.py",
        "file_path": "multiqc/modules/clipandmerge/clipandmerge.py"
      }
    ]
  },
  "ngsderive": {
    "module_name": "ngsderive",
    "general_stats_calls": [
      {
        "line_number": 166,
        "call_source": "        self.general_stats_addcols(data, headers)",
        "headers": {
          "predicted": {
            "title": "Strandedness",
            "description": "Predicted strandedness from ngsderive",
            "scale": false
          }
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "ngsderive.py",
        "file_path": "multiqc/modules/ngsderive/ngsderive.py"
      },
      {
        "line_number": 222,
        "call_source": "        self.general_stats_addcols(general_data, general_headers)",
        "headers": {
          "instrument": {
            "title": "Predicted Instrument",
            "description": "Predicted instrument from ngsderive"
          },
          "confidence": {
            "title": "Instrument: Confidence",
            "description": "Level of confidence (low, medium, high) that the predicted instrument is correct.",
            "bgcols": "bgcols",
            "cond_formatting_rules": "cond_formatting_rules",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "general_data",
        "filename": "ngsderive.py",
        "file_path": "multiqc/modules/ngsderive/ngsderive.py"
      },
      {
        "line_number": 297,
        "call_source": "        self.general_stats_addcols(data, headers)",
        "headers": {
          "consensusreadlength": {
            "title": "Read Length (bp)",
            "description": "Predicted read length from ngsderive.",
            "format": "{:,d}"
          },
          "majoritypctdetected": {
            "title": "Read Length: % Supporting",
            "description": "Percentage of reads which were measured at the predicted read length.",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "ngsderive.py",
        "file_path": "multiqc/modules/ngsderive/ngsderive.py"
      },
      {
        "line_number": 361,
        "call_source": "        self.general_stats_addcols(general_data, general_headers)",
        "headers": {
          "probable_encoding": {
            "title": "Probable Encoding",
            "description": "Predicted PHRED score encoding from ngsderive"
          },
          "evidence": {
            "title": "Encoding: Evidence",
            "description": "Observed ASCII value ranges in PHRED score encoding",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "general_data",
        "filename": "ngsderive.py",
        "file_path": "multiqc/modules/ngsderive/ngsderive.py"
      },
      {
        "line_number": 427,
        "call_source": "        self.general_stats_addcols(data, headers)",
        "headers": {
          "total_junctions": {
            "title": "Total junctions",
            "description": "Total number of junctions found by ngsderive",
            "hidden": true,
            "format": "{:,d}"
          },
          "known_junctions": {
            "title": "Known junctions",
            "description": "Number of annotated junctions found by ngsderive",
            "format": "{:,d}"
          },
          "partial_novel_junctions": {
            "title": "Partially novel junctions",
            "description": "Number of partially annotated junctions found by ngsderive",
            "format": "{:,d}"
          },
          "novel_junctions": {
            "title": "Novel junctions",
            "description": "Number of completely novel junctions found by ngsderive",
            "format": "{:,d}"
          },
          "total_splice_events": {
            "title": "Total splice events",
            "description": "Total number of spliced reads found by ngsderive",
            "hidden": true,
            "format": "{:,d}"
          },
          "known_spliced_reads": {
            "title": "Annotated spliced reads",
            "description": "Number of annotated spliced reads found by ngsderive",
            "hidden": true,
            "format": "{:,d}"
          },
          "partial_novel_spliced_reads": {
            "title": "Partially annotated spliced reads",
            "description": "Number of partially annotated spliced reads found by ngsderive",
            "hidden": true,
            "format": "{:,d}"
          },
          "novel_spliced_reads": {
            "title": "Novel spliced reads",
            "description": "Number of completely un-annotated spliced reads found by ngsderive",
            "hidden": true,
            "format": "{:,d}"
          }
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "ngsderive.py",
        "file_path": "multiqc/modules/ngsderive/ngsderive.py"
      }
    ]
  },
  "disambiguate": {
    "module_name": "disambiguate",
    "general_stats_calls": [
      {
        "line_number": 89,
        "call_source": "        self.general_stats_addcols(percentages, headers)",
        "headers": {
          "species_a": {
            "title": "% Species a",
            "description": "Percentage of reads mapping to species a",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn"
          }
        },
        "namespace": null,
        "data_structure": "percentages",
        "filename": "disambiguate.py",
        "file_path": "multiqc/modules/disambiguate/disambiguate.py"
      }
    ]
  },
  "sambamba": {
    "module_name": "sambamba",
    "general_stats_calls": [
      {
        "line_number": 134,
        "call_source": "    module.general_stats_addcols(data_by_sample, headers, namespace=\"markdup\")",
        "headers": {
          "duplicate_rate": {
            "title": "% Dups",
            "description": "Rate of Duplication per Sample",
            "scale": "RdYlGn-rev",
            "format": "{:,.0f}",
            "suffix": "%"
          }
        },
        "namespace": "markdup",
        "data_structure": "data_by_sample",
        "filename": "markdup.py",
        "file_path": "multiqc/modules/sambamba/markdup.py"
      }
    ]
  },
  "truvari": {
    "module_name": "truvari",
    "general_stats_calls": [
      {
        "line_number": 155,
        "call_source": "        self.general_stats_addcols(data, bench_headers)",
        "headers": {
          "_function_based": "dict",
          "precision": {
            "title": "Precision",
            "description": "Precision of the SV calls. Definition: TP-comp / (TP-comp + FP)",
            "suffix": "%",
            "modify": "lambda x: x * 100",
            "placement": 100,
            "max": 100,
            "min": 0,
            "scale": "PRGn"
          },
          "recall": {
            "title": "Recall",
            "description": "Recall of the SV calls. Definition: TP-base / (TP-base + FN)",
            "suffix": "%",
            "modify": "lambda x: x * 100",
            "placement": 101,
            "max": 100,
            "min": 0,
            "scale": "BrBG"
          },
          "f1": {
            "title": "F1",
            "description": "F1 score of the SV calls. Definition: 2 * ((Recall * Precision) / (Recall + Precision))",
            "suffix": "%",
            "modify": "lambda x: x * 100",
            "placement": 102,
            "max": 100,
            "min": 0,
            "scale": "RdYlGn"
          },
          "gt_concordance": {
            "title": "GT concordance",
            "description": "Genotype concordance. Definition: TP-comp with GT / (TP-comp with GT + TP-comp w/o GT)",
            "scale": "GnBu",
            "suffix": "%",
            "placement": 103,
            "max": 100,
            "min": 0,
            "hidden": true,
            "modify": "lambda x: x * 100"
          }
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "truvari.py",
        "file_path": "multiqc/modules/truvari/truvari.py"
      }
    ]
  },
  "leehom": {
    "module_name": "leehom",
    "general_stats_calls": [
      {
        "line_number": 94,
        "call_source": "        self.general_stats_addcols(self.leehom_data, headers)",
        "headers": {
          "merged_trimming": {
            "title": "f'{config.read_count_prefix} Merged (Trimming)'",
            "description": "f'Merged clusters from trimming ({config.read_count_desc})'",
            "min": 0,
            "scale": "PuRd",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count"
          },
          "merged_overlap": {
            "title": "f'{config.read_count_prefix} Merged (Overlap)'",
            "description": "f'Merged clusters from overlapping reads ({config.read_count_desc})'",
            "min": 0,
            "scale": "PuRd",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count"
          }
        },
        "namespace": null,
        "data_structure": "self.leehom_data",
        "filename": "leehom.py",
        "file_path": "multiqc/modules/leehom/leehom.py"
      }
    ]
  },
  "damageprofiler": {
    "module_name": "damageprofiler",
    "general_stats_calls": [
      {
        "line_number": 161,
        "call_source": "        self.general_stats_addcols(dict_to_add, headers)",
        "headers": {
          "f'{readend}1'": {
            "rid": "f'misinc-stats-1st-{readend}-{substitution}'",
            "title": "f'{readend} {substitution} 1st base'",
            "description": "f'{readend} 1st base substitution frequency for {substitution}'",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGnBu",
            "modify": "lambda x: x * 100.0"
          },
          "f'{readend}2'": {
            "rid": "f'misinc-stats-2nd-{readend}-{substitution}'",
            "title": "f'{readend} {substitution} 2nd base'",
            "description": "f'{readend} 2nd base substitution frequency for {substitution}'",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "BuGn",
            "hidden": true,
            "modify": "lambda x: x * 100.0"
          }
        },
        "namespace": null,
        "data_structure": "dict_to_add",
        "filename": "damageprofiler.py",
        "file_path": "multiqc/modules/damageprofiler/damageprofiler.py"
      },
      {
        "line_number": 196,
        "call_source": "        self.general_stats_addcols(dict_to_plot, headers)",
        "headers": {
          "std": {
            "title": "Read length std. dev.",
            "description": "Read length std. dev.",
            "suffix": "bp",
            "scale": "PuBu",
            "format": "{:,.2f}",
            "shared_key": "read_length",
            "hidden": true
          },
          "median": {
            "title": "Median read length",
            "description": "Median read length",
            "suffix": "bp",
            "scale": "YlGnBu",
            "format": "{:,.2f}",
            "shared_key": "read_length"
          },
          "mean_readlength": {
            "title": "Mean read length",
            "description": "Mean read length",
            "suffix": "bp",
            "scale": "PuBuGn",
            "format": "{:,.2f}",
            "shared_key": "read_length",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "dict_to_plot",
        "filename": "damageprofiler.py",
        "file_path": "multiqc/modules/damageprofiler/damageprofiler.py"
      }
    ]
  },
  "busco": {
    "module_name": "busco",
    "general_stats_calls": [
      {
        "line_number": 99,
        "call_source": "        self.general_stats_addcols(self.busco_data, headers)",
        "headers": {
          "complete": {
            "title": "Complete BUSCOs",
            "description": "Number of complete BUSCOs",
            "min": 0,
            "hidden": true
          },
          "complete_single_copy": {
            "title": "Complete and single-copy BUSCOs",
            "description": "Number of complete and single-copy BUSCOs",
            "min": 0
          },
          "complete_duplicated": {
            "title": "Complete and duplicated BUSCOs",
            "description": "Number of complete and duplicated BUSCOs",
            "min": 0,
            "hidden": true
          },
          "fragmented": {
            "title": "Fragmented BUSCOs",
            "description": "Number of fragmented BUSCOs",
            "min": 0,
            "hidden": true
          },
          "missing": {
            "title": "Missing BUSCOs",
            "description": "Number of missing BUSCOs",
            "min": 0
          }
        },
        "namespace": null,
        "data_structure": "self.busco_data",
        "filename": "busco.py",
        "file_path": "multiqc/modules/busco/busco.py"
      }
    ]
  },
  "humid": {
    "module_name": "humid",
    "general_stats_calls": [
      {
        "line_number": 80,
        "call_source": "        self.general_stats_addcols(data, headers)",
        "headers": {
          "_function_based": "dict",
          "uniq": {
            "title": "f'{config.read_count_prefix} Unique Reads'",
            "description": "f'Reads remaining after deduplication ({config.read_count_desc})'",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "scale": "Blues"
          },
          "perc": {
            "title": "% Pass Dedup",
            "description": "% processed reads that passed deduplication",
            "suffix": "%",
            "min": 0,
            "max": 100,
            "scale": "RdBu"
          }
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "stats.py",
        "file_path": "multiqc/modules/humid/stats.py"
      },
      {
        "line_number": 96,
        "call_source": "        self.general_stats_addcols(data, headers)",
        "headers": {
          "_function_based": "dict",
          "uniq": {
            "title": "f'{config.read_count_prefix} Unique Reads'",
            "description": "f'Reads remaining after deduplication ({config.read_count_desc})'",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "scale": "Blues"
          },
          "perc": {
            "title": "% Pass Dedup",
            "description": "% processed reads that passed deduplication",
            "suffix": "%",
            "min": 0,
            "max": 100,
            "scale": "RdBu"
          }
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "stats.py",
        "file_path": "multiqc/modules/humid/stats.py"
      }
    ]
  },
  "megahit": {
    "module_name": "megahit",
    "general_stats_calls": [
      {
        "line_number": 133,
        "call_source": "        self.general_stats_addcols(data, {h: v for h, v in headers.items() if h in genstats_cols})",
        "headers": {
          "_unknown_node_type": "DictComp"
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "megahit.py",
        "file_path": "multiqc/modules/megahit/megahit.py"
      }
    ]
  },
  "snpeff": {
    "module_name": "snpeff",
    "general_stats_calls": [
      {
        "line_number": 253,
        "call_source": "        self.general_stats_addcols(self.snpeff_data, headers)",
        "headers": {
          "Change_rate": {
            "title": "Change rate",
            "scale": "RdYlBu-rev",
            "min": 0,
            "format": "{:,.0f}"
          },
          "Ts_Tv_ratio": {
            "title": "Ts/Tv",
            "description": "Transitions / Transversions ratio",
            "format": "{:,.3f}"
          },
          "Number_of_variants_before_filter": {
            "title": "M Variants",
            "description": "Number of variants before filter (millions)",
            "scale": "PuRd",
            "modify": "lambda x: x / 1000000",
            "min": 0,
            "format": "{:,.2f}",
            "suffix": "M"
          }
        },
        "namespace": null,
        "data_structure": "self.snpeff_data",
        "filename": "snpeff.py",
        "file_path": "multiqc/modules/snpeff/snpeff.py"
      }
    ]
  },
  "ngsbits": {
    "module_name": "ngsbits",
    "general_stats_calls": [
      {
        "line_number": 190,
        "call_source": "    module.general_stats_addcols(\n        mappingqc,\n        gen_stats_headers,\n        namespace=\"MappingQC\",\n    )",
        "headers": {
          "bases usable": {
            "_function_call": "copy"
          },
          "mapped read %": {
            "_function_call": "copy"
          },
          "on-target read %": {
            "_function_call": "copy"
          },
          "duplicate read %": {
            "_function_call": "copy"
          },
          "_dynamic_loop": "for_loop_construction"
        },
        "namespace": "MappingQC",
        "data_structure": "mappingqc",
        "filename": "mappingqc.py",
        "file_path": "multiqc/modules/ngsbits/mappingqc.py"
      },
      {
        "line_number": 85,
        "call_source": "    self.general_stats_addcols(samplegender_data, headers)",
        "headers": {
          "gender": {
            "title": "Predicted Gender",
            "description": "The predicted gender based on chromosome read ratios.",
            "namespace": "ngsbits",
            "scale": false
          },
          "reads_chry": {
            "title": "Reads on ChrY",
            "description": "The number of reads mapped to the Y chromosome.",
            "namespace": "ngsbits",
            "min": 0,
            "scale": "Blues",
            "format": "{:,.0f}"
          },
          "reads_chrx": {
            "title": "Reads on ChrX",
            "description": "The number of reads mapped to the X chromosome.",
            "namespace": "ngsbits",
            "min": 0,
            "scale": "Reds",
            "format": "{:,.0f}"
          },
          "ratio_chry_chrx": {
            "title": "ChrY/ChrX Ratio",
            "description": "The ratio of reads mapped to ChrY vs ChrX.",
            "namespace": "ngsbits",
            "min": 0,
            "format": "{:.4f}",
            "scale": "Purples"
          }
        },
        "namespace": null,
        "data_structure": "samplegender_data",
        "filename": "samplegender.py",
        "file_path": "multiqc/modules/ngsbits/samplegender.py"
      }
    ]
  },
  "minionqc": {
    "module_name": "minionqc",
    "general_stats_calls": [
      {
        "line_number": 60,
        "call_source": "        self.general_stats_addcols(self.minionqc_data, {\"total.reads\": headers[\"total.reads\"]})",
        "headers": {
          "total.reads": "headers['total.reads']"
        },
        "namespace": null,
        "data_structure": "self.minionqc_data",
        "filename": "minionqc.py",
        "file_path": "multiqc/modules/minionqc/minionqc.py"
      }
    ]
  },
  "trimmomatic": {
    "module_name": "trimmomatic",
    "general_stats_calls": [
      {
        "line_number": 60,
        "call_source": "        self.general_stats_addcols(\n            self.trimmomatic,\n            {\n                ColumnKey(\"dropped_pct\"): {\n                    \"title\": \"% Dropped\",\n                    \"description\": \"% Dropped reads\",\n                    \"max\": 100,\n                    \"min\": 0,\n                    \"suffix\": \"%\",\n                    \"scale\": \"OrRd\",\n                }\n            },\n        )",
        "headers": {
          "dropped_pct": {
            "title": "% Dropped",
            "description": "% Dropped reads",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "OrRd"
          }
        },
        "namespace": null,
        "data_structure": "self.trimmomatic",
        "filename": "trimmomatic.py",
        "file_path": "multiqc/modules/trimmomatic/trimmomatic.py"
      }
    ]
  },
  "hicexplorer": {
    "module_name": "hicexplorer",
    "general_stats_calls": [
      {
        "line_number": 320,
        "call_source": "        self.general_stats_addcols(data, headers)",
        "headers": {
          "Sequenced reads": {
            "title": "f'{config.read_count_prefix} Pairs'",
            "description": "f'Total number of read pairs ({config.read_count_desc})'",
            "shared_key": "read_count"
          },
          "Hi-c contacts": {
            "title": "% Used pairs",
            "max": 100,
            "min": 0,
            "modify": "lambda x: x * 100",
            "suffix": "%"
          },
          "Mapped": {
            "title": "% Mapped",
            "max": 100,
            "min": 0,
            "modify": "lambda x: (1 - x) * 100",
            "scale": "RdYlGn",
            "suffix": "%"
          },
          "Min rest. site distance": {
            "title": "Min RE dist",
            "description": "Minimum restriction site distance (bp)",
            "format": "{:.0f}",
            "suffix": " bp"
          },
          "max_distance_key": {
            "title": "Max RE dist",
            "description": "f'{max_distance_key} (bp)'",
            "format": "{:.0f}",
            "suffix": " bp"
          }
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "hicexplorer.py",
        "file_path": "multiqc/modules/hicexplorer/hicexplorer.py"
      }
    ]
  },
  "star": {
    "module_name": "star",
    "general_stats_calls": [
      {
        "line_number": 153,
        "call_source": "        self.general_stats_addcols(data_by_sample, headers)",
        "headers": {
          "total_reads": {
            "title": "Total reads",
            "description": "Number of input reads",
            "scale": "Blues",
            "shared_key": "read_count",
            "hidden": true
          },
          "mapped": {
            "title": "Aligned",
            "description": "Mapped reads",
            "scale": "PuRd",
            "shared_key": "read_count",
            "hidden": true
          },
          "mapped_percent": {
            "title": "Aligned",
            "description": "% Mapped reads",
            "suffix": "%",
            "scale": "PuRd"
          },
          "uniquely_mapped": {
            "title": "Uniq aligned",
            "description": "Uniquely mapped reads",
            "scale": "YlGn",
            "shared_key": "read_count",
            "hidden": true
          },
          "uniquely_mapped_percent": {
            "title": "Uniq aligned",
            "description": "% Uniquely mapped reads",
            "suffix": "%",
            "scale": "YlGn"
          },
          "multimapped": {
            "title": "Multimapped",
            "description": "Multiple mapped reads",
            "scale": "PuRd",
            "shared_key": "read_count",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "star.py",
        "file_path": "multiqc/modules/star/star.py"
      }
    ]
  },
  "flash": {
    "module_name": "flash",
    "general_stats_calls": [
      {
        "line_number": 176,
        "call_source": "        self.general_stats_addcols(data, headers)",
        "headers": {
          "combopairs": {
            "title": "Combined pairs",
            "description": "Num read pairs combined",
            "shared_key": "read_count",
            "hidden": true,
            "scale": false
          },
          "perccombo": {
            "title": "% Combined",
            "description": "% read pairs combined",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "PiYG"
          }
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "flash.py",
        "file_path": "multiqc/modules/flash/flash.py"
      }
    ]
  },
  "mgikit": {
    "module_name": "mgikit",
    "general_stats_calls": [
      {
        "line_number": 177,
        "call_source": "        self.general_stats_addcols(mgi_general_statistics, columns_headers)",
        "headers": {
          "Clusters": {
            "title": "Clusters",
            "description": "f'Total number of clusters for this sample ({config.read_count_desc})'",
            "scale": "Blues",
            "shared_key": "read_count",
            "suffix": "config.read_count_prefix",
            "format": "fmt"
          },
          "Yield": {
            "title": "Yield",
            "description": "f'Total number of bases for this sample ({config.base_count_desc})'",
            "scale": "Greens",
            "shared_key": "base_count",
            "suffix": "config.base_count_prefix",
            "format": "fmt"
          },
          "Yield ≥ Q30": {
            "title": "Yield ≥ Q30",
            "description": "f'Number of bases with a Phred score of 30 or higher, passing filter ({config.base_count_desc})'",
            "scale": "Greens",
            "shared_key": "base_count",
            "suffix": "config.base_count_prefix",
            "format": "fmt",
            "hidden": true
          },
          "% R1 Yield ≥ Q30": {
            "title": "R1 Yield ≥ Q30",
            "description": "Percent of bases in R1 with phred qualty score ≥ Q30",
            "scale": "Greens",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "hidden": true
          },
          "% R2 Yield ≥ Q30": {
            "title": "R2 Yield ≥ Q30",
            "description": "Percent of bases in R2 with phred qualty score ≥ Q30",
            "scale": "Greens",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "hidden": true
          },
          "% R3 Yield ≥ Q30": {
            "title": "R3 Yield ≥ Q30",
            "description": "Percent of bases in R3 with phred qualty score ≥ Q30",
            "scale": "Greens",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "hidden": true
          },
          "% Perfect Index": {
            "title": "Perfect Index",
            "description": "Percent of reads with perfect index (0 mismatches)",
            "scale": "Blues",
            "max": 100,
            "min": 0,
            "suffix": "%"
          },
          "Mb Total Yield": {
            "title": "Yield",
            "description": "Number of megabases",
            "scale": "Greens",
            "suffix": "Mb",
            "format": "fmt",
            "min": 0
          },
          "M Total Clusters": {
            "title": "Clusters",
            "description": "Total number of clusters for this lane (millions)",
            "scale": "Blues",
            "suffix": "M",
            "format": "fmt",
            "min": 0
          },
          "% bases ≥ Q30": {
            "title": "Bases ≥ Q30",
            "description": "Percent of bases with a Phred score of 30 or higher, passing filter",
            "scale": "Greens",
            "max": 100,
            "min": 0,
            "suffix": "%"
          },
          "Mean Quality": {
            "title": "Mean Quality",
            "description": "Average phred qualty score",
            "scale": "Oranges",
            "max": 40,
            "min": 0
          },
          "Frequency": {
            "title": "Frequency",
            "description": "The frequency of this barcode in the dataset",
            "min": 0
          }
        },
        "namespace": null,
        "data_structure": "mgi_general_statistics",
        "filename": "mgikit.py",
        "file_path": "multiqc/modules/mgikit/mgikit.py"
      }
    ]
  },
  "kaiju": {
    "module_name": "kaiju",
    "general_stats_calls": [
      {
        "line_number": 195,
        "call_source": "        self.general_stats_addcols(tdata, headers)",
        "headers": {
          "% Assigned": {
            "title": "% Reads assigned",
            "description": "f'Percentage of reads assigned at {general_taxo_rank} rank'",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "RdYlGn"
          },
          "assigned": {
            "title": "f'{config.read_count_prefix} Reads assigned'",
            "description": "'Number of reads assigned ({})  at {} rank'.format(config.read_count_desc, general_taxo_rank)",
            "modify": "lambda x: x * config.read_count_multiplier",
            "scale": "Blues"
          },
          "% Unclassified": {
            "title": "% Unclassified",
            "description": "Percentage of reads that were unclassified",
            "suffix": "%",
            "max": 100,
            "scale": "OrRd"
          }
        },
        "namespace": null,
        "data_structure": "tdata",
        "filename": "kaiju.py",
        "file_path": "multiqc/modules/kaiju/kaiju.py"
      }
    ]
  },
  "whatshap": {
    "module_name": "whatshap",
    "general_stats_calls": [
      {
        "line_number": 246,
        "call_source": "        self.general_stats_addcols(general, general_stats_headers)",
        "headers": {
          "frac_het_phased": {
            "title": "% Phased Variants",
            "description": "Fraction of heterozygous variants\n                                          that could be phased.\n                                        ",
            "format": "{:,.0f}",
            "suffix": "%",
            "min": 0,
            "max": 100,
            "modify": "lambda x: x * 100",
            "scale": "GnBu",
            "hidden": false
          },
          "bp_per_block_avg": {
            "title": "Avg bp per Block",
            "description": "Description of the distribution of non-singleton\n                                        block lengths, where the length of a block is the\n                                        number of base pairs it covers minus 1. That is, a\n                                        block with two variants at positions 2 and 5 has\n                                        length 3.",
            "format": "{:,.0f}",
            "scale": "Greens",
            "hidden": false
          },
          "block_n50": {
            "title": "NG50",
            "description": "The NG50 value of the distribution of the block\n                                        lengths. Interleaved blocks are cut in order to\n                                        avoid artificially inflating this value.",
            "format": "{:,.0f}",
            "scale": "Blues",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "general",
        "filename": "whatshap.py",
        "file_path": "multiqc/modules/whatshap/whatshap.py"
      }
    ]
  },
  "sexdeterrmine": {
    "module_name": "sexdeterrmine",
    "general_stats_calls": [
      {
        "line_number": 108,
        "call_source": "        self.general_stats_addcols(self.sexdet_data, headers)",
        "headers": {
          "RateErrX": {
            "title": "Err Rate X",
            "description": "Rate of Error for Chr X",
            "scale": "OrRd",
            "hidden": true,
            "shared_key": "snp_err_rate"
          },
          "RateErrY": {
            "title": "Err Rate Y",
            "description": "Rate of Error for Chr Y",
            "scale": "OrRd",
            "hidden": true,
            "shared_key": "snp_err_rate"
          },
          "RateX": {
            "title": "Rate X",
            "description": "Number of positions on Chromosome X vs Autosomal positions.",
            "scale": "PuBuGn",
            "shared_key": "snp_count"
          },
          "RateY": {
            "title": "Rate Y",
            "description": "Number of positions on Chromosome Y vs Autosomal positions.",
            "scale": "BuPu",
            "shared_key": "snp_count"
          }
        },
        "namespace": null,
        "data_structure": "self.sexdet_data",
        "filename": "sexdeterrmine.py",
        "file_path": "multiqc/modules/sexdeterrmine/sexdeterrmine.py"
      }
    ]
  },
  "xenome": {
    "module_name": "xenome",
    "general_stats_calls": [
      {
        "line_number": 213,
        "call_source": "        self.general_stats_addcols(table_data, headers)",
        "headers": {
          "_dynamic_loop": "for_loop_construction"
        },
        "namespace": null,
        "data_structure": "table_data",
        "filename": "xenome.py",
        "file_path": "multiqc/modules/xenome/xenome.py"
      }
    ]
  },
  "htseq": {
    "module_name": "htseq",
    "general_stats_calls": [
      {
        "line_number": 115,
        "call_source": "        self.general_stats_addcols(self.htseq_data, headers)",
        "headers": {
          "percent_assigned": {
            "title": "% Assigned",
            "description": "% Assigned reads",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn"
          },
          "assigned": {
            "title": "f'{config.read_count_prefix} Assigned'",
            "description": "f'Assigned Reads ({config.read_count_desc})'",
            "min": 0,
            "scale": "PuBu",
            "modify": "lambda x: float(x) * config.read_count_multiplier",
            "shared_key": "read_count"
          }
        },
        "namespace": null,
        "data_structure": "self.htseq_data",
        "filename": "htseq.py",
        "file_path": "multiqc/modules/htseq/htseq.py"
      }
    ]
  },
  "telseq": {
    "module_name": "telseq",
    "general_stats_calls": [
      {
        "line_number": 83,
        "call_source": "        self.general_stats_addcols(self.telseq_data, headers)",
        "headers": {
          "LENGTH_ESTIMATE": {
            "title": "Telomere Length",
            "description": "Telomere length computed by telseq",
            "min": 0,
            "scale": "PuRd"
          }
        },
        "namespace": null,
        "data_structure": "self.telseq_data",
        "filename": "telseq.py",
        "file_path": "multiqc/modules/telseq/telseq.py"
      }
    ]
  },
  "multivcfanalyzer": {
    "module_name": "multivcfanalyzer",
    "general_stats_calls": [
      {
        "line_number": 148,
        "call_source": "        self.general_stats_addcols(self.mvcf_data, headers)",
        "headers": {
          "SNP Calls (all)": {
            "title": "SNPs",
            "description": "Total number of non-reference calls",
            "scale": "RdBu",
            "shared_key": "snp_call",
            "format": "{:,.0f}"
          },
          "SNP Calls (hom)": {
            "title": "Hom SNPs",
            "description": "Total number of non-reference calls passing homozygosity thresholds",
            "scale": "RdYlGn",
            "hidden": true,
            "shared_key": "snp_call",
            "format": "{:,.0f}"
          },
          "SNP Calls (het)": {
            "title": "Het SNPs",
            "description": "Total number of non-reference calls not passing homozygosity thresholds",
            "scale": "YlGn",
            "hidden": true,
            "shared_key": "snp_call",
            "format": "{:,.0f}"
          },
          "Heterozygous SNP alleles (percent)": {
            "title": "% Hets",
            "description": "Percentage of heterozygous SNP alleles",
            "scale": "OrRd",
            "max": 100,
            "min": 0
          }
        },
        "namespace": null,
        "data_structure": "self.mvcf_data",
        "filename": "multivcfanalyzer.py",
        "file_path": "multiqc/modules/multivcfanalyzer/multivcfanalyzer.py"
      }
    ]
  },
  "sargasso": {
    "module_name": "sargasso",
    "general_stats_calls": [
      {
        "line_number": 137,
        "call_source": "        self.general_stats_addcols(self.sargasso_data, headers)",
        "headers": {
          "sargasso_percent_assigned": {
            "title": "% Assigned",
            "description": "Sargasso % Assigned reads",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn"
          },
          "Assigned-Reads": {
            "title": "f'{config.read_count_prefix} Assigned'",
            "description": "f'Sargasso Assigned reads ({config.read_count_desc})'",
            "min": 0,
            "scale": "PuBu",
            "modify": "lambda x: float(x) * config.read_count_multiplier",
            "shared_key": "read_count"
          }
        },
        "namespace": null,
        "data_structure": "self.sargasso_data",
        "filename": "sargasso.py",
        "file_path": "multiqc/modules/sargasso/sargasso.py"
      }
    ]
  },
  "filtlong": {
    "module_name": "filtlong",
    "general_stats_calls": [
      {
        "line_number": 106,
        "call_source": "        self.general_stats_addcols(self.filtlong_data, headers)",
        "headers": {
          "Target bases": {
            "title": "f'Target bases ({config.read_count_prefix})'",
            "description": "'Keep only the best reads up to this many total bases ({})'.format(config.read_count_desc)",
            "scale": "Greens",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier"
          },
          "Bases kept": {
            "title": "f'Bases kept ({config.read_count_prefix})'",
            "description": "f'Bases kept ({config.read_count_desc})'",
            "scale": "Purples",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "self.filtlong_data",
        "filename": "filtlong.py",
        "file_path": "multiqc/modules/filtlong/filtlong.py"
      }
    ]
  },
  "gopeaks": {
    "module_name": "gopeaks",
    "general_stats_calls": [
      {
        "line_number": 89,
        "call_source": "        self.general_stats_addcols(self.gopeaks_data, headers)",
        "headers": {
          "peak_counts": {
            "title": "Peak Counts",
            "description": "Number of peaks per sample",
            "min": 0,
            "scale": "YlGnBu",
            "format": "{:,.0f}"
          }
        },
        "namespace": null,
        "data_structure": "self.gopeaks_data",
        "filename": "gopeaks.py",
        "file_path": "multiqc/modules/gopeaks/gopeaks.py"
      }
    ]
  },
  "afterqc": {
    "module_name": "afterqc",
    "general_stats_calls": [
      {
        "line_number": 129,
        "call_source": "        self.general_stats_addcols(self.afterqc_data, headers)",
        "headers": {
          "pct_good_bases": {
            "title": "% Good Bases",
            "description": "Percent Good Bases",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "BuGn"
          },
          "good_reads": {
            "title": "f'{config.read_count_prefix} Good Reads'",
            "description": "f'Good Reads ({config.read_count_desc})'",
            "min": 0,
            "modify": "lambda x: x * config.read_count_multiplier",
            "scale": "GnBu",
            "shared_key": "read_count"
          },
          "total_reads": {
            "title": "f'{config.read_count_prefix} Total Reads'",
            "description": "f'Total Reads ({config.read_count_desc})'",
            "min": 0,
            "modify": "lambda x: x * config.read_count_multiplier",
            "scale": "Blues",
            "shared_key": "read_count"
          },
          "readlen": {
            "title": "Read Length",
            "description": "Read Length",
            "min": 0,
            "suffix": " bp",
            "format": "{:,.0f}",
            "scale": "YlGn"
          }
        },
        "namespace": null,
        "data_structure": "self.afterqc_data",
        "filename": "afterqc.py",
        "file_path": "multiqc/modules/afterqc/afterqc.py"
      }
    ]
  },
  "sourmash": {
    "module_name": "sourmash",
    "general_stats_calls": [
      {
        "line_number": 147,
        "call_source": "        self.general_stats_addcols(tdata, headers)",
        "headers": {
          "f'% Top {self.top_n}'": {
            "title": "f'% Top {self.top_n} Genomes'",
            "description": "f\"Percentage of sample that was classified as one of the top {self.top_n} genomes ({', '.join(self.gather_top_five_matches)})\"",
            "suffix": "%",
            "max": 100,
            "scale": "PuBu"
          },
          "% Unclassified": {
            "title": "% Unclassified",
            "description": "Percentage of sample that was unclassified",
            "suffix": "%",
            "max": 100,
            "scale": "OrRd"
          }
        },
        "namespace": null,
        "data_structure": "tdata",
        "filename": "gather.py",
        "file_path": "multiqc/modules/sourmash/gather.py"
      }
    ]
  },
  "sortmerna": {
    "module_name": "sortmerna",
    "general_stats_calls": [
      {
        "line_number": 70,
        "call_source": "        self.general_stats_addcols(self.sortmerna, headers)",
        "headers": {
          "rRNA_pct": {
            "title": "tab_header",
            "description": "Percentage of reads matched to a SortMeRNA database",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "OrRd"
          }
        },
        "namespace": null,
        "data_structure": "self.sortmerna",
        "filename": "sortmerna.py",
        "file_path": "multiqc/modules/sortmerna/sortmerna.py"
      }
    ]
  },
  "purple": {
    "module_name": "purple",
    "general_stats_calls": [
      {
        "line_number": 95,
        "call_source": "        self.general_stats_addcols(data_by_sample, gen_stat_cols)",
        "headers": {
          "_unknown_node_type": "DictComp"
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "purple.py",
        "file_path": "multiqc/modules/purple/purple.py"
      }
    ]
  },
  "featurecounts": {
    "module_name": "featurecounts",
    "general_stats_calls": [
      {
        "line_number": 163,
        "call_source": "        self.general_stats_addcols(\n            data_by_sample,\n            {\n                ColumnKey(\"Assigned\"): {\n                    \"title\": \"Assigned\",\n                    \"description\": f\"Assigned reads ({config.read_count_desc})\",\n                    \"scale\": \"PuBu\",\n                    \"shared_key\": \"read_count\",\n                    \"hidden\": True,\n                },\n                ColumnKey(\"percent_assigned\"): {\n                    \"title\": \"Assigned\",\n                    \"description\": \"% Assigned reads\",\n                    \"max\": 100,\n                    \"min\": 0,\n                    \"suffix\": \"%\",\n                    \"scale\": \"RdYlGn\",\n                },\n            },\n        )",
        "headers": {
          "Assigned": {
            "title": "Assigned",
            "description": "f'Assigned reads ({config.read_count_desc})'",
            "scale": "PuBu",
            "shared_key": "read_count",
            "hidden": true
          },
          "percent_assigned": {
            "title": "Assigned",
            "description": "% Assigned reads",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn"
          }
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "featurecounts.py",
        "file_path": "multiqc/modules/featurecounts/featurecounts.py"
      }
    ]
  },
  "gatk": {
    "module_name": "gatk",
    "general_stats_calls": [
      {
        "line_number": 78,
        "call_source": "    module.general_stats_addcols(data, headers, \"GATK VariantEval\")",
        "headers": {
          "_function_based": "dict",
          "known_titv": {
            "title": "TiTV ratio (known)",
            "description": "f\"TiTV ratio from variants found in '{titv_ref}'\"",
            "min": 0,
            "scale": "Blues",
            "shared_key": "titv_ratio"
          },
          "novel_titv": {
            "title": "TiTV ratio (novel)",
            "description": "f\"TiTV ratio from variants NOT found in '{titv_ref}'\"",
            "min": 0,
            "scale": "Blues",
            "shared_key": "titv_ratio"
          },
          "called_titv": {
            "title": "TiTV ratio (called)",
            "description": "f\"TiTV ratio from variants found in '{titv_ref}'\"",
            "min": 0,
            "scale": "Blues",
            "shared_key": "titv_ratio"
          },
          "filtered_titv": {
            "title": "TiTV ratio (filtered)",
            "description": "f\"TiTV ratio from variants NOT found in '{titv_ref}'\"",
            "min": 0,
            "scale": "Blues",
            "shared_key": "titv_ratio"
          }
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "varianteval.py",
        "file_path": "multiqc/modules/gatk/varianteval.py"
      },
      {
        "line_number": 67,
        "call_source": "        self.general_stats_addcols(self.general_stats_data, self.general_stats_headers)",
        "headers": {
          "_unknown_node_type": "Attribute"
        },
        "namespace": null,
        "data_structure": "self.general_stats_data",
        "filename": "gatk.py",
        "file_path": "multiqc/modules/gatk/gatk.py"
      }
    ]
  },
  "varscan2": {
    "module_name": "varscan2",
    "general_stats_calls": [
      {
        "line_number": 209,
        "call_source": "        self.general_stats_addcols(self.varscan2_data, headers)",
        "headers": {
          "variant_reported_snps": {
            "title": "SNPs reported",
            "description": "Total number of SNPs reported.",
            "min": 0,
            "scale": "Spectral",
            "format": "{:,.0f}",
            "shared_key": "snps"
          },
          "variant_reported_indels": {
            "title": "INDELs reported",
            "description": "Total number INDELs reported.",
            "min": 0,
            "scale": "Spectral",
            "format": "{:,.0f}",
            "shared_key": "indels"
          },
          "variant_reported_total": {
            "title": "Variants reported",
            "description": "Total number of variants reported.",
            "min": 0,
            "scale": "Spectral",
            "format": "{:,.0f}",
            "shared_key": "variants",
            "hidden": true
          },
          "variant_snps": {
            "title": "SNPs",
            "description": "Total number of SNPs detected",
            "min": 0,
            "scale": "BrBG",
            "format": "{:,.0f}",
            "shared_key": "snps",
            "hidden": true
          },
          "variant_indels": {
            "title": "INDELs",
            "description": "Total number of INDELs detected",
            "min": 0,
            "scale": "BrBG",
            "format": "{:,.0f}",
            "shared_key": "indels",
            "hidden": true
          },
          "variant_total": {
            "title": "Variants",
            "description": "Total number of variants detected",
            "min": 0,
            "scale": "BrBG",
            "format": "{:,.0f}",
            "shared_key": "variants",
            "hidden": true
          },
          "failed_strand_filter": {
            "title": "Failed Strand Filter",
            "description": "Total number variants failing the strand-filter.",
            "min": 0,
            "scale": "YlOrBr",
            "format": "{:,.0f}",
            "shared_key": "variants",
            "hidden": true
          },
          "bases_in_pileup": {
            "title": "f'{config.base_count_prefix} Bases in Pileup'",
            "description": "Number of bases in pileup input for VarScan2 ()",
            "scale": "Greens",
            "modify": "lambda x: x * config.base_count_multiplier",
            "shared_key": "base_count",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "self.varscan2_data",
        "filename": "varscan2.py",
        "file_path": "multiqc/modules/varscan2/varscan2.py"
      }
    ]
  },
  "sequali": {
    "module_name": "sequali",
    "general_stats_calls": [
      {
        "line_number": 275,
        "call_source": "        self.general_stats_addcols(general_stats, headers)",
        "headers": {
          "sequali_gc_percentage": {
            "title": "GC %",
            "description": "Average GC content %",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "format": "{:.2f}",
            "scale": "PuOr"
          },
          "sequali_mean_sequence_length": {
            "title": "Mean length",
            "description": "Geometric mean of all lengths",
            "min": 0,
            "suffix": " bp",
            "format": "{:,.1f}",
            "scale": "Greens"
          },
          "sequali_total_reads": {
            "title": "Total reads",
            "description": "f'Total Sequences ({multiqc.config.read_count_desc})'",
            "shared_key": "read_count",
            "scale": "Purples"
          },
          "sequali_duplication_percentage": {
            "title": "% est. dups.",
            "description": "Estimated duplication percentage",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "format": "{:.2f}",
            "scale": "Reds"
          },
          "sequali_insert_size_estimate": {
            "title": "Insert Size",
            "description": "Estimated insert size based on median of histogram",
            "min": 0,
            "suffix": " bp",
            "format": "{:,}",
            "scale": "Blues"
          }
        },
        "namespace": null,
        "data_structure": "general_stats",
        "filename": "sequali.py",
        "file_path": "multiqc/modules/sequali/sequali.py"
      }
    ]
  },
  "quast": {
    "module_name": "quast",
    "general_stats_calls": [
      {
        "line_number": 200,
        "call_source": "        self.general_stats_addcols(self.quast_data, headers)",
        "headers": {
          "N50": {
            "title": "f'N50 ({self._contig_length_suffix})'",
            "description": "N50 is the contig length such that using longer or equal length contigs produces half (50%) of the bases of the assembly (kilo base pairs)",
            "min": 0,
            "suffix": "self._contig_length_suffix",
            "scale": "RdYlGn",
            "modify": "lambda x: x * self._contig_length_multiplier"
          },
          "Total length": {
            "title": "f'Assembly Length ({self._total_length_suffix})'",
            "description": "f'The total number of bases in the assembly ({self._total_length_suffix}).'",
            "min": 0,
            "suffix": "self._total_length_suffix",
            "scale": "YlGn",
            "modify": "lambda x: x * self._total_length_multiplier"
          }
        },
        "namespace": null,
        "data_structure": "self.quast_data",
        "filename": "quast.py",
        "file_path": "multiqc/modules/quast/quast.py"
      }
    ]
  },
  "optitype": {
    "module_name": "optitype",
    "general_stats_calls": [
      {
        "line_number": 111,
        "call_source": "        self.general_stats_addcols(self.optitype_data, headers)",
        "headers": {
          "A1": {
            "title": "HLA-A1",
            "description": "First HLA-A allele",
            "scale": false
          },
          "A2": {
            "title": "HLA-A2",
            "description": "Second HLA-A allele",
            "scale": false,
            "hidden": true
          },
          "B1": {
            "title": "HLA-B1",
            "description": "First HLA-B allele",
            "scale": false
          },
          "B2": {
            "title": "HLA-B2",
            "description": "Second HLA-B allele",
            "scale": false,
            "hidden": true
          },
          "C1": {
            "title": "HLA-C1",
            "description": "First HLA-C allele",
            "scale": false
          },
          "C2": {
            "title": "HLA-C2",
            "description": "Second HLA-C allele",
            "scale": false,
            "hidden": true
          },
          "Reads": {
            "title": "Reads",
            "description": "Number of reads covering the HLA",
            "scale": "YlGnBu",
            "hidden": true,
            "format": "{:,.0f}"
          },
          "Objective": {
            "title": "Objective Score",
            "description": "Score of the objective function for the prediction.",
            "scale": "BuGn",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "self.optitype_data",
        "filename": "optitype.py",
        "file_path": "multiqc/modules/optitype/optitype.py"
      }
    ]
  },
  "porechop": {
    "module_name": "porechop",
    "general_stats_calls": [
      {
        "line_number": 211,
        "call_source": "        self.general_stats_addcols(self.porechop_data, headers)",
        "headers": {
          "Input Reads": {
            "title": "f'Input Reads ({config.read_count_prefix})'",
            "description": "f'Number of reads loaded into Porechop ({config.read_count_prefix})'",
            "scale": "Greens",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier"
          },
          "Start Trimmed": {
            "title": "f'Start Trimmed ({config.read_count_prefix})'",
            "description": "'Number of reads that had adapters trimmed from the start ({})'.format(config.read_count_prefix)",
            "scale": "Purples",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "hidden": true
          },
          "Start Trimmed Percent": {
            "title": "Start Trimmed",
            "description": "Percent of reads that had adapters trimmed from the start",
            "suffix": "%",
            "max": 100,
            "scale": "RdYlGn"
          },
          "End Trimmed": {
            "title": "f'End Trimmed ({config.read_count_prefix})'",
            "description": "'Number of reads that had adapters trimmed from the end ({})'.format(config.read_count_prefix)",
            "scale": "Purples",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "hidden": true
          },
          "End Trimmed Percent": {
            "title": "End Trimmed",
            "description": "Percent of reads that had adapters trimmed from the end",
            "suffix": "%",
            "max": 100,
            "scale": "RdYlGn"
          },
          "Middle Split": {
            "title": "f'Middle Split ({config.read_count_prefix})'",
            "description": "f'Number of reads split based on middle adapters ({config.read_count_prefix})'",
            "scale": "Purples",
            "shared_key": "read_count",
            "modify": "lambda x: x * config.read_count_multiplier",
            "hidden": true
          },
          "Middle Split Percent": {
            "title": "Middle Split",
            "description": "Percent of reads that were split based on middle adapters",
            "suffix": "%",
            "max": 100,
            "scale": "RdYlGn"
          }
        },
        "namespace": null,
        "data_structure": "self.porechop_data",
        "filename": "porechop.py",
        "file_path": "multiqc/modules/porechop/porechop.py"
      }
    ]
  },
  "dragen": {
    "module_name": "dragen",
    "general_stats_calls": [
      {
        "line_number": 102,
        "call_source": "        self.general_stats_addcols(data_by_sample, genstats_headers, namespace=NAMESPACE)",
        "headers": {
          "_debug_info": "variable_name:genstats_headers, call_line:102, found_function:True"
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "mapping_metrics.py",
        "file_path": "multiqc/modules/dragen/mapping_metrics.py"
      },
      {
        "line_number": 556,
        "call_source": "        self.general_stats_addcols(gen_data, gen_headers, namespace=NAMESPACE)",
        "headers": {
          "_debug_info": "variable_name:gen_headers, call_line:556, found_function:True"
        },
        "namespace": null,
        "data_structure": "gen_data",
        "filename": "coverage_metrics.py",
        "file_path": "multiqc/modules/dragen/coverage_metrics.py"
      },
      {
        "line_number": 44,
        "call_source": "        self.general_stats_addcols(data_by_sample, headers, namespace=NAMESPACE)",
        "headers": {
          "Ploidy estimation": {
            "title": "Sex",
            "description": "Sex chromosome ploidy estimation (XX, XY, X0, 00, etc.)",
            "scale": "Set3"
          }
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "ploidy_estimation_metrics.py",
        "file_path": "multiqc/modules/dragen/ploidy_estimation_metrics.py"
      },
      {
        "line_number": 57,
        "call_source": "        self.general_stats_addcols(vc_data_by_sample, gen_stats_headers, namespace=NAMESPACE)",
        "headers": {
          "_debug_info": "variable_name:gen_stats_headers, call_line:57, found_function:True"
        },
        "namespace": null,
        "data_structure": "vc_data_by_sample",
        "filename": "vc_metrics.py",
        "file_path": "multiqc/modules/dragen/vc_metrics.py"
      },
      {
        "line_number": 57,
        "call_source": "        self.general_stats_addcols(data_by_sample, gen_stats_headers)",
        "headers": {
          "_debug_info": "variable_name:gen_stats_headers, call_line:57, found_function:True"
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "sc_atac_metrics.py",
        "file_path": "multiqc/modules/dragen/sc_atac_metrics.py"
      },
      {
        "line_number": 58,
        "call_source": "        self.general_stats_addcols(data_by_sample, gen_stats_headers)",
        "headers": {
          "_debug_info": "variable_name:gen_stats_headers, call_line:58, found_function:True"
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "sc_rna_metrics.py",
        "file_path": "multiqc/modules/dragen/sc_rna_metrics.py"
      }
    ]
  },
  "bowtie1": {
    "module_name": "bowtie1",
    "general_stats_calls": [
      {
        "line_number": 113,
        "call_source": "        self.general_stats_addcols(self.bowtie_data, headers)",
        "headers": {
          "reads_aligned_percentage": {
            "title": "% Aligned",
            "description": "% reads with at least one reported alignment",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn"
          },
          "reads_aligned": {
            "title": "f'{config.read_count_prefix} Aligned'",
            "description": "f'reads with at least one reported alignment ({config.read_count_desc})'",
            "min": 0,
            "scale": "PuRd",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count"
          }
        },
        "namespace": null,
        "data_structure": "self.bowtie_data",
        "filename": "bowtie1.py",
        "file_path": "multiqc/modules/bowtie1/bowtie1.py"
      }
    ]
  },
  "ganon": {
    "module_name": "ganon",
    "general_stats_calls": [
      {
        "line_number": 248,
        "call_source": "        self.general_stats_addcols(data_by_sample, general_stats_headers)",
        "headers": {
          "_dynamic_loop": "for_loop_construction"
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "ganon.py",
        "file_path": "multiqc/modules/ganon/ganon.py"
      }
    ]
  },
  "samblaster": {
    "module_name": "samblaster",
    "general_stats_calls": [
      {
        "line_number": 44,
        "call_source": "        self.general_stats_addcols(self.samblaster_data, headers)",
        "headers": {
          "pct_dups": {
            "title": "% Dups",
            "description": "Percent Duplication",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "OrRd"
          }
        },
        "namespace": null,
        "data_structure": "self.samblaster_data",
        "filename": "samblaster.py",
        "file_path": "multiqc/modules/samblaster/samblaster.py"
      }
    ]
  },
  "seqyclean": {
    "module_name": "seqyclean",
    "general_stats_calls": [
      {
        "line_number": 161,
        "call_source": "        self.general_stats_addcols(self.seqyclean_data, headers)",
        "headers": {
          "Perc_Kept": {
            "title": "% Kept",
            "description": "The percentage of reads remaining after cleaning",
            "scale": "YlGn",
            "suffix": "%",
            "max": 100,
            "min": 0
          },
          "PercentageKept": {
            "title": "% Kept",
            "description": "The percentage of reads remaining after cleaning",
            "scale": "YlGn",
            "suffix": "%",
            "max": 100,
            "min": 0
          }
        },
        "namespace": null,
        "data_structure": "self.seqyclean_data",
        "filename": "seqyclean.py",
        "file_path": "multiqc/modules/seqyclean/seqyclean.py"
      }
    ]
  },
  "mtnucratio": {
    "module_name": "mtnucratio",
    "general_stats_calls": [
      {
        "line_number": 112,
        "call_source": "        self.general_stats_addcols(self.mtnuc_data, headers)",
        "headers": {
          "mt_cov_avg": {
            "title": "MT genome coverage",
            "description": "Average coverage (X) on mitochondrial genome.",
            "min": 0,
            "scale": "OrRd",
            "suffix": " X",
            "hidden": true
          },
          "nuc_cov_avg": {
            "title": "Genome coverage",
            "description": "Average coverage (X) on nuclear genome.",
            "min": 0,
            "scale": "GnBu",
            "suffix": " X",
            "hidden": true
          },
          "mt_nuc_ratio": {
            "title": "MT to Nuclear Ratio",
            "description": "Mitochondrial to nuclear reads ratio (MTNUC)",
            "min": 0,
            "max": 100,
            "scale": "RdYlGn-rev"
          },
          "nucreads": {
            "title": "f'{config.read_count_prefix} Genome reads'",
            "description": "f'Reads on the nuclear genome ({config.read_count_desc})'",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "scale": "BuPu",
            "hidden": true
          },
          "mtreads": {
            "title": "f'{config.read_count_prefix} MT genome reads'",
            "description": "f'Reads on the mitochondrial genome ({config.read_count_desc})'",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "scale": "OrRd",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "self.mtnuc_data",
        "filename": "mtnucratio.py",
        "file_path": "multiqc/modules/mtnucratio/mtnucratio.py"
      }
    ]
  },
  "peddy": {
    "module_name": "peddy",
    "general_stats_calls": [
      {
        "line_number": 183,
        "call_source": "        self.general_stats_addcols(self.peddy_data, headers)",
        "headers": {
          "family_id": {
            "title": "Family ID",
            "hidden": "True if all([v == family_ids[0] for v in family_ids]) else False"
          },
          "ancestry-prediction": {
            "title": "Ancestry",
            "description": "Ancestry Prediction"
          },
          "ancestry-prob_het_check": {
            "title": "P(Ancestry)",
            "description": "Probability predicted ancestry is correct."
          },
          "sex_het_ratio": {
            "title": "Sex / Het Ratio"
          },
          "error_sex_check": {
            "title": "Correct Sex",
            "description": "Displays False if error in sample sex prediction"
          },
          "predicted_sex_sex_check": {
            "title": "Sex",
            "description": "Predicted sex"
          }
        },
        "namespace": null,
        "data_structure": "self.peddy_data",
        "filename": "peddy.py",
        "file_path": "multiqc/modules/peddy/peddy.py"
      }
    ]
  },
  "bbmap": {
    "module_name": "bbmap",
    "general_stats_calls": [
      {
        "line_number": 140,
        "call_source": "            self.general_stats_addcols(data, headers)",
        "headers": {
          "pct_q30": {
            "title": "% Q30 bases",
            "description": "BBMap qchist - Percentage of bases with phred quality score >= 30",
            "suffix": " %",
            "scale": "RdYlGn",
            "format": "{:,.2f}",
            "min": 0,
            "max": 100
          }
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "bbmap.py",
        "file_path": "multiqc/modules/bbmap/bbmap.py"
      }
    ]
  },
  "fastqc": {
    "module_name": "fastqc",
    "general_stats_calls": [
      {
        "line_number": 478,
        "call_source": "        self.general_stats_addcols(\n            data_by_sample={\n                s_name: {ColumnKey(k): v for k, v in metrics.__dict__.items()}\n                for s_name, metrics in data_by_sample.items()\n            },\n            headers={\n                ColumnKey(\"percent_duplicates\"): {\n                    \"title\": \"Dups\",\n                    \"description\": \"% duplicate reads\",\n                    \"max\": 100,\n                    \"min\": 0,\n                    \"suffix\": \"%\",\n                    \"scale\": \"RdYlGn-rev\",\n                },\n                ColumnKey(\"percent_gc\"): {\n                    \"title\": \"GC\",\n                    \"description\": \"Average % GC content\",\n                    \"max\": 100,\n                    \"min\": 0,\n                    \"suffix\": \"%\",\n                    \"scale\": \"PuRd\",\n                    \"format\": \"{:,.1f}\",\n                },\n                ColumnKey(\"avg_sequence_length\"): {\n                    \"title\": \"Avg len\",\n                    \"description\": \"Average read length\",\n                    \"min\": 0,\n                    \"suffix\": \" bp\",\n                    \"scale\": \"RdYlGn\",\n                    \"format\": \"{:,.0f}\",\n                    \"hidden\": True,\n                },\n                ColumnKey(\"median_sequence_length\"): {\n                    \"title\": \"Median len\",\n                    \"description\": \"Median read length\",\n                    \"min\": 0,\n                    \"suffix\": \" bp\",\n                    \"scale\": \"RdYlGn\",\n                    \"format\": \"{:,.0f}\",\n                    \"hidden\": hide_seq_length,\n                },\n                ColumnKey(\"percent_fails\"): {\n                    \"title\": \"Failed\",\n                    \"description\": \"Percentage of modules failed in FastQC report (includes those not plotted here)\",\n                    \"max\": 100,\n                    \"min\": 0,\n                    \"suffix\": \"%\",\n                    \"scale\": \"Reds\",\n                    \"format\": \"{:,.0f}\",\n                    \"hidden\": True,\n                },\n                ColumnKey(\"total_sequences\"): {\n                    \"title\": \"Seqs\",\n                    \"shared_key\": \"read_count\",\n                    \"description\": f\"Total sequences ({config.read_count_desc})\",\n                    \"min\": 0,\n                    \"scale\": \"Blues\",\n                },\n            },\n            group_samples_config=SampleGroupingConfig(\n                cols_to_sum=[ColumnKey(\"total_sequences\")],\n                cols_to_weighted_average=[\n                    (ColumnKey(\"percent_gc\"), ColumnKey(\"total_sequences\")),\n                    (ColumnKey(\"avg_sequence_length\"), ColumnKey(\"total_sequences\")),\n                    (ColumnKey(\"percent_duplicates\"), ColumnKey(\"total_sequences\")),\n                    (ColumnKey(\"median_sequence_length\"), ColumnKey(\"total_sequences\")),\n                ],\n                extra_functions=[_summarize_statues],\n            ),\n        )",
        "headers": {
          "percent_duplicates": {
            "title": "Dups",
            "description": "% duplicate reads",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn-rev"
          },
          "percent_gc": {
            "title": "GC",
            "description": "Average % GC content",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "PuRd",
            "format": "{:,.1f}"
          },
          "avg_sequence_length": {
            "title": "Avg len",
            "description": "Average read length",
            "min": 0,
            "suffix": " bp",
            "scale": "RdYlGn",
            "format": "{:,.0f}",
            "hidden": true
          },
          "median_sequence_length": {
            "title": "Median len",
            "description": "Median read length",
            "min": 0,
            "suffix": " bp",
            "scale": "RdYlGn",
            "format": "{:,.0f}",
            "hidden": "hide_seq_length"
          },
          "percent_fails": {
            "title": "Failed",
            "description": "Percentage of modules failed in FastQC report (includes those not plotted here)",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "Reds",
            "format": "{:,.0f}",
            "hidden": true
          },
          "total_sequences": {
            "title": "Seqs",
            "shared_key": "read_count",
            "description": "f'Total sequences ({config.read_count_desc})'",
            "min": 0,
            "scale": "Blues"
          }
        },
        "namespace": null,
        "data_structure": null,
        "filename": "fastqc.py",
        "file_path": "multiqc/modules/fastqc/fastqc.py"
      }
    ]
  },
  "kraken": {
    "module_name": "kraken",
    "general_stats_calls": [
      {
        "line_number": 216,
        "call_source": "        self.general_stats_addcols(table_pct_by_sample, headers)",
        "headers": {
          "_function_based": "dict",
          "pct_unclassified": {
            "title": "Unclassified",
            "description": "Percentage of reads that were unclassified",
            "suffix": "%",
            "max": 100,
            "scale": "OrRd"
          },
          "pct_top_one": {
            "title": "top_one",
            "description": "f'Percentage of reads that were the top {top_rank_name.lower()} over all samples ({top_taxa[0]})'",
            "suffix": "%",
            "max": 100,
            "scale": "PuBuGn"
          },
          "pct_top_n": {
            "title": "f'Top {MultiqcModule.TOP_N} {top_rank_name.lower()}'",
            "description": "f\"Percentage of reads that were classified by one of the top-{MultiqcModule.TOP_N} {top_rank_name.lower()} ({', '.join(top_taxa)})\"",
            "suffix": "%",
            "max": 100,
            "scale": "PuBu"
          }
        },
        "namespace": null,
        "data_structure": "table_pct_by_sample",
        "filename": "kraken.py",
        "file_path": "multiqc/modules/kraken/kraken.py"
      }
    ]
  },
  "bcl2fastq": {
    "module_name": "bcl2fastq",
    "general_stats_calls": [
      {
        "line_number": 445,
        "call_source": "        self.general_stats_addcols(data, headers)",
        "headers": {
          "total": {
            "title": "Clusters",
            "description": "f'Total number of reads for this sample as determined by bcl2fastq demultiplexing ({config.read_count_desc})'",
            "scale": "Blues",
            "shared_key": "read_count"
          },
          "yieldQ30": {
            "title": "Yield ≥ Q30",
            "description": "f'Number of bases with a Phred score of 30 or higher ({config.base_count_desc})'",
            "scale": "Greens",
            "shared_key": "base_count"
          },
          "_dynamic_loop": "for_loop_construction",
          "perfectPercent": {
            "title": "Perfect index",
            "description": "Percent of reads with perfect index (0 mismatches)",
            "max": 100,
            "min": 0,
            "scale": "RdYlGn",
            "suffix": "%"
          }
        },
        "namespace": null,
        "data_structure": "data",
        "filename": "bcl2fastq.py",
        "file_path": "multiqc/modules/bcl2fastq/bcl2fastq.py"
      }
    ]
  },
  "kallisto": {
    "module_name": "kallisto",
    "general_stats_calls": [
      {
        "line_number": 126,
        "call_source": "        self.general_stats_addcols(kallisto_data, headers)",
        "headers": {
          "fragment_length": {
            "title": "Frag Length",
            "description": "Estimated average fragment length",
            "min": 0,
            "suffix": "bp",
            "scale": "RdYlGn"
          },
          "percent_aligned": {
            "title": "% Aligned",
            "description": "% processed reads that were pseudoaligned",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn"
          },
          "pseudoaligned_reads": {
            "title": "f'{config.read_count_prefix} Aligned'",
            "description": "f'Pseudoaligned reads ({config.read_count_desc})'",
            "min": 0,
            "scale": "PuRd",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count"
          }
        },
        "namespace": null,
        "data_structure": "kallisto_data",
        "filename": "kallisto.py",
        "file_path": "multiqc/modules/kallisto/kallisto.py"
      }
    ]
  },
  "methylqa": {
    "module_name": "methylqa",
    "general_stats_calls": [
      {
        "line_number": 108,
        "call_source": "        self.general_stats_addcols(self.methylqa_data, headers)",
        "headers": {
          "coverage": {
            "title": "Fold Coverage",
            "min": 0,
            "suffix": "X",
            "scale": "YlGn"
          }
        },
        "namespace": null,
        "data_structure": "self.methylqa_data",
        "filename": "methylqa.py",
        "file_path": "multiqc/modules/methylqa/methylqa.py"
      }
    ]
  },
  "samtools": {
    "module_name": "samtools",
    "general_stats_calls": [
      {
        "line_number": 107,
        "call_source": "        module.general_stats_addcols(val_by_metric_by_sample, general_stats_headers, namespace=\"markdup\")",
        "headers": {
          "duplicate_fraction": {
            "title": "Duplicates",
            "description": "The percent of all types of duplicate reads",
            "min": 0,
            "max": 100,
            "modify": "lambda x: x * 100",
            "suffix": "%",
            "scale": "OrRd"
          },
          "estimated_library_size": {
            "title": "Est. library size",
            "description": "The estimated library size after de-duplication.",
            "min": 0,
            "format": "{:,d}"
          }
        },
        "namespace": "markdup",
        "data_structure": "val_by_metric_by_sample",
        "filename": "markdup.py",
        "file_path": "multiqc/modules/samtools/markdup.py"
      },
      {
        "line_number": 81,
        "call_source": "        module.general_stats_addcols(samtools_rmdup, general_stats_headers, namespace=\"rmdup\")",
        "headers": {
          "pct_dups": {
            "title": "Duplicates",
            "description": "Percent of duplicate alignments",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "OrRd"
          }
        },
        "namespace": "rmdup",
        "data_structure": "samtools_rmdup",
        "filename": "rmdup.py",
        "file_path": "multiqc/modules/samtools/rmdup.py"
      },
      {
        "line_number": 130,
        "call_source": "        module.general_stats_addcols(table_data, general_stats_headers, namespace=\"coverage\")",
        "headers": {
          "numreads": {
            "title": "Reads",
            "description": "Total number of mapped reads",
            "shared_key": "read_count",
            "scale": "RdYlGn"
          },
          "covbases": {
            "title": "Bases",
            "description": "Total number of mapped base pairs",
            "shared_key": "base_count",
            "scale": "Blues"
          },
          "coverage": {
            "title": "Coverage",
            "description": "Percentage of region covered with reads",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "YlGn"
          },
          "meandepth": {
            "title": "Mean depth",
            "description": "Mean depth of coverage",
            "min": 0,
            "suffix": "x",
            "scale": "RdYlGn"
          },
          "meanbaseq": {
            "title": "Mean BQ",
            "description": "Mean base quality",
            "min": 0,
            "scale": "Blues"
          },
          "meanmapq": {
            "title": "Mean MQ",
            "description": "Mean mapping quality",
            "min": 0,
            "max": 60,
            "scale": "RdYlGn"
          }
        },
        "namespace": "coverage",
        "data_structure": "table_data",
        "filename": "coverage.py",
        "file_path": "multiqc/modules/samtools/coverage.py"
      },
      {
        "line_number": 138,
        "call_source": "        module.general_stats_addcols(samtools_stats, general_stats_headers, namespace=\"stats\")",
        "headers": {
          "error_rate": {
            "title": "Error rate",
            "description": "Error rate: mismatches (NM) / bases mapped (CIGAR)",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "OrRd",
            "format": "{:,.2f}",
            "modify": "lambda x: x * 100.0"
          },
          "non-primary_alignments": {
            "title": "Non-primary",
            "description": "f'Non-primary alignments ({config.read_count_desc})'",
            "scale": "PuBu",
            "shared_key": "read_count"
          },
          "reads_mapped": {
            "title": "Reads mapped",
            "description": "f'Reads mapped in the bam file ({config.read_count_desc})'",
            "shared_key": "read_count"
          },
          "reads_mapped_percent": {
            "title": "% Mapped",
            "description": "% Mapped reads",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn"
          },
          "reads_properly_paired_percent": {
            "title": "% Proper pairs",
            "description": "% Properly paired reads",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn",
            "hidden": "True if max([x['reads_mapped_and_paired'] for x in samtools_stats.values()]) == 0 else False"
          },
          "reads_MQ0_percent": {
            "title": "% MapQ 0 reads",
            "description": "% of reads that are ambiguously placed (MapQ=0)",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "OrRd",
            "hidden": true
          },
          "raw_total_sequences": {
            "title": "Total seqs",
            "description": "f'Total sequences in the bam file ({config.read_count_desc})'",
            "shared_key": "read_count"
          },
          "insert_size_average": {
            "title": "Mean insert",
            "description": "Average insert size",
            "suffix": "bp",
            "format": "{:,.1f}",
            "scale": "Oranges",
            "hidden": true
          }
        },
        "namespace": "stats",
        "data_structure": "samtools_stats",
        "filename": "stats.py",
        "file_path": "multiqc/modules/samtools/stats.py"
      },
      {
        "line_number": 62,
        "call_source": "        module.general_stats_addcols(samtools_flagstat, general_stats_headers, namespace=\"flagstat\")",
        "headers": {
          "flagstat_total": {
            "title": "Reads",
            "description": "f'Total reads in the bam file ({config.read_count_desc})'",
            "shared_key": "read_count",
            "hidden": true
          },
          "mapped_passed": {
            "title": "Reads mapped",
            "description": "f'Reads mapped in the bam file ({config.read_count_desc})'",
            "shared_key": "read_count"
          },
          "mapped_passed_pct": {
            "title": "% Reads mapped",
            "description": "% Reads mapped in the bam file",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "RdYlGn",
            "hidden": true
          }
        },
        "namespace": "flagstat",
        "data_structure": "samtools_flagstat",
        "filename": "flagstat.py",
        "file_path": "multiqc/modules/samtools/flagstat.py"
      },
      {
        "line_number": 126,
        "call_source": "        module.general_stats_addcols(samtools_ampliconclip, general_stats_headers, namespace=\"ampliconclip\")",
        "headers": {
          "_unknown_node_type": "DictComp"
        },
        "namespace": "ampliconclip",
        "data_structure": "samtools_ampliconclip",
        "filename": "ampliconclip.py",
        "file_path": "multiqc/modules/samtools/ampliconclip.py"
      }
    ]
  },
  "checkm": {
    "module_name": "checkm",
    "general_stats_calls": [
      {
        "line_number": 70,
        "call_source": "        self.general_stats_addcols(data_by_sample, headers)",
        "headers": {
          "Completeness": {
            "title": "Completeness",
            "description": "Estimated completeness of genome as determined from the presence/absence of marker genes and the expected collocalization of these genes",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "Purples",
            "format": "{:,.2f}"
          },
          "Contamination": {
            "title": "Contamination",
            "description": "Estimated contamination of genome as determined by the presence of multi-copy marker genes and the expected collocalization of these genes",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "Reds",
            "format": "{:,.2f}"
          }
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "checkm.py",
        "file_path": "multiqc/modules/checkm/checkm.py"
      }
    ]
  },
  "adapterremoval": {
    "module_name": "adapterremoval",
    "general_stats_calls": [
      {
        "line_number": 319,
        "call_source": "        self.general_stats_addcols(self.adapter_removal_data, headers)",
        "headers": {
          "percent_aligned": {
            "title": "% Trimmed",
            "description": "% trimmed reads",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn-rev",
            "shared_key": "percent_aligned"
          },
          "aligned_total": {
            "title": "f'{config.read_count_prefix} Reads Trimmed'",
            "description": "f'Total trimmed reads ({config.read_count_desc})'",
            "modify": "lambda x: x * config.read_count_multiplier",
            "min": 0,
            "scale": "PuBu",
            "shared_key": "read_count"
          },
          "percent_discarded": {
            "title": "% Discarded",
            "description": "% discarded reads",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn-rev",
            "shared_key": "percent_discarded"
          },
          "percent_collapsed": {
            "title": "% Collapsed",
            "description": "% collapsed reads",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn-rev",
            "shared_key": "percent_aligned"
          }
        },
        "namespace": null,
        "data_structure": "self.adapter_removal_data",
        "filename": "adapterremoval.py",
        "file_path": "multiqc/modules/adapterremoval/adapterremoval.py"
      }
    ]
  },
  "seqfu": {
    "module_name": "seqfu",
    "general_stats_calls": [
      {
        "line_number": 109,
        "call_source": "    module.general_stats_addcols(\n        data_by_sample={s_name: {ColumnKey(k): v for k, v in data.items()} for s_name, data in seqfu_stats.items()},\n        headers=general_stats_headers,\n        namespace=\"stats\",\n        group_samples_config=general_stats_grouping_config,\n    )",
        "headers": {
          "#Seq": {
            "title": "Seqs",
            "description": "Number of sequences",
            "shared_key": "read_count",
            "scale": "Oranges"
          },
          "Total bp": {
            "title": "Bases",
            "description": "Number of bases",
            "shared_key": "base_count",
            "scale": "Purples"
          },
          "Avg": {
            "title": "Mean len",
            "description": "Average sequence length",
            "format": "{:,.0f}",
            "scale": "Greens",
            "suffix": "bp"
          },
          "N50": {
            "title": "N50 len",
            "description": "50% of the sequences are longer than this size",
            "format": "{:,.0f}",
            "scale": "Blues",
            "suffix": "bp",
            "hidden": true
          },
          "N75": {
            "title": "N75 len",
            "description": "75% of the sequences are longer than this size",
            "format": "{:,.0f}",
            "scale": "Blues",
            "suffix": "bp",
            "hidden": true
          },
          "N90": {
            "title": "N90 len",
            "description": "90% of the sequences are longer than this size",
            "format": "{:,.0f}",
            "scale": "Blues",
            "suffix": "bp",
            "hidden": true
          },
          "auN": {
            "title": "auN len",
            "description": "Area under the Nx curve",
            "format": "{:,.0f}",
            "scale": "Blues",
            "suffix": "bp",
            "hidden": true
          },
          "Min": {
            "title": "Min len",
            "description": "Length of the shortest sequence",
            "format": "{:,.0f}",
            "scale": "RdYlGn",
            "suffix": "bp",
            "hidden": true
          },
          "Max": {
            "title": "Max len",
            "description": "Length of the longest sequence",
            "format": "{:,.0f}",
            "scale": "RdYlGn",
            "suffix": "bp",
            "hidden": true
          },
          "%GC": {
            "title": "%GC",
            "description": "GC content in sequences",
            "format": "{:.1%}",
            "scale": "Oranges",
            "min": 0,
            "max": 1
          }
        },
        "namespace": "stats",
        "data_structure": null,
        "filename": "stats.py",
        "file_path": "multiqc/modules/seqfu/stats.py"
      }
    ]
  },
  "hicpro": {
    "module_name": "hicpro",
    "general_stats_calls": [
      {
        "line_number": 297,
        "call_source": "        self.general_stats_addcols(self.hicpro_data, headers)",
        "headers": {
          "percent_duplicates": {
            "title": "% Duplicates",
            "description": "Percent of duplicated valid pairs (%)",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlOrRd",
            "hidden": true
          },
          "valid_interaction_rmdup": {
            "title": "f'{config.read_count_prefix} Valid Pairs Unique'",
            "description": "f'Number of valid pairs after duplicates removal ({config.read_count_desc})'",
            "min": 0,
            "scale": "RdYlBu",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count"
          },
          "percent_valid": {
            "title": "% Valid Pairs",
            "description": "Percentage of valid pairs over reported ones (%)",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn",
            "hidden": true
          },
          "valid_interaction": {
            "title": "f'{config.read_count_prefix} Valid Pairs'",
            "description": "f'Number of valid pairs ({config.read_count_desc})'",
            "min": 0,
            "scale": "RdYlBu",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "hidden": true
          },
          "percent_paired_reads": {
            "title": "% Reported",
            "description": "Percentage of paired reads (%) passing the mapping filters",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn",
            "hidden": true
          },
          "paired_reads": {
            "title": "Reported Read Pairs",
            "description": "'Total number of read pairs ({}) passing the mapping filters'.format(config.read_count_desc)",
            "min": 0,
            "scale": "RdYlBu",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count"
          },
          "percent_mapped_R2": {
            "title": "% Aligned [R2]",
            "description": "Percentage of aligned reads [R2] (%)",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn",
            "hidden": true
          },
          "mapped_R2": {
            "title": "Aligned [R2]",
            "description": "f'Total number of aligned reads [R2] ({config.read_count_desc})'",
            "min": 0,
            "scale": "RdYlBu",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "hidden": true
          },
          "percent_mapped_R1": {
            "title": "% Aligned [R1]",
            "description": "Percentage of aligned reads [R1] (%)",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn",
            "hidden": true
          },
          "mapped_R1": {
            "title": "Aligned [R1]",
            "description": "f'Total number of aligned reads [R1] ({config.read_count_desc})'",
            "min": 0,
            "scale": "RdYlBu",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "hidden": true
          },
          "total_R1": {
            "title": "Total",
            "description": "Total Number of Read Pairs",
            "min": 0,
            "scale": "RdYlBu",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count"
          }
        },
        "namespace": null,
        "data_structure": "self.hicpro_data",
        "filename": "hicpro.py",
        "file_path": "multiqc/modules/hicpro/hicpro.py"
      }
    ]
  },
  "ataqv": {
    "module_name": "ataqv",
    "general_stats_calls": [
      {
        "line_number": 121,
        "call_source": "        self.general_stats_addcols(\n            self.ataqv_data,\n            {\n                \"tss_enrichment\": {\n                    \"title\": \"TSS Enrichment\",\n                    \"description\": \"Transcription start site enrichment score\",\n                    \"min\": 0,\n                    \"scale\": \"YlOrRd\",\n                    \"format\": \"{:,.2f}\",\n                },\n                \"hqaa_percent\": {\n                    \"title\": \"HQAA in peaks\",\n                    \"description\": \"Percentage of high-quality autosomal alignments overlapping peaks\",\n                    \"max\": 100,\n                    \"min\": 0,\n                    \"suffix\": \"%\",\n                    \"scale\": \"YlGn\",\n                    \"format\": \"{:,.1f}\",\n                },\n                \"duplicate_fraction\": {\n                    \"title\": \"Dup Rate\",\n                    \"description\": \"Duplicate read fraction in peaks\",\n                    \"max\": 1,\n                    \"min\": 0,\n                    \"scale\": \"RdYlBu-rev\",\n                    \"format\": \"{:,.3f}\",\n                },\n                # Hidden by default - additional metrics\n                \"total_reads\": {\n                    \"title\": \"Total Reads\",\n                    \"description\": \"Total number of paired reads\",\n                    \"min\": 0,\n                    \"scale\": \"Blues\",\n                    \"shared_key\": \"read_count\",\n                    \"hidden\": True,\n                },\n                \"hqaa\": {\n                    \"title\": \"HQAA\",\n                    \"description\": \"Number of high-quality autosomal alignments\",\n                    \"min\": 0,\n                    \"scale\": \"Purples\",\n                    \"shared_key\": \"read_count\",\n                    \"hidden\": True,\n                },\n                \"mean_mapq\": {\n                    \"title\": \"Mean MAPQ\",\n                    \"description\": \"Mean mapping quality score\",\n                    \"min\": 0,\n                    \"max\": 60,\n                    \"scale\": \"YlOrRd\",\n                    \"format\": \"{:,.1f}\",\n                    \"hidden\": True,\n                },\n                \"median_mapq\": {\n                    \"title\": \"Median MAPQ\",\n                    \"description\": \"Median mapping quality score\",\n                    \"min\": 0,\n                    \"max\": 60,\n                    \"scale\": \"YlOrRd\",\n                    \"format\": \"{:,.1f}\",\n                    \"hidden\": True,\n                },\n                \"hqaa_mononucleosomal_count\": {\n                    \"title\": \"Mono-nuc\",\n                    \"description\": \"Number of high-quality autosomal alignments in mononucleosomal length range\",\n                    \"min\": 0,\n                    \"scale\": \"Greens\",\n                    \"shared_key\": \"read_count\",\n                    \"hidden\": True,\n                },\n                \"hqaa_tf_count\": {\n                    \"title\": \"TF Footprint\",\n                    \"description\": \"Number of high-quality autosomal alignments in transcription factor footprint length range\",\n                    \"min\": 0,\n                    \"scale\": \"Oranges\",\n                    \"shared_key\": \"read_count\",\n                    \"hidden\": True,\n                },\n                \"max_fraction_reads_from_single_autosome\": {\n                    \"title\": \"Max Chr%\",\n                    \"description\": \"Maximum fraction of reads from a single autosome\",\n                    \"min\": 0,\n                    \"max\": 1,\n                    \"scale\": \"RdYlBu-rev\",\n                    \"format\": \"{:,.3f}\",\n                    \"hidden\": True,\n                },\n                \"duplicate_fraction_not_in_peaks\": {\n                    \"title\": \"Dup Rate (non-peak)\",\n                    \"description\": \"Duplicate read fraction outside of peaks\",\n                    \"max\": 1,\n                    \"min\": 0,\n                    \"scale\": \"RdYlBu-rev\",\n                    \"format\": \"{:,.3f}\",\n                    \"hidden\": True,\n                },\n            },\n        )",
        "headers": {
          "tss_enrichment": {
            "title": "TSS Enrichment",
            "description": "Transcription start site enrichment score",
            "min": 0,
            "scale": "YlOrRd",
            "format": "{:,.2f}"
          },
          "hqaa_percent": {
            "title": "HQAA in peaks",
            "description": "Percentage of high-quality autosomal alignments overlapping peaks",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn",
            "format": "{:,.1f}"
          },
          "duplicate_fraction": {
            "title": "Dup Rate",
            "description": "Duplicate read fraction in peaks",
            "max": 1,
            "min": 0,
            "scale": "RdYlBu-rev",
            "format": "{:,.3f}"
          },
          "total_reads": {
            "title": "Total Reads",
            "description": "Total number of paired reads",
            "min": 0,
            "scale": "Blues",
            "shared_key": "read_count",
            "hidden": true
          },
          "hqaa": {
            "title": "HQAA",
            "description": "Number of high-quality autosomal alignments",
            "min": 0,
            "scale": "Purples",
            "shared_key": "read_count",
            "hidden": true
          },
          "mean_mapq": {
            "title": "Mean MAPQ",
            "description": "Mean mapping quality score",
            "min": 0,
            "max": 60,
            "scale": "YlOrRd",
            "format": "{:,.1f}",
            "hidden": true
          },
          "median_mapq": {
            "title": "Median MAPQ",
            "description": "Median mapping quality score",
            "min": 0,
            "max": 60,
            "scale": "YlOrRd",
            "format": "{:,.1f}",
            "hidden": true
          },
          "hqaa_mononucleosomal_count": {
            "title": "Mono-nuc",
            "description": "Number of high-quality autosomal alignments in mononucleosomal length range",
            "min": 0,
            "scale": "Greens",
            "shared_key": "read_count",
            "hidden": true
          },
          "hqaa_tf_count": {
            "title": "TF Footprint",
            "description": "Number of high-quality autosomal alignments in transcription factor footprint length range",
            "min": 0,
            "scale": "Oranges",
            "shared_key": "read_count",
            "hidden": true
          },
          "max_fraction_reads_from_single_autosome": {
            "title": "Max Chr%",
            "description": "Maximum fraction of reads from a single autosome",
            "min": 0,
            "max": 1,
            "scale": "RdYlBu-rev",
            "format": "{:,.3f}",
            "hidden": true
          },
          "duplicate_fraction_not_in_peaks": {
            "title": "Dup Rate (non-peak)",
            "description": "Duplicate read fraction outside of peaks",
            "max": 1,
            "min": 0,
            "scale": "RdYlBu-rev",
            "format": "{:,.3f}",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "self.ataqv_data",
        "filename": "ataqv.py",
        "file_path": "multiqc/modules/ataqv/ataqv.py"
      }
    ]
  },
  "hicup": {
    "module_name": "hicup",
    "general_stats_calls": [
      {
        "line_number": 92,
        "call_source": "        self.general_stats_addcols(\n            self.hicup_data,\n            {\n                \"Percentage_Ditags_Passed_Through_HiCUP\": {\n                    \"title\": \"Passed\",\n                    \"description\": \"Percentage Di-Tags Passed Through HiCUP\",\n                    \"max\": 100,\n                    \"min\": 0,\n                    \"suffix\": \"%\",\n                    \"scale\": \"YlGn\",\n                },\n                \"Deduplication_Read_Pairs_Uniques\": {\n                    \"title\": \"Unique\",\n                    \"description\": f\"Unique Di-Tags ({config.read_count_desc})\",\n                    \"min\": 0,\n                    \"scale\": \"PuRd\",\n                    \"modify\": lambda x: x * config.read_count_multiplier,\n                    \"shared_key\": \"read_count\",\n                },\n                \"Percentage_Uniques\": {\n                    \"title\": \"Dups\",\n                    \"description\": \"Percent Duplicate Di-Tags\",\n                    \"max\": 100,\n                    \"min\": 0,\n                    \"suffix\": \"%\",\n                    \"scale\": \"YlGn-rev\",\n                    \"modify\": lambda x: 100 - x,\n                },\n                \"Valid_Pairs\": {\n                    \"title\": \"Valid\",\n                    \"description\": f\"Valid Pairs ({config.read_count_desc})\",\n                    \"min\": 0,\n                    \"scale\": \"PuRd\",\n                    \"modify\": lambda x: x * config.read_count_multiplier,\n                    \"shared_key\": \"read_count\",\n                },\n                \"Percentage_Valid\": {\n                    \"title\": \"Valid\",\n                    \"description\": \"Percent Valid Pairs\",\n                    \"max\": 100,\n                    \"min\": 0,\n                    \"suffix\": \"%\",\n                    \"scale\": \"YlGn\",\n                },\n                \"Paired_Read_1\": {\n                    \"title\": \"Pairs Aligned\",\n                    \"description\": f\"Paired Alignments ({config.read_count_desc})\",\n                    \"min\": 0,\n                    \"scale\": \"PuRd\",\n                    \"modify\": lambda x: x * config.read_count_multiplier,\n                    \"shared_key\": \"read_count\",\n                },\n                \"Percentage_Mapped\": {\n                    \"title\": \"Aligned\",\n                    \"description\": \"Percentage of Paired Alignments\",\n                    \"max\": 100,\n                    \"min\": 0,\n                    \"suffix\": \"%\",\n                    \"scale\": \"YlGn\",\n                },\n            },\n        )",
        "headers": {
          "Percentage_Ditags_Passed_Through_HiCUP": {
            "title": "Passed",
            "description": "Percentage Di-Tags Passed Through HiCUP",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn"
          },
          "Deduplication_Read_Pairs_Uniques": {
            "title": "Unique",
            "description": "f'Unique Di-Tags ({config.read_count_desc})'",
            "min": 0,
            "scale": "PuRd",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count"
          },
          "Percentage_Uniques": {
            "title": "Dups",
            "description": "Percent Duplicate Di-Tags",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn-rev",
            "modify": "lambda x: 100 - x"
          },
          "Valid_Pairs": {
            "title": "Valid",
            "description": "f'Valid Pairs ({config.read_count_desc})'",
            "min": 0,
            "scale": "PuRd",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count"
          },
          "Percentage_Valid": {
            "title": "Valid",
            "description": "Percent Valid Pairs",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn"
          },
          "Paired_Read_1": {
            "title": "Pairs Aligned",
            "description": "f'Paired Alignments ({config.read_count_desc})'",
            "min": 0,
            "scale": "PuRd",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count"
          },
          "Percentage_Mapped": {
            "title": "Aligned",
            "description": "Percentage of Paired Alignments",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn"
          }
        },
        "namespace": null,
        "data_structure": "self.hicup_data",
        "filename": "hicup.py",
        "file_path": "multiqc/modules/hicup/hicup.py"
      }
    ]
  },
  "ivar": {
    "module_name": "ivar",
    "general_stats_calls": [
      {
        "line_number": 135,
        "call_source": "        self.general_stats_addcols(self.ivar_data, headers)",
        "headers": {
          "reads_too_short_after_trimming": {
            "title": "f'{config.read_count_prefix} Too short'",
            "description": "'Number of reads too short (<30bp) after primer trimming ({})'.format(config.read_count_desc)",
            "scale": "OrRd",
            "shared_key": "read_counts",
            "modify": "lambda x: x * config.read_count_multiplier"
          },
          "reads_outside_primer_region": {
            "title": "f'{config.read_count_prefix} Outside primer'",
            "description": "f'Number of reads outside the primer region ({config.read_count_desc})'",
            "scale": "YlOrBr",
            "shared_key": "read_counts",
            "modify": "lambda x: x * config.read_count_multiplier"
          },
          "trimmed_reads": {
            "title": "f'{config.read_count_prefix} Primer trimmed'",
            "description": "'Total number of reads where primer trimming was performed. ({})'.format(config.read_count_desc)",
            "scale": "Purples",
            "shared_key": "read_counts",
            "modify": "lambda x: x * config.read_count_multiplier"
          },
          "mapped_reads": {
            "title": "f'{config.read_count_prefix} Mapped'",
            "description": "f'Total number of mapped reads in iVar input. ({config.read_count_desc})'",
            "scale": "PuBu",
            "shared_key": "read_counts",
            "modify": "lambda x: x * config.read_count_multiplier"
          }
        },
        "namespace": null,
        "data_structure": "self.ivar_data",
        "filename": "ivar.py",
        "file_path": "multiqc/modules/ivar/ivar.py"
      }
    ]
  },
  "tophat": {
    "module_name": "tophat",
    "general_stats_calls": [
      {
        "line_number": 123,
        "call_source": "        self.general_stats_addcols(self.tophat_data, headers)",
        "headers": {
          "overall_aligned_percent": {
            "title": "% Aligned",
            "description": "overall read mapping rate",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn"
          },
          "aligned_not_multimapped_discordant": {
            "title": "f'{config.read_count_prefix} Aligned'",
            "description": "f'Aligned reads, not multimapped or discordant ({config.read_count_desc})'",
            "min": 0,
            "scale": "PuRd",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count"
          }
        },
        "namespace": null,
        "data_structure": "self.tophat_data",
        "filename": "tophat.py",
        "file_path": "multiqc/modules/tophat/tophat.py"
      }
    ]
  },
  "ccs": {
    "module_name": "ccs",
    "general_stats_calls": [
      {
        "line_number": 101,
        "call_source": "        self.general_stats_addcols(gstats_data, headers)",
        "headers": {
          "zmw_pct_passed_yield": {
            "title": "ZMWs %PF",
            "description": "Percent of ZMWs passing filters",
            "max": 100,
            "min": 0,
            "scale": "RdYlGn",
            "suffix": "%"
          },
          "zmw_passed_yield": {
            "title": "ZMWs PF",
            "description": "ZMWs pass filters",
            "scale": "BuGn",
            "format": "{:,d}",
            "shared_key": "zmw_count",
            "hidden": true
          },
          "zmw_input": {
            "title": "ZMWs input",
            "description": "ZMWs input",
            "scale": "Purples",
            "format": "{:,d}",
            "shared_key": "zmw_count"
          }
        },
        "namespace": null,
        "data_structure": "gstats_data",
        "filename": "ccs.py",
        "file_path": "multiqc/modules/ccs/ccs.py"
      }
    ]
  },
  "metaphlan": {
    "module_name": "metaphlan",
    "general_stats_calls": [
      {
        "line_number": 226,
        "call_source": "        self.general_stats_addcols(tdata, headers)",
        "headers": {
          "_function_based": "dict",
          "% Top": {
            "title": "f'% Top {self.top_n} {top_rank_name}'",
            "description": "f\"Percentage of reads that were classified by one of the top-{self.top_n} {top_rank_name} ({', '.join(top_taxa)})\"",
            "suffix": "%",
            "max": 100,
            "scale": "PuBu"
          }
        },
        "namespace": null,
        "data_structure": "tdata",
        "filename": "metaphlan.py",
        "file_path": "multiqc/modules/metaphlan/metaphlan.py"
      }
    ]
  },
  "umitools": {
    "module_name": "umitools",
    "general_stats_calls": [
      {
        "line_number": 229,
        "call_source": "        self.general_stats_addcols(data_by_sample, headers)",
        "headers": {
          "dedup_output_reads": {
            "title": "f'{config.read_count_prefix} Unique Reads'",
            "description": "f'Reads remaining after deduplication ({config.read_count_desc})'",
            "min": 0,
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "scale": "PuRd"
          },
          "dedup_percent_passing": {
            "title": "% Pass Dedup",
            "description": "% processed reads that passed deduplication",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn"
          }
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "umitools.py",
        "file_path": "multiqc/modules/umitools/umitools.py"
      },
      {
        "line_number": 250,
        "call_source": "        self.general_stats_addcols(data_by_sample, headers)",
        "headers": {
          "extract_output_reads": {
            "title": "f'{config.read_count_prefix} Extracted Reads'",
            "description": "f'Reads remaining after extraction ({config.read_count_desc})'",
            "min": 0,
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "scale": "PuRd"
          },
          "extract_percent_passing": {
            "title": "% UMI Extract",
            "description": "% reads from which a UMI extraction succeeded.",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn"
          }
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "umitools.py",
        "file_path": "multiqc/modules/umitools/umitools.py"
      }
    ]
  },
  "nonpareil": {
    "module_name": "nonpareil",
    "general_stats_calls": [
      {
        "line_number": 176,
        "call_source": "        self.general_stats_addcols(self.data_by_sample, headers)",
        "headers": {
          "nonpareil_R": {
            "title": "f'{config.read_count_prefix} Reads'",
            "description": "f'Total raw sequences ({config.read_count_desc})'",
            "modify": "lambda x: x * config.read_count_multiplier",
            "min": 0,
            "scale": "RdYlGn",
            "shared_key": "read_count",
            "hidden": true
          },
          "nonpareil_LR": {
            "title": "f'{config.base_count_prefix} Seq. effort'",
            "description": "f'Total base pairs sequenced ({config.base_count_desc})'",
            "modify": "lambda x: x * config.base_count_multiplier",
            "min": 0,
            "scale": "Blues",
            "shared_key": "base_count",
            "hidden": true
          },
          "nonpareil_kappa": {
            "title": "Redundancy",
            "description": "Dataset redundancy",
            "modify": "lambda x: x * 100",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn-rev"
          },
          "nonpareil_C": {
            "title": "Coverage",
            "description": "Dataset coverage",
            "modify": "lambda x: x * 100",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn"
          },
          "nonpareil_diversity": {
            "title": "Diversity",
            "description": "Dataset Nd index of sequence diversity",
            "min": 0,
            "scale": "GnBu-rev"
          }
        },
        "namespace": null,
        "data_structure": "self.data_by_sample",
        "filename": "nonpareil.py",
        "file_path": "multiqc/modules/nonpareil/nonpareil.py"
      }
    ]
  },
  "bustools": {
    "module_name": "bustools",
    "general_stats_calls": [
      {
        "line_number": 234,
        "call_source": "        self.general_stats_addcols(self.bustools_data, headers)",
        "headers": {
          "_dynamic_loop": "for_loop_construction"
        },
        "namespace": null,
        "data_structure": "self.bustools_data",
        "filename": "bustools.py",
        "file_path": "multiqc/modules/bustools/bustools.py"
      }
    ]
  },
  "qorts": {
    "module_name": "qorts",
    "general_stats_calls": [
      {
        "line_number": 103,
        "call_source": "        self.general_stats_addcols(self.qorts_data, headers)",
        "headers": {
          "Genes_PercentWithNonzeroCounts": {
            "title": "% Genes with Counts",
            "description": "Percent of Genes with Non-Zero Counts",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn"
          },
          "NumberOfChromosomesCovered": {
            "title": "Chrs Covered",
            "description": "Number of Chromosomes Covered",
            "format": "{:,.0f}"
          }
        },
        "namespace": null,
        "data_structure": "self.qorts_data",
        "filename": "qorts.py",
        "file_path": "multiqc/modules/qorts/qorts.py"
      }
    ]
  },
  "macs2": {
    "module_name": "macs2",
    "general_stats_calls": [
      {
        "line_number": 115,
        "call_source": "        self.general_stats_addcols(self.macs_data, headers)",
        "headers": {
          "d": {
            "title": "Fragment Length",
            "min": 0,
            "format": "{:,.0f}"
          },
          "treatment_redundant_rate": {
            "title": "Treatment Redundancy",
            "description": "Redundant rate in treatment",
            "max": 1,
            "min": 0,
            "format": "{:,.2f}",
            "scale": "RdYlBu-rev"
          },
          "control_redundant_rate": {
            "title": "Control Redundancy",
            "description": "Redundant rate in control",
            "max": 1,
            "min": 0,
            "format": "{:,.2f}",
            "scale": "RdYlBu-rev"
          },
          "peak_count": {
            "title": "Number of Peaks",
            "description": "Total number of peaks",
            "min": 0,
            "format": "{:,.0f}"
          }
        },
        "namespace": null,
        "data_structure": "self.macs_data",
        "filename": "macs2.py",
        "file_path": "multiqc/modules/macs2/macs2.py"
      }
    ]
  },
  "isoseq": {
    "module_name": "isoseq",
    "general_stats_calls": [
      {
        "line_number": 137,
        "call_source": "        self.general_stats_addcols(gstats_data, headers)",
        "headers": {
          "n_cluster": {
            "title": "Clusters",
            "description": "Number of clusters created during the clustering. (1 cluster = 1 transcript)",
            "scale": "Spectral"
          },
          "mean_cluster_size": {
            "title": "Mean cluster size",
            "description": "Average number of CCS clustered to form transcripts.",
            "format": "{:,.2f}",
            "scale": "RdYlGn"
          }
        },
        "namespace": null,
        "data_structure": "gstats_data",
        "filename": "isoseq.py",
        "file_path": "multiqc/modules/isoseq/isoseq.py"
      }
    ]
  },
  "mirtop": {
    "module_name": "mirtop",
    "general_stats_calls": [
      {
        "line_number": 178,
        "call_source": "        self.general_stats_addcols(self.mirtop_data, headers)",
        "headers": {
          "ref_miRNA_sum": {
            "title": "f'{config.read_count_prefix} Ref miRNA reads'",
            "description": "f'Read counts summed over all reference miRNAs ({config.read_count_desc})'",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "scale": "PuBu"
          },
          "isomiR_perc": {
            "title": "IsomiR %",
            "description": "% of total read counts corresponding to isomiRs",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "YlOrRd"
          },
          "isomiR_sum": {
            "title": "f'{config.read_count_prefix} IsomiR reads'",
            "description": "f'Read counts summed over all isomiRs ({config.read_count_desc})'",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "scale": "Oranges"
          },
          "read_count": {
            "title": "f'{config.read_count_prefix} Reads'",
            "description": "'Total read counts - both isomiRs and reference miRNA ({})'.format(config.read_count_desc)",
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "scale": "BuGn"
          }
        },
        "namespace": null,
        "data_structure": "self.mirtop_data",
        "filename": "mirtop.py",
        "file_path": "multiqc/modules/mirtop/mirtop.py"
      }
    ]
  },
  "jcvi": {
    "module_name": "jcvi",
    "general_stats_calls": [
      {
        "line_number": 85,
        "call_source": "        self.general_stats_addcols(self.jcvi, headers)",
        "headers": {
          "genes": {
            "title": "Number of genes",
            "description": "Number of genes"
          },
          "transcripts": {
            "title": "Number of transcripts",
            "description": "Number of transcripts"
          },
          "mean_gene_size": {
            "title": "Mean gene length (bp)",
            "description": "Mean gene length"
          }
        },
        "namespace": null,
        "data_structure": "self.jcvi",
        "filename": "jcvi.py",
        "file_path": "multiqc/modules/jcvi/jcvi.py"
      }
    ]
  },
  "fastp": {
    "module_name": "fastp",
    "general_stats_calls": [
      {
        "line_number": 389,
        "call_source": "        self.general_stats_addcols(\n            data_by_sample,\n            headers={\n                \"pct_duplication\": {\n                    \"title\": \"% Duplication\",\n                    \"description\": \"Duplication rate before filtering\",\n                    \"suffix\": \"%\",\n                    \"scale\": \"RdYlGn-rev\",\n                },\n                \"after_filtering_q30_rate\": {\n                    \"title\": \"% > Q30\",\n                    \"description\": \"Percentage of reads > Q30 after filtering\",\n                    \"modify\": lambda x: x * 100.0,\n                    \"scale\": \"GnBu\",\n                    \"suffix\": \"%\",\n                    \"hidden\": True,\n                },\n                \"after_filtering_q30_bases\": {\n                    \"title\": f\"{config.base_count_prefix} Q30 bases\",\n                    \"description\": f\"Bases > Q30 after filtering ({config.base_count_desc})\",\n                    \"scale\": \"GnBu\",\n                    \"shared_key\": \"base_count\",\n                    \"hidden\": True,\n                },\n                \"filtering_result_passed_filter_reads\": {\n                    \"title\": \"Reads After Filtering\",\n                    \"description\": f\"Total reads after filtering ({config.read_count_desc})\",\n                    \"scale\": \"Blues\",\n                    \"shared_key\": \"read_count\",\n                },\n                \"after_filtering_gc_content\": {\n                    \"title\": \"GC content\",\n                    \"description\": \"GC content after filtering\",\n                    \"suffix\": \"%\",\n                    \"scale\": \"Blues\",\n                    \"modify\": lambda x: x * 100.0,\n                },\n                \"pct_surviving\": {\n                    \"title\": \"% PF\",\n                    \"description\": \"Percent reads passing filter\",\n                    \"suffix\": \"%\",\n                    \"scale\": \"BuGn\",\n                },\n                \"pct_adapter\": {\n                    \"title\": \"% Adapter\",\n                    \"description\": \"Percentage adapter-trimmed reads\",\n                    \"suffix\": \"%\",\n                    \"scale\": \"RdYlGn-rev\",\n                },\n                \"before_filtering_read1_mean_length\": {\n                    \"title\": \"Mean R1 Length\",\n                    \"description\": \"Mean read length of R1\",\n                    \"suffix\": \"bp\",\n                    \"hidden\": True,\n                },\n                \"before_filtering_read2_mean_length\": {\n                    \"title\": \"Mean R2 Length\",\n                    \"description\": \"Mean read length of R2\",\n                    \"suffix\": \"bp\",\n                    \"hidden\": True,\n                },\n            },\n        )",
        "headers": {
          "pct_duplication": {
            "title": "% Duplication",
            "description": "Duplication rate before filtering",
            "suffix": "%",
            "scale": "RdYlGn-rev"
          },
          "after_filtering_q30_rate": {
            "title": "% > Q30",
            "description": "Percentage of reads > Q30 after filtering",
            "modify": "lambda x: x * 100.0",
            "scale": "GnBu",
            "suffix": "%",
            "hidden": true
          },
          "after_filtering_q30_bases": {
            "title": "f'{config.base_count_prefix} Q30 bases'",
            "description": "f'Bases > Q30 after filtering ({config.base_count_desc})'",
            "scale": "GnBu",
            "shared_key": "base_count",
            "hidden": true
          },
          "filtering_result_passed_filter_reads": {
            "title": "Reads After Filtering",
            "description": "f'Total reads after filtering ({config.read_count_desc})'",
            "scale": "Blues",
            "shared_key": "read_count"
          },
          "after_filtering_gc_content": {
            "title": "GC content",
            "description": "GC content after filtering",
            "suffix": "%",
            "scale": "Blues",
            "modify": "lambda x: x * 100.0"
          },
          "pct_surviving": {
            "title": "% PF",
            "description": "Percent reads passing filter",
            "suffix": "%",
            "scale": "BuGn"
          },
          "pct_adapter": {
            "title": "% Adapter",
            "description": "Percentage adapter-trimmed reads",
            "suffix": "%",
            "scale": "RdYlGn-rev"
          },
          "before_filtering_read1_mean_length": {
            "title": "Mean R1 Length",
            "description": "Mean read length of R1",
            "suffix": "bp",
            "hidden": true
          },
          "before_filtering_read2_mean_length": {
            "title": "Mean R2 Length",
            "description": "Mean read length of R2",
            "suffix": "bp",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "fastp.py",
        "file_path": "multiqc/modules/fastp/fastp.py"
      }
    ]
  },
  "dedup": {
    "module_name": "dedup",
    "general_stats_calls": [
      {
        "line_number": 155,
        "call_source": "        self.general_stats_addcols(self.dedup_data, headers)",
        "headers": {
          "dup_rate": {
            "title": "Duplication Rate",
            "description": "Percentage of reads categorised as a technical duplicate",
            "min": 0,
            "max": 100,
            "suffix": "%",
            "scale": "OrRd",
            "format": "{:,.0f}",
            "modify": "lambda x: x * 100.0"
          },
          "clusterfactor": {
            "title": "ClusterFactor",
            "description": "CF~1 means high library complexity. Large CF means not worth sequencing deeper.",
            "min": 1,
            "max": 100,
            "scale": "OrRd",
            "format": "{:,.2f}"
          },
          "reads_removed": {
            "title": "f'{ancient_read_count_prefix} Reads Removed'",
            "description": "f'Non-unique reads removed after deduplication ({ancient_read_count_desc})'",
            "modify": "lambda x: x * ancient_read_count_multiplier",
            "shared_key": "read_count",
            "min": 0,
            "hidden": true
          },
          "mapped_after_dedup": {
            "title": "f'{ancient_read_count_prefix} Post-DeDup Mapped Reads'",
            "description": "f'Unique mapping reads after deduplication ({ancient_read_count_desc})'",
            "modify": "lambda x: x * ancient_read_count_multiplier",
            "shared_key": "read_count",
            "min": 0
          }
        },
        "namespace": null,
        "data_structure": "self.dedup_data",
        "filename": "dedup.py",
        "file_path": "multiqc/modules/dedup/dedup.py"
      }
    ]
  },
  "glimpse": {
    "module_name": "glimpse",
    "general_stats_calls": [
      {
        "line_number": 212,
        "call_source": "    module.general_stats_addcols(gcsv_by_sample, general_stats_headers)",
        "headers": {
          "_unknown_node_type": "DictComp"
        },
        "namespace": null,
        "data_structure": "gcsv_by_sample",
        "filename": "err_spl.py",
        "file_path": "multiqc/modules/glimpse/err_spl.py"
      }
    ]
  },
  "umicollapse": {
    "module_name": "umicollapse",
    "general_stats_calls": [
      {
        "line_number": 139,
        "call_source": "        self.general_stats_addcols(data_by_sample, headers)",
        "headers": {
          "dedup_output_reads": {
            "title": "Unique Reads",
            "description": "f'Reads remaining after deduplication ({config.read_count_desc})'",
            "min": 0,
            "modify": "lambda x: x * config.read_count_multiplier",
            "shared_key": "read_count",
            "scale": "PuRd"
          },
          "dedup_percent_passing": {
            "title": "Pass Dedup",
            "description": "% processed reads that passed deduplication",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "RdYlGn"
          }
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "umicollapse.py",
        "file_path": "multiqc/modules/umicollapse/umicollapse.py"
      }
    ]
  },
  "snpsplit": {
    "module_name": "snpsplit",
    "general_stats_calls": [
      {
        "line_number": 176,
        "call_source": "        self.general_stats_addcols(self.snpsplit_data, headers)",
        "headers": {
          "tagging_SNP_annotation": {
            "title": "SNP annotation",
            "description": "Annotation file used for differentiating genomes",
            "scale": false,
            "modify": "lambda x: f'<code>{x}</code>'",
            "hidden": true
          },
          "tagging_percent_N_was_known_SNP": {
            "title": "% Ns known SNP",
            "description": "Percentage of detected SNPs in the sample that were also present in the annotation",
            "scale": "RdYlGn",
            "format": "{:,.2f}",
            "max": 100,
            "min": 0,
            "suffix": "%"
          },
          "tagging_SNPs_stored": {
            "title": "SNPs stored",
            "description": "Total number of SNPs used for the analysis",
            "scale": "PRGn",
            "format": "{:,.0f}",
            "hidden": true
          }
        },
        "namespace": null,
        "data_structure": "self.snpsplit_data",
        "filename": "snpsplit.py",
        "file_path": "multiqc/modules/snpsplit/snpsplit.py"
      }
    ]
  },
  "salmon": {
    "module_name": "salmon",
    "general_stats_calls": [
      {
        "line_number": 117,
        "call_source": "            self.general_stats_addcols(self.salmon_meta, headers)",
        "headers": {
          "percent_mapped": {
            "title": "% Aligned",
            "description": "% Mapped reads",
            "max": 100,
            "min": 0,
            "suffix": "%",
            "scale": "YlGn"
          },
          "num_mapped": {
            "title": "M Aligned",
            "description": "Mapped reads (millions)",
            "min": 0,
            "scale": "PuRd",
            "modify": "lambda x: float(x) * config.read_count_multiplier",
            "suffix": "config.read_count_prefix",
            "shared_key": "read_count"
          },
          "library_types": {
            "title": "Library types",
            "description": "Library types",
            "scale": false,
            "hidden": "len(set((d.get('library_types') for d in self.salmon_meta.values()))) == 1"
          }
        },
        "namespace": null,
        "data_structure": "self.salmon_meta",
        "filename": "salmon.py",
        "file_path": "multiqc/modules/salmon/salmon.py"
      },
      {
        "line_number": 139,
        "call_source": "            self.general_stats_addcols(self.salmon_lfc, lfc_headers)",
        "headers": {
          "compatible_fragment_ratio": {
            "title": "CFR",
            "description": "Compatible fragment ratio",
            "min": 0.0,
            "max": 100.0,
            "modify": "lambda x: x * 100.0",
            "suffix": "%",
            "scale": "YlGn"
          },
          "strand_mapping_bias": {
            "title": "M Bias",
            "description": "Strand mapping bias",
            "scale": "BuGn",
            "max": 1.0
          }
        },
        "namespace": null,
        "data_structure": "self.salmon_lfc",
        "filename": "salmon.py",
        "file_path": "multiqc/modules/salmon/salmon.py"
      }
    ]
  },
  "nanoq": {
    "module_name": "nanoq",
    "general_stats_calls": [
      {
        "line_number": 141,
        "call_source": "        self.general_stats_addcols(data_by_sample, general_stats_headers)",
        "headers": {
          "_function_based": "deepcopy"
        },
        "namespace": null,
        "data_structure": "data_by_sample",
        "filename": "nanoq.py",
        "file_path": "multiqc/modules/nanoq/nanoq.py"
      }
    ]
  }
}