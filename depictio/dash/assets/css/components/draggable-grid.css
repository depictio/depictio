/* =============================================================================
   DRAGGABLE GRID COMPONENTS
   All styles related to the draggable grid layout system
   ============================================================================= */

/* Draggable components background */
.react-grid-item,
.react-grid-item .card,
.react-grid-item [data-mantine="Card"],
#draggable .react-grid-item,
#draggable .react-grid-item > *,
#draggable .react-grid-item [class*="Card"] {
    background-color: var(--app-surface-color, var(--depictio-surface-light)) !important;
    color: var(--app-text-color, var(--depictio-text-light)) !important;
    transition: background-color 0.2s ease, color 0.2s ease;
}

/* Bootstrap card components in draggable items */
.react-grid-item .card-body,
.react-grid-item .card-header,
#draggable .card,
#draggable .card-body,
#draggable .card-header {
    background-color: var(--app-surface-color, var(--depictio-surface-light)) !important;
    color: var(--app-text-color, var(--depictio-text-light)) !important;
    transition: background-color 0.2s ease, color 0.2s ease;
}

/* Resize handle visibility control for vertical growing behavior */
.react-resizable-handle {
    background: transparent !important;
    border: none !important;
    box-shadow: none !important;
    opacity: 0 !important;
    transition: opacity 0.2s ease !important;
    z-index: 1000 !important; /* Ensure handles are always on top */
}

.react-grid-item:hover .react-resizable-handle {
    opacity: 0.7 !important;
    background: rgba(108, 117, 125, 0.1) !important; /* Subtle gray background on hover */
}

/* Hide resize handles when edit mode is disabled */
.drag-handles-hidden .react-resizable-handle {
    display: none !important;
    visibility: hidden !important;
}

/* Dark mode - make handle arrow icons white/light grey */
[data-mantine-color-scheme="dark"] .react-grid-item:hover > .react-resizable-handle::before,
[data-mantine-color-scheme="dark"] .react-grid-item:hover > .react-resizable-handle::after {
    filter: invert(1) !important;
}

/* Hide container completely in dark mode */
[data-mantine-color-scheme="dark"] .react-grid-item:hover > .react-resizable-handle {
    background: none !important;
    background-color: transparent !important;
    background-image: none !important;
    border: none !important;
    box-shadow: none !important;
    outline: none !important;
}

/* Add stroke when dragging or resizing */
.react-grid-item.react-grid-item-dragging,
.react-grid-item.react-grid-item-resizing {
    border: 2px solid var(--app-text-color, #666) !important;
    box-shadow: 0 0 0 1px rgba(102, 102, 102, 0.2) !important;
    z-index: 1000 !important;
}

/* Subtle dashed border on component hover - similar to text component */
.react-grid-item:hover {
    border: 1px dashed var(--app-border-color, #dee2e6) !important;
    transition: border-color 0.2s ease, box-shadow 0.2s ease !important;
}

/* Solid border when drag handle is being hovered/used */
.react-grid-item:has(.react-grid-dragHandle:hover) {
    border: 1px solid var(--app-text-color, #666) !important;
    box-shadow: 0 0 0 1px rgba(102, 102, 102, 0.1) !important;
}

/* Hide remove button (Ã—) */
.react-grid-item .remove,
.react-grid-item span.remove {
    display: none !important;
    visibility: hidden !important;
}

/* Hide the default drag handle completely, but keep functionality for ActionIcon with this class */
.react-grid-dragHandle:not(.mantine-ActionIcon-root) {
    display: none !important;
    visibility: hidden !important;
    height: 0 !important;
    padding: 0 !important;
    margin: 0 !important;
    min-height: 0 !important;
}

/* Make ActionIcon drag handles functional and styled - only visible on component hover */
.mantine-ActionIcon-root.react-grid-dragHandle {
    cursor: grab !important;
    opacity: 0 !important;  /* Hidden by default */
    transition: opacity 0.2s ease !important;
}

.mantine-ActionIcon-root.react-grid-dragHandle:hover {
    cursor: grabbing !important;
}

/* Show drag handle only when parent component is hovered */
.react-grid-item:hover .mantine-ActionIcon-root.react-grid-dragHandle {
    opacity: 1 !important;
}

/* Remove any conflicting pseudo-elements from ActionIcon drag handles */
.mantine-ActionIcon-root.react-grid-dragHandle::before,
.mantine-ActionIcon-root.react-grid-dragHandle::after,
.mantine-ActionIcon-root[id*="drag-handle"]::before,
.mantine-ActionIcon-root[id*="drag-handle"]::after {
    content: none !important;
    display: none !important;
}

/* Ensure ActionIcon children (DashIconify) are properly displayed */
.mantine-ActionIcon-root.react-grid-dragHandle > * {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
}

/* Drag handle styles removed - using ActionIcon instead */

/* Draggable component background enhancement */
.react-grid-item.dashboard-component-hover {
    background: var(--app-surface-color);
    border: 1px solid var(--app-border-color);
    border-radius: 8px;
    transition: all 0.3s ease;
}

.react-grid-item.dashboard-component-hover:hover {
    border-color: var(--app-text-color, #666);
    box-shadow: 0 4px 12px rgba(102, 102, 102, 0.15);
}

/* Component interaction effects */
.dashboard-component-hover {
    position: relative;
    transition: transform 0.2s ease;
    /* Enable vertical growing behavior */
    display: flex !important;
    flex-direction: column !important;
    height: 100% !important;
    min-height: 150px !important;
}

.dashboard-component-hover:hover {
    transform: translateY(-2px);
}

.dashboard-component-hover::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, transparent, rgba(99, 102, 241, 0.05), transparent);
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 1;
    pointer-events: none;
}

.dashboard-component-hover:hover::before {
    opacity: 1;
}

/* Responsive content for vertical growing */
.dashboard-component-hover > * {
    flex: 1 !important;
}

/* Ensure Bootstrap cards inherit flexbox behavior */
.dashboard-component-hover .card,
.dashboard-component-hover [data-mantine="Card"],
.dashboard-component-hover .mantine-Card-root {
    display: flex !important;
    flex-direction: column !important;
    height: 100% !important;
    flex: 1 !important;
}

/* Ensure card bodies also use flexbox and grow */
.dashboard-component-hover .card-body,
.dashboard-component-hover .mantine-Card-section {
    display: flex !important;
    flex-direction: column !important;
    height: 100% !important;
    flex: 1 !important;
}

/* Ensure content inside card bodies grows to fill space */
.dashboard-component-hover .card-body > div,
.dashboard-component-hover .mantine-Card-section > div {
    flex: 1 !important;
    height: 100% !important;
}

/* Ensure graphs grow vertically */
.dashboard-component-hover .plotly-graph-div {
    flex: 1 !important;
    min-height: 200px !important;
    height: 100% !important;
}

/* Ensure tables adapt to vertical space */
.dashboard-component-hover .dash-table-container {
    flex: 1 !important;
    height: 100% !important;
    overflow-y: auto !important;
}

/* Ensure mantine cards stack properly */
.dashboard-component-hover .mantine-Card-root {
    margin-bottom: 10px !important;
}

/* Text components vertical growing */
.dashboard-component-hover [id*="text-component"] {
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
}

.dashboard-component-hover [id*="text-body"] {
    flex: 1 !important;
    height: 100% !important;
}

/* Interactive components vertical growing */
.dashboard-component-hover [id*="interactive"] {
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
}

/* Ensure figure components use full space */
.dashboard-component-hover .js-plotly-plot {
    flex: 1 !important;
    min-height: 200px !important;
}

/* JBrowse components vertical growing */
.dashboard-component-hover [id*="jbrowse"] {
    height: 100% !important;
}

/* =============================================================================
   RESPONSIVE CLASSES FOR VERTICAL GROWING - MISSING FROM MAIN APPLICATION
   These classes are essential for proper vertical growing behavior
   ============================================================================= */

/* Responsive wrapper styles */
.responsive-wrapper {
    position: relative !important;
    width: 100% !important;
    height: 100% !important;
}

/* Responsive content that grows vertically */
.responsive-content {
    display: flex !important;
    flex-direction: column !important;
    height: 100% !important;
    min-height: 150px !important;
}

/* Responsive graph styling */
.responsive-graph {
    flex: 1 !important;
    min-height: 200px !important;
    height: 100% !important;
}

/* Metrics stack styling */
.metrics-stack {
    flex: 1 !important;
    overflow-y: auto !important;
    padding-right: 5px !important;
}

/* Responsive table styling */
.responsive-table th,
.responsive-table td {
    padding: 8px 12px !important;
    border-bottom: 1px solid #dee2e6 !important;
    text-align: left !important;
}

.responsive-table th {
    background-color: #f8f9fa !important;
    font-weight: 600 !important;
}

.responsive-table tbody tr:hover {
    background-color: #f5f5f5 !important;
}

/* =============================================================================
   CARD COMPONENTS HEIGHT INHERITANCE FIX
   Ensure card components take full height of their containers
   ============================================================================= */

/* Fix component divs with JSON-like IDs to take full height */
.responsive-content > div > div[id*="index"] {
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
}

/* Fix all intermediate wrapper divs that contain components */
.responsive-content div[id*="{"] {
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
}

/* CRITICAL: Target the exact JSON-like ID structure for card components */
.responsive-content div[id*="\"index\""][id*="\"type\""][id*="\"card-component\""] {
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
    flex: 1 !important;
    min-height: 0 !important;
    background-color: rgba(255, 0, 255, 0.1) !important; /* Magenta background for debugging */
}

/* NUCLEAR: Target ALL divs that are children of responsive-content */
.responsive-content > div {
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
    flex: 1 !important;
    min-height: 0 !important;
    margin: 0 !important;
    padding: 0 !important;
    box-sizing: border-box !important;
    background-color: rgba(0, 255, 255, 0.05) !important; /* Cyan background for debugging */
}

/* MAXIMUM SPECIFICITY: Target div elements that have JSON-style attributes */
div[id*="{\"index\""] {
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
    flex: 1 !important;
    min-height: 0 !important;
    box-sizing: border-box !important;
    margin: 0 !important;
    padding: 0 !important;
    background-color: rgba(255, 165, 0, 0.1) !important; /* Orange background for debugging */
}

/* OVERRIDE: Remove orange background for figure-related elements */
div[id*="{\"index\""][id*="figure"],
div[id*="figure"] {
    background-color: rgba(50, 205, 50, 0.2) !important; /* Light Green to override orange */
}

/* BOOTSTRAP CARD TARGETING: Target Bootstrap cards within figure components */
.responsive-content .card[id*="figure-component"],
.responsive-content div.card[id*="figure-component"] {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    right: 0 !important;
    bottom: 0 !important;
    width: 100% !important;
    height: 100% !important;
    margin: 0 !important;
    padding: 0 !important;
    box-sizing: border-box !important;
    display: flex !important;
    flex-direction: column !important;
    background-color: rgba(30, 144, 255, 0.4) !important; /* Dodger Blue for Bootstrap cards */
    z-index: 3 !important; /* Even higher priority */
}

/* ULTIMATE FIGURE RULE: Override ALL other backgrounds with maximum specificity */
.responsive-content *[id*="figure"],
.responsive-content div[id*="figure"],
.responsive-content *[id*="graph"],
.responsive-content div[id*="graph"],
.responsive-content div[id*="{\"index\""],
.responsive-content div[id*="{"][id*="\"index\""],
.responsive-content .card[id*="figure"],
.responsive-content *[class*="plotly"] {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    right: 0 !important;
    bottom: 0 !important;
    width: 100% !important;
    height: 100% !important;
    margin: 0 !important;
    padding: 0 !important;
    box-sizing: border-box !important;
    display: flex !important;
    flex-direction: column !important;
    background-color: rgba(255, 215, 0, 0.5) !important; /* GOLD - single override color */
    z-index: 999 !important; /* Maximum possible priority */
}

/* INTERACTIVE COMPONENTS: The problem is in the Python code structure, not CSS */

/* NUCLEAR APPROACH: Remove ALL spacing and enforce absolute positioning for card elements */
.responsive-content div[id*="{\"index\""][id*="card-component"] {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    right: 0 !important;
    bottom: 0 !important;
    width: 100% !important;
    height: 100% !important;
    margin: 0 !important;
    padding: 0 !important;
    box-sizing: border-box !important;
    background-color: rgba(128, 0, 128, 0.2) !important; /* Purple background to identify */
}

/* Ensure the parent of the absolutely positioned element is relative */
.responsive-content {
    position: relative !important;
}

/* MINIMIZE ALL MARGINS AND PADDING in the component hierarchy */
.responsive-content div,
.responsive-content .card,
.responsive-content .card-body,
.responsive-content .mantine-Card-root {
    margin: 0 !important;
    padding-top: 0 !important;
    padding-bottom: 0 !important;
    padding-left: 2px !important;
    padding-right: 2px !important;
}

/* Specific override for Bootstrap card elements */
.responsive-content .card {
    border: none !important;
    box-shadow: none !important;
}

/* Specific override for Mantine card elements */
.responsive-content .mantine-Card-root {
    padding: 4px !important; /* Minimal padding for readability */
}

/* ULTIMATE SPECIFICITY: Single rule for card components with maximum priority */
.responsive-content div[id*="{"][id*="\"index\""][id*="\"type\""][id*="\"card-component\""] {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    right: 0 !important;
    bottom: 0 !important;
    width: 100% !important;
    height: 100% !important;
    margin: 0 !important;
    padding: 0 !important;
    box-sizing: border-box !important;
    display: flex !important;
    flex-direction: column !important;
    background-color: rgba(255, 20, 147, 0.3) !important; /* Deep Pink - highest priority */
    z-index: 1 !important;
}

/* ULTIMATE SPECIFICITY: Multiple rules for figure components with maximum priority */
.responsive-content div[id*="{"][id*="\"index\""][id*="\"type\""][id*="\"figure-component\""],
.responsive-content div[id*="\"figure-component\""],
.responsive-content *[id*="\"figure-component\""] {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    right: 0 !important;
    bottom: 0 !important;
    width: 100% !important;
    height: 100% !important;
    margin: 0 !important;
    padding: 0 !important;
    box-sizing: border-box !important;
    display: flex !important;
    flex-direction: column !important;
    background-color: rgba(0, 191, 255, 0.3) !important; /* Deep Sky Blue - highest priority for figures */
    z-index: 2 !important; /* Higher than generic rules */
}

/* FIGURE BODY: Target figure body elements */
.responsive-content div[id*="{"][id*="\"figure-body\""] {
    height: 100% !important;
    width: 100% !important;
    margin: 0 !important;
    padding: 2px !important;
    box-sizing: border-box !important;
    display: flex !important;
    flex-direction: column !important;
    flex: 1 !important;
    background-color: rgba(173, 216, 230, 0.2) !important; /* Light Blue for figure body */
}

/* PLOTLY GRAPH: Target the actual graph elements */
.responsive-content div[id*="{"][id*="\"graph\""],
.responsive-content .plotly-graph-div,
.responsive-content .js-plotly-plot {
    height: 100% !important;
    width: 100% !important;
    margin: 0 !important;
    padding: 0 !important;
    box-sizing: border-box !important;
    flex: 1 !important;
    min-height: 200px !important; /* Ensure minimum graph height */
    background-color: rgba(135, 206, 250, 0.2) !important; /* Light Sky Blue for graphs */
}

/* More specific targeting for nested component wrappers */
.responsive-content > div > div > div {
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
    flex: 1 !important;
}

/* Target the specific div structure before card components */
.responsive-content div[style*="position: relative"] {
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
    flex: 1 !important;
}

/* Fix card components specifically */
.responsive-content .card,
.responsive-content div[id*="card-component"] {
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
    flex: 1 !important;
}

/* Ensure all divs leading to card components inherit height */
.responsive-content * {
    box-sizing: border-box !important;
}

/* Remove overly aggressive rules that hide content */

/* =============================================================================
   ULTIMATE FIX: Target the exact intermediate divs that break flex chain
   ============================================================================= */

/* Target ALL divs between responsive-content and card-component (nuclear approach) */
.responsive-wrapper .responsive-content div {
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
    flex: 1 !important;
}

/* Specifically target the JSON-ID wrapper div that contains the card */
.responsive-wrapper div[id*="{"][id*="index"]:not([id*="card"]) {
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
    flex: 1 !important;
}

/* Target empty divs that are children of JSON-ID divs */
.responsive-wrapper div[id*="{"] > div {
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
    flex: 1 !important;
}

/* Nuclear approach: ALL divs in responsive wrapper get flex unless they have content */
.responsive-wrapper div:not(.mantine-Card-root):not(.mantine-Text-root):not([class*="ActionIcon"]) {
    flex: 1 !important;
}

/* =============================================================================
   CRITICAL: Force card component specifically to take full height
   ============================================================================= */

/* Target the exact card component that's not expanding - NUCLEAR APPROACH */
.responsive-wrapper div[id*="card-component"].card,
.responsive-wrapper .card[id*="card-component"],
div[id*="card-component"].card {
    height: 100% !important;
    min-height: 0 !important;
    max-height: none !important;
    flex: 1 1 0% !important;
    flex-grow: 1 !important;
    flex-shrink: 1 !important;
    flex-basis: 0% !important;
    align-self: stretch !important;
    /* Override any Bootstrap card defaults */
    position: relative !important;
    overflow: visible !important;
}

/* Force Bootstrap card to behave properly in flex context */
.responsive-wrapper .card {
    height: 100% !important;
    min-height: 0 !important;
    flex: 1 !important;
    align-self: stretch !important;
}

/* Ensure card body also expands */
.responsive-wrapper .card-body {
    height: 100% !important;
    min-height: 0 !important;
    flex: 1 !important;
}

/* Fix card body to take full height */
.responsive-content .card-body,
.responsive-content div[id*="card-body"] {
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
    flex: 1 !important;
    justify-content: flex-start !important;  /* Override Bootstrap's center alignment */
    min-height: 0 !important;  /* Allow shrinking */
}

/* Fix Mantine cards - keep original properties */
.responsive-content .mantine-Card-root {
    flex: 1 !important;
}

/* =============================================================================
   CRITICAL FIX: Override dashboard.css rule that breaks vertical growing
   ============================================================================= */

/* Override the problematic calc(100% - 40px) rule in dashboard.css - MAXIMUM SPECIFICITY */
div.responsive-wrapper div.react-grid-item div.mantine-Card-root,
div.responsive-wrapper .react-grid-item .mantine-Card-root,
.responsive-wrapper .mantine-Card-root,
.react-grid-item .mantine-Card-root {
    height: 100% !important;  /* Override calc(100% - 40px) */
    max-height: none !important;
    min-height: 0 !important;
    flex: 1 1 0% !important;
    flex-grow: 1 !important;
    flex-shrink: 1 !important;
    display: flex !important;
    flex-direction: column !important;
}

/* =============================================================================
   DRAG DISABLE FUNCTIONALITY - REMOVED
   Now using properties-only approach like the working version2 script
   ============================================================================= */

/* Hide drag handles when edit mode is disabled */
.drag-handles-hidden .react-grid-dragHandle {
    display: none !important;
    visibility: hidden !important;
}

/* Normalize wrapper div padding between edit and non-edit modes - minimize white space */
.react-grid-item > div {
    padding: 2px !important;
    max-height: 100% !important;
    max-width: 100% !important;
    height: 100% !important;
    box-sizing: border-box !important;
    /* Critical: Ensure grid layout wrapper also uses flexbox */
    display: flex !important;
    flex-direction: column !important;
}

/* Ensure DraggableWrapper content takes full height */
.react-grid-item div[id^="box-"] {
    position: absolute !important;
    inset: 0 !important; /* Fill entire parent container */
    display: flex !important;
    flex-direction: column !important;
    box-sizing: border-box !important;
    margin: 0 !important;
    padding: 0 !important;
    background-color: rgba(0, 255, 0, 0.05) !important; /* Subtle green tint for debugging */
}

/* Ensure react-grid-item itself is a proper flex container */
.react-grid-item.react-draggable.cssTransforms.react-resizable {
    position: relative !important;
    display: flex !important;
    flex-direction: column !important;
    box-sizing: border-box !important;
    overflow: visible !important; /* Allow resize handles to extend outside */
    background-color: rgba(255, 0, 0, 0.05) !important; /* Subtle red tint for debugging */
}

/* CRITICAL: Target the unnamed DIV that DashGridLayout creates automatically (Child 0) */
/* BUT exclude interactive components from this rule */
.react-grid-item.react-draggable.cssTransforms.react-resizable > div:first-child:not(:has(div[id*="interactive-component"])) {
    position: absolute !important;
    inset: 0 !important; /* Modern shorthand for top/right/bottom/left: 0 */
    width: 100% !important;
    height: 100% !important;
    box-sizing: border-box !important;
    display: flex !important;
    flex-direction: column !important;
    background-color: rgba(255, 165, 0, 0.1) !important; /* Subtle orange background for debugging */
}

/* INTERACTIVE COMPONENTS: Let them use normal DashGridLayout behavior */
.react-grid-item.react-draggable.cssTransforms.react-resizable:has(div[id*="interactive-component"]) > div:first-child {
    /* Use default DashGridLayout styling - no special rules */
    position: relative !important;
    padding: 10px !important;
    overflow: hidden !important;
    max-height: 95% !important;
    max-width: 100% !important;
    /* No debug background - clean styling */
}

/* Force responsive-wrapper to use flex display instead of block */
/* BUT exclude interactive components */
.responsive-wrapper:not(:has(div[id*="interactive-component"])) {
    display: flex !important;
    flex-direction: column !important;
    flex: 1 !important;
}

/* INTERACTIVE COMPONENTS: Let responsive-wrapper work normally */
.responsive-wrapper:has(div[id*="interactive-component"]) {
    position: relative !important;
    width: 100% !important;
    height: 100% !important;
    /* No flex rules - use normal block layout */
}

/* Force responsive-content to grow */
/* BUT exclude interactive components */
.responsive-content:not(:has(div[id*="interactive-component"])) {
    flex: 1 !important;
    flex-grow: 1 !important;
}

/* INTERACTIVE COMPONENTS: Let responsive-content work normally */
.responsive-content:has(div[id*="interactive-component"]) {
    display: flex !important;
    flex-direction: column !important;
    height: 100% !important;
    min-height: 150px !important;
    /* No aggressive flex growing */
}

/* Fix all intermediate wrapper divs in responsive-content */
.responsive-content > div {
    height: 100% !important;
    flex: 1 !important;
    display: flex !important;
    flex-direction: column !important;
}

/* Nuclear approach: Target all divs inside responsive-content */
.responsive-content div {
    min-height: 0 !important;
    flex: 1 !important;
}

/* Fix intermediate wrapper divs created by grid layout */
.react-grid-item > div > div {
    flex: 1 !important;
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
}

/* Hide the old remove button completely */
.react-grid-item .remove {
    display: none !important;
    visibility: hidden !important;
}

/* Minimize padding between card-component and card elements */
.react-grid-item [id*="card-component"] {
    padding: 0px !important;
    margin: 0px !important;
}

.react-grid-item [id*="card-body"] {
    padding: 2px !important;
}

.react-grid-item [id*="card"] .mantine-Card-root {
    padding: var(--mantine-spacing-xs) !important;
}

/* Hide ActionIconGroup and individual ActionIcons by default - only visible on component hover */
.react-grid-item .mantine-ActionIconGroup-root {
    opacity: 0 !important;
    transition: opacity 0.2s ease !important;
    pointer-events: none !important;
}

.react-grid-item .mantine-ActionIcon-root[id*="remove-box-button"],
.react-grid-item .mantine-ActionIcon-root[id*="edit-box-button"],
.react-grid-item .mantine-ActionIcon-root[id*="duplicate-box-button"],
.react-grid-item .mantine-ActionIcon-root[id*="reset-selection-graph-button"] {
    opacity: 0 !important;
    transition: opacity 0.2s ease !important;
    pointer-events: none !important;
}

/* Show ActionIconGroup and individual ActionIcons only when parent component is hovered */
.react-grid-item:hover .mantine-ActionIconGroup-root {
    opacity: 1 !important;
    pointer-events: auto !important;
}

.react-grid-item:hover .mantine-ActionIcon-root[id*="remove-box-button"],
.react-grid-item:hover .mantine-ActionIcon-root[id*="edit-box-button"],
.react-grid-item:hover .mantine-ActionIcon-root[id*="duplicate-box-button"],
.react-grid-item:hover .mantine-ActionIcon-root[id*="reset-selection-graph-button"] {
    opacity: 1 !important;
    pointer-events: auto !important;
}

/* Hide ActionIconGroup completely when edit mode is disabled (matching drag handle pattern) */
.drag-handles-hidden .mantine-ActionIconGroup-root {
    display: none !important;
    visibility: hidden !important;
}

/* Disable text editing when edit mode is off */
.drag-handles-hidden [id*="editable-title"] {
    pointer-events: none !important;
    cursor: default !important;
}

.drag-handles-hidden [id*="text-container"] {
    cursor: default !important;
}

.drag-handles-hidden [id*="text-container"]:hover {
    border: 1px solid transparent !important;
    background-color: transparent !important;
}

/* Make drag handle cursor change to grabbing on hover */
.react-grid-item:hover .mantine-ActionIcon-root[id*="drag-handle"]:hover,
.react-grid-item:hover .mantine-ActionIcon-root.react-grid-dragHandle:hover {
    cursor: grabbing !important;
}

/* Hide action buttons and drag handle completely when edit mode is disabled */
.drag-handles-hidden .mantine-ActionIconGroup-root,
.drag-handles-hidden .mantine-ActionIcon-root[id*="drag-handle"],
.drag-handles-hidden .mantine-ActionIcon-root[id*="remove-box-button"],
.drag-handles-hidden .mantine-ActionIcon-root[id*="edit-box-button"],
.drag-handles-hidden .mantine-ActionIcon-root[id*="duplicate-box-button"],
.drag-handles-hidden .mantine-ActionIcon-root[id*="reset-selection-graph-button"] {
    display: none !important;
    visibility: hidden !important;
}
