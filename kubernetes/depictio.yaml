apiVersion: v1
kind: Namespace
metadata:
  name: depictio
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi # Adjust the size as needed
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/Users/tweber/Gits/depictio/depictioDB_K8S"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi # Adjust the size as needed
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  namespace: depictio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo:latest
          args:
            ["mongod", "--dbpath", "/data/depictioDB_K8S", "--port", "27018"]
          ports:
            - containerPort: 27018
          volumeMounts:
            - name: mongo-storage
              mountPath: /data/depictioDB_K8S
      volumes:
        - name: mongo-storage
          emptyDir: {}
          # persistentVolumeClaim:
          #   claimName: mongo-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: depictio
spec:
  type: NodePort # Or use LoadBalancer if you're using Minikube with a cloud provider's driver
  ports:
    - name: db
      port: 27018
      targetPort: 27018
      nodePort: 32000 # Minikube will allocate a port if you don't specify one  selector:
  selector:
    app: mongo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: depictio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          image: minio/minio:latest
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: depictio-secrets
                  key: MINIO_ROOT_USER
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: depictio-secrets
                  key: MINIO_ROOT_PASSWORD
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: depictio-secrets
                  key: MINIO_ACCESS_KEY
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: depictio-secrets
                  key: MINIO_SECRET_KEY
          args: ["server", "/data", "--console-address", ":9001"]
          ports:
            - containerPort: 9000
            - containerPort: 9001
          volumeMounts:
            - name: minio-storage
              mountPath: /data
      volumes:
        - name: minio-storage
          hostPath:
            path: /mnt/data/minio
            type: DirectoryOrCreate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: depictio
  namespace: depictio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: depictio
  template:
    metadata:
      labels:
        app: depictio
    spec:
      containers:
        - name: depictio-test
          image: depictio:dev
          command: ["python", "/mnt/kubernetes/app.py"]
          ports:
            - containerPort: 8060
          volumeMounts:
            - name: app-script
              mountPath: /mnt/kubernetes
      volumes:
        - name: app-script
          hostPath:
            path: /mnt/kubernetes
            type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: depictio-test
  namespace: depictio
spec:
  ports:
    - name: http
      port: 8060
      targetPort: 8060
  selector:
    app: depictio
